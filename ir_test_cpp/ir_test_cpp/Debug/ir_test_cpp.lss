
ir_test_cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000007f0  00000884  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000072  0080011c  0080011c  000008a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000157e  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b9b  00000000  00000000  00001f66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008a0  00000000  00000000  00002b01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  000033a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000076a  00000000  00000000  00003664  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b5e  00000000  00000000  00003dce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000492c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 be 02 	jmp	0x57c	; 0x57c <__vector_1>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_8>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	9d 03       	fmulsu	r17, r21

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e0 ef       	ldi	r30, 0xF0	; 240
  7e:	f7 e0       	ldi	r31, 0x07	; 7
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	ac 31       	cpi	r26, 0x1C	; 28
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	ac e1       	ldi	r26, 0x1C	; 28
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	ae 38       	cpi	r26, 0x8E	; 142
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 59 03 	call	0x6b2	; 0x6b2 <main>
  b6:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_ZN2IRC1Ev>:
bool IR::Available(){
	return irAvaliable;
}
bool IR::rawAvailable(){
	return rawNew;
}
  be:	08 95       	ret

000000c0 <_ZN2IR4InitEii>:
  c0:	53 9a       	sbi	0x0a, 3	; 10
  c2:	e0 eb       	ldi	r30, 0xB0	; 176
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 61       	ori	r24, 0x10	; 16
  ca:	80 83       	st	Z, r24
  cc:	80 81       	ld	r24, Z
  ce:	8f 7d       	andi	r24, 0xDF	; 223
  d0:	80 83       	st	Z, r24
  d2:	80 81       	ld	r24, Z
  d4:	8e 7f       	andi	r24, 0xFE	; 254
  d6:	80 83       	st	Z, r24
  d8:	80 81       	ld	r24, Z
  da:	8d 7f       	andi	r24, 0xFD	; 253
  dc:	80 83       	st	Z, r24
  de:	e1 eb       	ldi	r30, 0xB1	; 177
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	87 7f       	andi	r24, 0xF7	; 247
  e6:	80 83       	st	Z, r24
  e8:	80 81       	ld	r24, Z
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	80 83       	st	Z, r24
  ee:	80 81       	ld	r24, Z
  f0:	8d 7f       	andi	r24, 0xFD	; 253
  f2:	80 83       	st	Z, r24
  f4:	80 81       	ld	r24, Z
  f6:	8b 7f       	andi	r24, 0xFB	; 251
  f8:	80 83       	st	Z, r24
  fa:	66 32       	cpi	r22, 0x26	; 38
  fc:	71 05       	cpc	r23, r1
  fe:	99 f4       	brne	.+38     	; 0x126 <_ZN2IR4InitEii+0x66>
 100:	80 ec       	ldi	r24, 0xC0	; 192
 102:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 106:	e0 e7       	ldi	r30, 0x70	; 112
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	84 60       	ori	r24, 0x04	; 4
 10e:	80 83       	st	Z, r24
 110:	e9 e6       	ldi	r30, 0x69	; 105
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	82 60       	ori	r24, 0x02	; 2
 118:	80 83       	st	Z, r24
 11a:	e8 9a       	sbi	0x1d, 0	; 29
 11c:	46 32       	cpi	r20, 0x26	; 38
 11e:	51 05       	cpc	r21, r1
 120:	09 f0       	breq	.+2      	; 0x124 <_ZN2IR4InitEii+0x64>
 122:	72 c0       	rjmp	.+228    	; 0x208 <_ZN2IR4InitEii+0x148>
 124:	08 c0       	rjmp	.+16     	; 0x136 <_ZN2IR4InitEii+0x76>
 126:	68 33       	cpi	r22, 0x38	; 56
 128:	71 05       	cpc	r23, r1
 12a:	09 f0       	breq	.+2      	; 0x12e <_ZN2IR4InitEii+0x6e>
 12c:	5e c0       	rjmp	.+188    	; 0x1ea <_ZN2IR4InitEii+0x12a>
 12e:	8d e7       	ldi	r24, 0x7D	; 125
 130:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 134:	5a c0       	rjmp	.+180    	; 0x1ea <_ZN2IR4InitEii+0x12a>
 136:	e7 e6       	ldi	r30, 0x67	; 103
 138:	f1 e0       	ldi	r31, 0x01	; 1
 13a:	88 e2       	ldi	r24, 0x28	; 40
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	91 83       	std	Z+1, r25	; 0x01
 140:	80 83       	st	Z, r24
 142:	8c e3       	ldi	r24, 0x3C	; 60
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	93 83       	std	Z+3, r25	; 0x03
 148:	82 83       	std	Z+2, r24	; 0x02
 14a:	80 e5       	ldi	r24, 0x50	; 80
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	95 83       	std	Z+5, r25	; 0x05
 150:	84 83       	std	Z+4, r24	; 0x04
 152:	84 e6       	ldi	r24, 0x64	; 100
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	97 83       	std	Z+7, r25	; 0x07
 158:	86 83       	std	Z+6, r24	; 0x06
 15a:	45 c0       	rjmp	.+138    	; 0x1e6 <_ZN2IR4InitEii+0x126>
 15c:	68 33       	cpi	r22, 0x38	; 56
 15e:	71 05       	cpc	r23, r1
 160:	09 f0       	breq	.+2      	; 0x164 <_ZN2IR4InitEii+0xa4>
 162:	41 c0       	rjmp	.+130    	; 0x1e6 <_ZN2IR4InitEii+0x126>
 164:	e7 e6       	ldi	r30, 0x67	; 103
 166:	f1 e0       	ldi	r31, 0x01	; 1
 168:	8f e3       	ldi	r24, 0x3F	; 63
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	91 83       	std	Z+1, r25	; 0x01
 16e:	80 83       	st	Z, r24
 170:	8e e5       	ldi	r24, 0x5E	; 94
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	93 83       	std	Z+3, r25	; 0x03
 176:	82 83       	std	Z+2, r24	; 0x02
 178:	81 e8       	ldi	r24, 0x81	; 129
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	95 83       	std	Z+5, r25	; 0x05
 17e:	84 83       	std	Z+4, r24	; 0x04
 180:	8e e9       	ldi	r24, 0x9E	; 158
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	97 83       	std	Z+7, r25	; 0x07
 186:	86 83       	std	Z+6, r24	; 0x06
 188:	2e c0       	rjmp	.+92     	; 0x1e6 <_ZN2IR4InitEii+0x126>
 18a:	48 33       	cpi	r20, 0x38	; 56
 18c:	51 05       	cpc	r21, r1
 18e:	59 f5       	brne	.+86     	; 0x1e6 <_ZN2IR4InitEii+0x126>
 190:	66 32       	cpi	r22, 0x26	; 38
 192:	71 05       	cpc	r23, r1
 194:	99 f4       	brne	.+38     	; 0x1bc <_ZN2IR4InitEii+0xfc>
 196:	e7 e6       	ldi	r30, 0x67	; 103
 198:	f1 e0       	ldi	r31, 0x01	; 1
 19a:	8e e1       	ldi	r24, 0x1E	; 30
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	91 83       	std	Z+1, r25	; 0x01
 1a0:	80 83       	st	Z, r24
 1a2:	8c e2       	ldi	r24, 0x2C	; 44
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	93 83       	std	Z+3, r25	; 0x03
 1a8:	82 83       	std	Z+2, r24	; 0x02
 1aa:	8d e3       	ldi	r24, 0x3D	; 61
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	95 83       	std	Z+5, r25	; 0x05
 1b0:	84 83       	std	Z+4, r24	; 0x04
 1b2:	8a e4       	ldi	r24, 0x4A	; 74
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	97 83       	std	Z+7, r25	; 0x07
 1b8:	86 83       	std	Z+6, r24	; 0x06
 1ba:	15 c0       	rjmp	.+42     	; 0x1e6 <_ZN2IR4InitEii+0x126>
 1bc:	68 33       	cpi	r22, 0x38	; 56
 1be:	71 05       	cpc	r23, r1
 1c0:	91 f4       	brne	.+36     	; 0x1e6 <_ZN2IR4InitEii+0x126>
 1c2:	e7 e6       	ldi	r30, 0x67	; 103
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	8f e2       	ldi	r24, 0x2F	; 47
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	91 83       	std	Z+1, r25	; 0x01
 1cc:	80 83       	st	Z, r24
 1ce:	86 e4       	ldi	r24, 0x46	; 70
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	93 83       	std	Z+3, r25	; 0x03
 1d4:	82 83       	std	Z+2, r24	; 0x02
 1d6:	80 e6       	ldi	r24, 0x60	; 96
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	95 83       	std	Z+5, r25	; 0x05
 1dc:	84 83       	std	Z+4, r24	; 0x04
 1de:	86 e7       	ldi	r24, 0x76	; 118
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	97 83       	std	Z+7, r25	; 0x07
 1e4:	86 83       	std	Z+6, r24	; 0x06
 1e6:	78 94       	sei
 1e8:	08 95       	ret
 1ea:	e0 e7       	ldi	r30, 0x70	; 112
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	84 60       	ori	r24, 0x04	; 4
 1f2:	80 83       	st	Z, r24
 1f4:	e9 e6       	ldi	r30, 0x69	; 105
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	82 60       	ori	r24, 0x02	; 2
 1fc:	80 83       	st	Z, r24
 1fe:	e8 9a       	sbi	0x1d, 0	; 29
 200:	46 32       	cpi	r20, 0x26	; 38
 202:	51 05       	cpc	r21, r1
 204:	11 f6       	brne	.-124    	; 0x18a <_ZN2IR4InitEii+0xca>
 206:	aa cf       	rjmp	.-172    	; 0x15c <_ZN2IR4InitEii+0x9c>
 208:	48 33       	cpi	r20, 0x38	; 56
 20a:	51 05       	cpc	r21, r1
 20c:	61 f7       	brne	.-40     	; 0x1e6 <_ZN2IR4InitEii+0x126>
 20e:	c3 cf       	rjmp	.-122    	; 0x196 <_ZN2IR4InitEii+0xd6>

00000210 <_ZN2IR7RecieveEv>:
 210:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <irAvaliable>
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	ba 01       	movw	r22, r20
 21c:	6f 5f       	subi	r22, 0xFF	; 255
 21e:	7f 4f       	sbci	r23, 0xFF	; 255
 220:	fb 01       	movw	r30, r22
 222:	e4 5b       	subi	r30, 0xB4	; 180
 224:	fe 4f       	sbci	r31, 0xFE	; 254
 226:	20 81       	ld	r18, Z
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <_ZN2IR7RecieveEv+0x20>
 22c:	22 0f       	add	r18, r18
 22e:	33 1f       	adc	r19, r19
 230:	4a 95       	dec	r20
 232:	e2 f7       	brpl	.-8      	; 0x22c <_ZN2IR7RecieveEv+0x1c>
 234:	82 2b       	or	r24, r18
 236:	ab 01       	movw	r20, r22
 238:	68 30       	cpi	r22, 0x08	; 8
 23a:	71 05       	cpc	r23, r1
 23c:	71 f7       	brne	.-36     	; 0x21a <_ZN2IR7RecieveEv+0xa>
 23e:	08 95       	ret

00000240 <_ZN2IR9AvailableEv>:
 240:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <irAvaliable>
 244:	08 95       	ret

00000246 <_ZN2IR8TransmitEc>:
void IR::Transmit(char input){
	sendFrame[0] = 2;
 246:	e5 e7       	ldi	r30, 0x75	; 117
 248:	f1 e0       	ldi	r31, 0x01	; 1
 24a:	82 e0       	ldi	r24, 0x02	; 2
 24c:	80 83       	st	Z, r24
	uint8_t framePos = 1;
	sendFrame[framePos] = 4;
 24e:	84 e0       	ldi	r24, 0x04	; 4
 250:	81 83       	std	Z+1, r24	; 0x01
	framePos ++;
	for (int i = 0;i<8;i++)
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
	{
		uint8_t bitState = (input >> i)&1;
		sendFrame[framePos] = bitState;
 256:	a6 2f       	mov	r26, r22
 258:	b0 e0       	ldi	r27, 0x00	; 0
		framePos ++;
		sendFrame[framePos] = 4;
 25a:	44 e0       	ldi	r20, 0x04	; 4
	sendFrame[framePos] = 4;
	framePos ++;
	for (int i = 0;i<8;i++)
	{
		uint8_t bitState = (input >> i)&1;
		sendFrame[framePos] = bitState;
 25c:	9d 01       	movw	r18, r26
 25e:	08 2e       	mov	r0, r24
 260:	02 c0       	rjmp	.+4      	; 0x266 <_ZN2IR8TransmitEc+0x20>
 262:	35 95       	asr	r19
 264:	27 95       	ror	r18
 266:	0a 94       	dec	r0
 268:	e2 f7       	brpl	.-8      	; 0x262 <_ZN2IR8TransmitEc+0x1c>
 26a:	21 70       	andi	r18, 0x01	; 1
 26c:	22 83       	std	Z+2, r18	; 0x02
		framePos ++;
		sendFrame[framePos] = 4;
 26e:	43 83       	std	Z+3, r20	; 0x03
void IR::Transmit(char input){
	sendFrame[0] = 2;
	uint8_t framePos = 1;
	sendFrame[framePos] = 4;
	framePos ++;
	for (int i = 0;i<8;i++)
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	32 96       	adiw	r30, 0x02	; 2
 274:	88 30       	cpi	r24, 0x08	; 8
 276:	91 05       	cpc	r25, r1
 278:	89 f7       	brne	.-30     	; 0x25c <_ZN2IR8TransmitEc+0x16>
		sendFrame[framePos] = 4;
		framePos ++;
		
	}
	uint8_t parity = (input & 1);
	sendFrame[framePos] = parity;
 27a:	e5 e7       	ldi	r30, 0x75	; 117
 27c:	f1 e0       	ldi	r31, 0x01	; 1
 27e:	61 70       	andi	r22, 0x01	; 1
 280:	62 8b       	std	Z+18, r22	; 0x12
	framePos ++;
	sendFrame[framePos] = 4;
 282:	84 e0       	ldi	r24, 0x04	; 4
 284:	83 8b       	std	Z+19, r24	; 0x13
	framePos ++;
	sendFrame[framePos] = 3;
 286:	93 e0       	ldi	r25, 0x03	; 3
 288:	94 8b       	std	Z+20, r25	; 0x14
	framePos ++;
	sendFrame[framePos] = 4;
 28a:	85 8b       	std	Z+21, r24	; 0x15
	framePos ++;
	sendFrame[framePos] = 0;
 28c:	16 8a       	std	Z+22, r1	; 0x16
	newFrame = 1;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <newFrame+0x1>
 296:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <newFrame>
 29a:	08 95       	ret

0000029c <_Z6decodev>:
	
}
void decode(){
 29c:	6f 92       	push	r6
 29e:	7f 92       	push	r7
 2a0:	8f 92       	push	r8
 2a2:	9f 92       	push	r9
 2a4:	af 92       	push	r10
 2a6:	bf 92       	push	r11
 2a8:	cf 92       	push	r12
 2aa:	df 92       	push	r13
 2ac:	ef 92       	push	r14
 2ae:	ff 92       	push	r15
 2b0:	0f 93       	push	r16
 2b2:	1f 93       	push	r17
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
	
	for (int i = 0;i<11;i++)
	{
		int pulsTime = decodeFrame[i];
		if (pulsTime <= (recievelookup[0]+devPos) && pulsTime >= (recievelookup[0]-devNeg))
 2b8:	87 e6       	ldi	r24, 0x67	; 103
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	dc 01       	movw	r26, r24
 2be:	6d 91       	ld	r22, X+
 2c0:	7c 91       	ld	r23, X
 2c2:	11 97       	sbiw	r26, 0x01	; 1
 2c4:	ab 01       	movw	r20, r22
 2c6:	4b 5f       	subi	r20, 0xFB	; 251
 2c8:	5f 4f       	sbci	r21, 0xFF	; 255
 2ca:	65 50       	subi	r22, 0x05	; 5
 2cc:	71 09       	sbc	r23, r1
		{
			frameBuffer[i] = 0;
		}
		else if (pulsTime <= (recievelookup[1]+devPos) && pulsTime >= (recievelookup[1]-devNeg))
 2ce:	12 96       	adiw	r26, 0x02	; 2
 2d0:	0d 90       	ld	r0, X+
 2d2:	bc 91       	ld	r27, X
 2d4:	a0 2d       	mov	r26, r0
 2d6:	fd 01       	movw	r30, r26
 2d8:	35 96       	adiw	r30, 0x05	; 5
 2da:	3d 01       	movw	r6, r26
 2dc:	25 e0       	ldi	r18, 0x05	; 5
 2de:	62 1a       	sub	r6, r18
 2e0:	71 08       	sbc	r7, r1
		{
			frameBuffer[i] = 1;
		}
		else if (pulsTime <= (recievelookup[2]+devPos) && pulsTime >= (recievelookup[2]-devNeg))
 2e2:	dc 01       	movw	r26, r24
 2e4:	14 96       	adiw	r26, 0x04	; 4
 2e6:	0d 91       	ld	r16, X+
 2e8:	1c 91       	ld	r17, X
 2ea:	15 97       	sbiw	r26, 0x05	; 5
 2ec:	e8 01       	movw	r28, r16
 2ee:	25 96       	adiw	r28, 0x05	; 5
 2f0:	05 50       	subi	r16, 0x05	; 5
 2f2:	11 09       	sbc	r17, r1
		{
			frameBuffer[i] = 2;
		}
		else if (pulsTime <= (recievelookup[3]+devPos) && pulsTime >= (recievelookup[3]-devNeg))
 2f4:	16 96       	adiw	r26, 0x06	; 6
 2f6:	ed 90       	ld	r14, X+
 2f8:	fc 90       	ld	r15, X
 2fa:	17 97       	sbiw	r26, 0x07	; 7
 2fc:	67 01       	movw	r12, r14
 2fe:	b5 e0       	ldi	r27, 0x05	; 5
 300:	cb 0e       	add	r12, r27
 302:	d1 1c       	adc	r13, r1
 304:	25 e0       	ldi	r18, 0x05	; 5
 306:	e2 1a       	sub	r14, r18
 308:	f1 08       	sbc	r15, r1
	newFrame = 1;
	
}
void decode(){
	
	for (int i = 0;i<11;i++)
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	30 e0       	ldi	r19, 0x00	; 0
		{
			frameBuffer[i] = 3;
		}
		else
		{
			frameBuffer[i] = 4;
 30e:	68 94       	set
 310:	bb 24       	eor	r11, r11
 312:	b2 f8       	bld	r11, 2
		{
			frameBuffer[i] = 2;
		}
		else if (pulsTime <= (recievelookup[3]+devPos) && pulsTime >= (recievelookup[3]-devNeg))
		{
			frameBuffer[i] = 3;
 314:	0f 2e       	mov	r0, r31
 316:	f3 e0       	ldi	r31, 0x03	; 3
 318:	8f 2e       	mov	r8, r31
 31a:	f0 2d       	mov	r31, r0
		{
			frameBuffer[i] = 1;
		}
		else if (pulsTime <= (recievelookup[2]+devPos) && pulsTime >= (recievelookup[2]-devNeg))
		{
			frameBuffer[i] = 2;
 31c:	68 94       	set
 31e:	99 24       	eor	r9, r9
 320:	91 f8       	bld	r9, 1
		{
			frameBuffer[i] = 0;
		}
		else if (pulsTime <= (recievelookup[1]+devPos) && pulsTime >= (recievelookup[1]-devNeg))
		{
			frameBuffer[i] = 1;
 322:	aa 24       	eor	r10, r10
 324:	a3 94       	inc	r10
}
void decode(){
	
	for (int i = 0;i<11;i++)
	{
		int pulsTime = decodeFrame[i];
 326:	c9 01       	movw	r24, r18
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	dc 01       	movw	r26, r24
 32e:	a4 5e       	subi	r26, 0xE4	; 228
 330:	be 4f       	sbci	r27, 0xFE	; 254
 332:	8d 91       	ld	r24, X+
 334:	9c 91       	ld	r25, X
		if (pulsTime <= (recievelookup[0]+devPos) && pulsTime >= (recievelookup[0]-devNeg))
 336:	48 17       	cp	r20, r24
 338:	59 07       	cpc	r21, r25
 33a:	4c f0       	brlt	.+18     	; 0x34e <_Z6decodev+0xb2>
 33c:	86 17       	cp	r24, r22
 33e:	97 07       	cpc	r25, r23
 340:	34 f0       	brlt	.+12     	; 0x34e <_Z6decodev+0xb2>
		{
			frameBuffer[i] = 0;
 342:	c9 01       	movw	r24, r18
 344:	84 5b       	subi	r24, 0xB4	; 180
 346:	9e 4f       	sbci	r25, 0xFE	; 254
 348:	dc 01       	movw	r26, r24
 34a:	1c 92       	st	X, r1
 34c:	29 c0       	rjmp	.+82     	; 0x3a0 <_Z6decodev+0x104>
		}
		else if (pulsTime <= (recievelookup[1]+devPos) && pulsTime >= (recievelookup[1]-devNeg))
 34e:	e8 17       	cp	r30, r24
 350:	f9 07       	cpc	r31, r25
 352:	4c f0       	brlt	.+18     	; 0x366 <_Z6decodev+0xca>
 354:	86 15       	cp	r24, r6
 356:	97 05       	cpc	r25, r7
 358:	34 f0       	brlt	.+12     	; 0x366 <_Z6decodev+0xca>
		{
			frameBuffer[i] = 1;
 35a:	c9 01       	movw	r24, r18
 35c:	84 5b       	subi	r24, 0xB4	; 180
 35e:	9e 4f       	sbci	r25, 0xFE	; 254
 360:	dc 01       	movw	r26, r24
 362:	ac 92       	st	X, r10
 364:	1d c0       	rjmp	.+58     	; 0x3a0 <_Z6decodev+0x104>
		}
		else if (pulsTime <= (recievelookup[2]+devPos) && pulsTime >= (recievelookup[2]-devNeg))
 366:	c8 17       	cp	r28, r24
 368:	d9 07       	cpc	r29, r25
 36a:	4c f0       	brlt	.+18     	; 0x37e <_Z6decodev+0xe2>
 36c:	80 17       	cp	r24, r16
 36e:	91 07       	cpc	r25, r17
 370:	34 f0       	brlt	.+12     	; 0x37e <_Z6decodev+0xe2>
		{
			frameBuffer[i] = 2;
 372:	c9 01       	movw	r24, r18
 374:	84 5b       	subi	r24, 0xB4	; 180
 376:	9e 4f       	sbci	r25, 0xFE	; 254
 378:	dc 01       	movw	r26, r24
 37a:	9c 92       	st	X, r9
 37c:	11 c0       	rjmp	.+34     	; 0x3a0 <_Z6decodev+0x104>
		}
		else if (pulsTime <= (recievelookup[3]+devPos) && pulsTime >= (recievelookup[3]-devNeg))
 37e:	c8 16       	cp	r12, r24
 380:	d9 06       	cpc	r13, r25
 382:	4c f0       	brlt	.+18     	; 0x396 <_Z6decodev+0xfa>
 384:	8e 15       	cp	r24, r14
 386:	9f 05       	cpc	r25, r15
 388:	34 f0       	brlt	.+12     	; 0x396 <_Z6decodev+0xfa>
		{
			frameBuffer[i] = 3;
 38a:	c9 01       	movw	r24, r18
 38c:	84 5b       	subi	r24, 0xB4	; 180
 38e:	9e 4f       	sbci	r25, 0xFE	; 254
 390:	dc 01       	movw	r26, r24
 392:	8c 92       	st	X, r8
 394:	05 c0       	rjmp	.+10     	; 0x3a0 <_Z6decodev+0x104>
		}
		else
		{
			frameBuffer[i] = 4;
 396:	c9 01       	movw	r24, r18
 398:	84 5b       	subi	r24, 0xB4	; 180
 39a:	9e 4f       	sbci	r25, 0xFE	; 254
 39c:	dc 01       	movw	r26, r24
 39e:	bc 92       	st	X, r11
	newFrame = 1;
	
}
void decode(){
	
	for (int i = 0;i<11;i++)
 3a0:	2f 5f       	subi	r18, 0xFF	; 255
 3a2:	3f 4f       	sbci	r19, 0xFF	; 255
 3a4:	2b 30       	cpi	r18, 0x0B	; 11
 3a6:	31 05       	cpc	r19, r1
 3a8:	09 f0       	breq	.+2      	; 0x3ac <_Z6decodev+0x110>
 3aa:	bd cf       	rjmp	.-134    	; 0x326 <_Z6decodev+0x8a>
		{
			frameBuffer[i] = 4;
		}
		
	}
	irAvaliable = 1;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <irAvaliable>
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	ff 90       	pop	r15
 3bc:	ef 90       	pop	r14
 3be:	df 90       	pop	r13
 3c0:	cf 90       	pop	r12
 3c2:	bf 90       	pop	r11
 3c4:	af 90       	pop	r10
 3c6:	9f 90       	pop	r9
 3c8:	8f 90       	pop	r8
 3ca:	7f 90       	pop	r7
 3cc:	6f 90       	pop	r6
 3ce:	08 95       	ret

000003d0 <__vector_8>:

ISR(TIMER2_COMPB_vect){
 3d0:	1f 92       	push	r1
 3d2:	0f 92       	push	r0
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	0f 92       	push	r0
 3d8:	11 24       	eor	r1, r1
 3da:	cf 92       	push	r12
 3dc:	df 92       	push	r13
 3de:	ef 92       	push	r14
 3e0:	ff 92       	push	r15
 3e2:	2f 93       	push	r18
 3e4:	4f 93       	push	r20
 3e6:	5f 93       	push	r21
 3e8:	6f 93       	push	r22
 3ea:	7f 93       	push	r23
 3ec:	8f 93       	push	r24
 3ee:	9f 93       	push	r25
 3f0:	af 93       	push	r26
 3f2:	bf 93       	push	r27
 3f4:	ef 93       	push	r30
 3f6:	ff 93       	push	r31
	TCNT2 = 0;
 3f8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	IR_ticks ++;
 3fc:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <IR_ticks>
 400:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <IR_ticks+0x1>
 404:	a0 91 65 01 	lds	r26, 0x0165	; 0x800165 <IR_ticks+0x2>
 408:	b0 91 66 01 	lds	r27, 0x0166	; 0x800166 <IR_ticks+0x3>
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	a1 1d       	adc	r26, r1
 410:	b1 1d       	adc	r27, r1
 412:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <IR_ticks>
 416:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <IR_ticks+0x1>
 41a:	a0 93 65 01 	sts	0x0165, r26	; 0x800165 <IR_ticks+0x2>
 41e:	b0 93 66 01 	sts	0x0166, r27	; 0x800166 <IR_ticks+0x3>
	if (newFrame)
 422:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <newFrame>
 426:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <newFrame+0x1>
 42a:	89 2b       	or	r24, r25
 42c:	39 f1       	breq	.+78     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	{
		IR_ticks = 0;
 42e:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <IR_ticks>
 432:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <IR_ticks+0x1>
 436:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <IR_ticks+0x2>
 43a:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <IR_ticks+0x3>
		newFrame = 0;
 43e:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <newFrame+0x1>
 442:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <newFrame>
		sendingFrame = 1;
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <sendingFrame+0x1>
 44e:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <sendingFrame>
		last_IR_ticks = IR_ticks;
 452:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <IR_ticks>
 456:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <IR_ticks+0x1>
 45a:	a0 91 65 01 	lds	r26, 0x0165	; 0x800165 <IR_ticks+0x2>
 45e:	b0 91 66 01 	lds	r27, 0x0166	; 0x800166 <IR_ticks+0x3>
 462:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <last_IR_ticks>
 466:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <last_IR_ticks+0x1>
 46a:	a0 93 61 01 	sts	0x0161, r26	; 0x800161 <last_IR_ticks+0x2>
 46e:	b0 93 62 01 	sts	0x0162, r27	; 0x800162 <last_IR_ticks+0x3>
		TCCR2A |= (1 << COM2B0);
 472:	e0 eb       	ldi	r30, 0xB0	; 176
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	80 61       	ori	r24, 0x10	; 16
 47a:	80 83       	st	Z, r24
		
	}
	if (sendingFrame)
 47c:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <sendingFrame>
 480:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <sendingFrame+0x1>
 484:	89 2b       	or	r24, r25
 486:	09 f4       	brne	.+2      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 488:	65 c0       	rjmp	.+202    	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
	{
		if (IR_ticks >= last_IR_ticks + sendTimes[sendFrame[sendIndex]])
 48a:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <sendIndex>
 48e:	f0 91 74 01 	lds	r31, 0x0174	; 0x800174 <sendIndex+0x1>
 492:	eb 58       	subi	r30, 0x8B	; 139
 494:	fe 4f       	sbci	r31, 0xFE	; 254
 496:	20 81       	ld	r18, Z
 498:	40 91 5f 01 	lds	r20, 0x015F	; 0x80015f <last_IR_ticks>
 49c:	50 91 60 01 	lds	r21, 0x0160	; 0x800160 <last_IR_ticks+0x1>
 4a0:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <last_IR_ticks+0x2>
 4a4:	70 91 62 01 	lds	r23, 0x0162	; 0x800162 <last_IR_ticks+0x3>
 4a8:	c0 90 63 01 	lds	r12, 0x0163	; 0x800163 <IR_ticks>
 4ac:	d0 90 64 01 	lds	r13, 0x0164	; 0x800164 <IR_ticks+0x1>
 4b0:	e0 90 65 01 	lds	r14, 0x0165	; 0x800165 <IR_ticks+0x2>
 4b4:	f0 90 66 01 	lds	r15, 0x0166	; 0x800166 <IR_ticks+0x3>
 4b8:	e2 2f       	mov	r30, r18
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	ee 0f       	add	r30, r30
 4be:	ff 1f       	adc	r31, r31
 4c0:	ee 5e       	subi	r30, 0xEE	; 238
 4c2:	fe 4f       	sbci	r31, 0xFE	; 254
 4c4:	80 81       	ld	r24, Z
 4c6:	91 81       	ldd	r25, Z+1	; 0x01
 4c8:	09 2e       	mov	r0, r25
 4ca:	00 0c       	add	r0, r0
 4cc:	aa 0b       	sbc	r26, r26
 4ce:	bb 0b       	sbc	r27, r27
 4d0:	84 0f       	add	r24, r20
 4d2:	95 1f       	adc	r25, r21
 4d4:	a6 1f       	adc	r26, r22
 4d6:	b7 1f       	adc	r27, r23
 4d8:	c8 16       	cp	r12, r24
 4da:	d9 06       	cpc	r13, r25
 4dc:	ea 06       	cpc	r14, r26
 4de:	fb 06       	cpc	r15, r27
 4e0:	30 f1       	brcs	.+76     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
		{
			if (sendFrame[sendIndex] == 4)//detect if it is a divider
 4e2:	24 30       	cpi	r18, 0x04	; 4
 4e4:	31 f4       	brne	.+12     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
			{
				TCCR2A |= (1 << COM2B0);
 4e6:	e0 eb       	ldi	r30, 0xB0	; 176
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	80 61       	ori	r24, 0x10	; 16
 4ee:	80 83       	st	Z, r24
 4f0:	05 c0       	rjmp	.+10     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			}
			else{
				TCCR2A &= ~(1 << COM2B0);
 4f2:	e0 eb       	ldi	r30, 0xB0	; 176
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	8f 7e       	andi	r24, 0xEF	; 239
 4fa:	80 83       	st	Z, r24
				
			}
			
			sendIndex++;
 4fc:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <sendIndex>
 500:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <sendIndex+0x1>
 504:	01 96       	adiw	r24, 0x01	; 1
 506:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <sendIndex+0x1>
 50a:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <sendIndex>
			last_IR_ticks = IR_ticks;
 50e:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <IR_ticks>
 512:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <IR_ticks+0x1>
 516:	a0 91 65 01 	lds	r26, 0x0165	; 0x800165 <IR_ticks+0x2>
 51a:	b0 91 66 01 	lds	r27, 0x0166	; 0x800166 <IR_ticks+0x3>
 51e:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <last_IR_ticks>
 522:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <last_IR_ticks+0x1>
 526:	a0 93 61 01 	sts	0x0161, r26	; 0x800161 <last_IR_ticks+0x2>
 52a:	b0 93 62 01 	sts	0x0162, r27	; 0x800162 <last_IR_ticks+0x3>
		}
		if (sendIndex >= 23)
 52e:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <sendIndex>
 532:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <sendIndex+0x1>
 536:	47 97       	sbiw	r24, 0x17	; 23
 538:	6c f0       	brlt	.+26     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
		{
			sendIndex = 0;
 53a:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <sendIndex+0x1>
 53e:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <sendIndex>
			sendingFrame = 0;
 542:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <sendingFrame+0x1>
 546:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <sendingFrame>
			TCCR2A &= ~(1 << COM2B0);
 54a:	e0 eb       	ldi	r30, 0xB0	; 176
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	80 81       	ld	r24, Z
 550:	8f 7e       	andi	r24, 0xEF	; 239
 552:	80 83       	st	Z, r24
		}
	}
	
	
}
 554:	ff 91       	pop	r31
 556:	ef 91       	pop	r30
 558:	bf 91       	pop	r27
 55a:	af 91       	pop	r26
 55c:	9f 91       	pop	r25
 55e:	8f 91       	pop	r24
 560:	7f 91       	pop	r23
 562:	6f 91       	pop	r22
 564:	5f 91       	pop	r21
 566:	4f 91       	pop	r20
 568:	2f 91       	pop	r18
 56a:	ff 90       	pop	r15
 56c:	ef 90       	pop	r14
 56e:	df 90       	pop	r13
 570:	cf 90       	pop	r12
 572:	0f 90       	pop	r0
 574:	0f be       	out	0x3f, r0	; 63
 576:	0f 90       	pop	r0
 578:	1f 90       	pop	r1
 57a:	18 95       	reti

0000057c <__vector_1>:

ISR(INT0_vect){
 57c:	1f 92       	push	r1
 57e:	0f 92       	push	r0
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	0f 92       	push	r0
 584:	11 24       	eor	r1, r1
 586:	2f 93       	push	r18
 588:	3f 93       	push	r19
 58a:	4f 93       	push	r20
 58c:	5f 93       	push	r21
 58e:	6f 93       	push	r22
 590:	7f 93       	push	r23
 592:	8f 93       	push	r24
 594:	9f 93       	push	r25
 596:	af 93       	push	r26
 598:	bf 93       	push	r27
 59a:	ef 93       	push	r30
 59c:	ff 93       	push	r31
	pulseEnd = IR_ticks;
 59e:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <IR_ticks>
 5a2:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <IR_ticks+0x1>
 5a6:	a0 91 65 01 	lds	r26, 0x0165	; 0x800165 <IR_ticks+0x2>
 5aa:	b0 91 66 01 	lds	r27, 0x0166	; 0x800166 <IR_ticks+0x3>
 5ae:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <pulseEnd>
 5b2:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <pulseEnd+0x1>
 5b6:	a0 93 59 01 	sts	0x0159, r26	; 0x800159 <pulseEnd+0x2>
 5ba:	b0 93 5a 01 	sts	0x015A, r27	; 0x80015a <pulseEnd+0x3>
	int pulsTime = pulseEnd-pulseBegin;
 5be:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <pulseEnd>
 5c2:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <pulseEnd+0x1>
 5c6:	a0 91 59 01 	lds	r26, 0x0159	; 0x800159 <pulseEnd+0x2>
 5ca:	b0 91 5a 01 	lds	r27, 0x015A	; 0x80015a <pulseEnd+0x3>
 5ce:	40 91 5b 01 	lds	r20, 0x015B	; 0x80015b <pulseBegin>
 5d2:	50 91 5c 01 	lds	r21, 0x015C	; 0x80015c <pulseBegin+0x1>
 5d6:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <pulseBegin+0x2>
 5da:	70 91 5e 01 	lds	r23, 0x015E	; 0x80015e <pulseBegin+0x3>
 5de:	84 1b       	sub	r24, r20
 5e0:	95 0b       	sbc	r25, r21
	pulseBegin = pulseEnd;
 5e2:	40 91 57 01 	lds	r20, 0x0157	; 0x800157 <pulseEnd>
 5e6:	50 91 58 01 	lds	r21, 0x0158	; 0x800158 <pulseEnd+0x1>
 5ea:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <pulseEnd+0x2>
 5ee:	70 91 5a 01 	lds	r23, 0x015A	; 0x80015a <pulseEnd+0x3>
 5f2:	40 93 5b 01 	sts	0x015B, r20	; 0x80015b <pulseBegin>
 5f6:	50 93 5c 01 	sts	0x015C, r21	; 0x80015c <pulseBegin+0x1>
 5fa:	60 93 5d 01 	sts	0x015D, r22	; 0x80015d <pulseBegin+0x2>
 5fe:	70 93 5e 01 	sts	0x015E, r23	; 0x80015e <pulseBegin+0x3>
	
	//raw code
	if (pulsTime < 95&&pulsTime > 0)
 602:	9c 01       	movw	r18, r24
 604:	21 50       	subi	r18, 0x01	; 1
 606:	31 09       	sbc	r19, r1
 608:	2e 35       	cpi	r18, 0x5E	; 94
 60a:	31 05       	cpc	r19, r1
 60c:	a0 f4       	brcc	.+40     	; 0x636 <__vector_1+0xba>
	{
		rawFrame[rawindex] = pulsTime;
 60e:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <rawindex>
 612:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <rawindex+0x1>
 616:	ee 0f       	add	r30, r30
 618:	ff 1f       	adc	r31, r31
 61a:	eb 5c       	subi	r30, 0xCB	; 203
 61c:	fe 4f       	sbci	r31, 0xFE	; 254
 61e:	91 83       	std	Z+1, r25	; 0x01
 620:	80 83       	st	Z, r24
		rawindex++;
 622:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <rawindex>
 626:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <rawindex+0x1>
 62a:	01 96       	adiw	r24, 0x01	; 1
 62c:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <rawindex+0x1>
 630:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <rawindex>
 634:	2d c0       	rjmp	.+90     	; 0x690 <__vector_1+0x114>
		
		
		
	}
	else if (pulsTime < 200 && pulsTime > 95)
 636:	9c 01       	movw	r18, r24
 638:	20 56       	subi	r18, 0x60	; 96
 63a:	31 09       	sbc	r19, r1
 63c:	28 36       	cpi	r18, 0x68	; 104
 63e:	31 05       	cpc	r19, r1
 640:	38 f5       	brcc	.+78     	; 0x690 <__vector_1+0x114>
	{
		rawFrame[rawindex] = pulsTime;
 642:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <rawindex>
 646:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <rawindex+0x1>
 64a:	ee 0f       	add	r30, r30
 64c:	ff 1f       	adc	r31, r31
 64e:	eb 5c       	subi	r30, 0xCB	; 203
 650:	fe 4f       	sbci	r31, 0xFE	; 254
 652:	91 83       	std	Z+1, r25	; 0x01
 654:	80 83       	st	Z, r24
		rawindex = 0;
 656:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <rawindex+0x1>
 65a:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <rawindex>
		rawNew = 1;
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <rawNew>
		for (int i = 0;i<11;i++)
 664:	20 e0       	ldi	r18, 0x00	; 0
 666:	30 e0       	ldi	r19, 0x00	; 0
		{
			decodeFrame[i] = rawFrame[i];
 668:	c9 01       	movw	r24, r18
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	fc 01       	movw	r30, r24
 670:	eb 5c       	subi	r30, 0xCB	; 203
 672:	fe 4f       	sbci	r31, 0xFE	; 254
 674:	40 81       	ld	r20, Z
 676:	51 81       	ldd	r21, Z+1	; 0x01
 678:	fc 01       	movw	r30, r24
 67a:	e4 5e       	subi	r30, 0xE4	; 228
 67c:	fe 4f       	sbci	r31, 0xFE	; 254
 67e:	51 83       	std	Z+1, r21	; 0x01
 680:	40 83       	st	Z, r20
	else if (pulsTime < 200 && pulsTime > 95)
	{
		rawFrame[rawindex] = pulsTime;
		rawindex = 0;
		rawNew = 1;
		for (int i = 0;i<11;i++)
 682:	2f 5f       	subi	r18, 0xFF	; 255
 684:	3f 4f       	sbci	r19, 0xFF	; 255
 686:	2b 30       	cpi	r18, 0x0B	; 11
 688:	31 05       	cpc	r19, r1
 68a:	71 f7       	brne	.-36     	; 0x668 <__vector_1+0xec>
		{
			decodeFrame[i] = rawFrame[i];
		}
		decode();
 68c:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z6decodev>
	}
	
	
	
	
 690:	ff 91       	pop	r31
 692:	ef 91       	pop	r30
 694:	bf 91       	pop	r27
 696:	af 91       	pop	r26
 698:	9f 91       	pop	r25
 69a:	8f 91       	pop	r24
 69c:	7f 91       	pop	r23
 69e:	6f 91       	pop	r22
 6a0:	5f 91       	pop	r21
 6a2:	4f 91       	pop	r20
 6a4:	3f 91       	pop	r19
 6a6:	2f 91       	pop	r18
 6a8:	0f 90       	pop	r0
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	0f 90       	pop	r0
 6ae:	1f 90       	pop	r1
 6b0:	18 95       	reti

000006b2 <main>:
bool sending = 1;
char message[] = "hello infrared!\n";

int main(void)
{
	Serial.Init(F_CPU,9600);
 6b2:	00 e8       	ldi	r16, 0x80	; 128
 6b4:	15 e2       	ldi	r17, 0x25	; 37
 6b6:	20 e0       	ldi	r18, 0x00	; 0
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	40 e0       	ldi	r20, 0x00	; 0
 6bc:	54 e2       	ldi	r21, 0x24	; 36
 6be:	64 ef       	ldi	r22, 0xF4	; 244
 6c0:	70 e0       	ldi	r23, 0x00	; 0
 6c2:	8d e8       	ldi	r24, 0x8D	; 141
 6c4:	91 e0       	ldi	r25, 0x01	; 1
 6c6:	0e 94 a7 03 	call	0x74e	; 0x74e <_ZN4UART4InitEmm>
	ir.Init(38,38);
 6ca:	46 e2       	ldi	r20, 0x26	; 38
 6cc:	50 e0       	ldi	r21, 0x00	; 0
 6ce:	66 e2       	ldi	r22, 0x26	; 38
 6d0:	70 e0       	ldi	r23, 0x00	; 0
 6d2:	8c e8       	ldi	r24, 0x8C	; 140
 6d4:	91 e0       	ldi	r25, 0x01	; 1
 6d6:	0e 94 60 00 	call	0xc0	; 0xc0 <_ZN2IR4InitEii>
 6da:	01 e1       	ldi	r16, 0x11	; 17
 6dc:	11 e0       	ldi	r17, 0x01	; 1
    /* Replace with your application code */
    while (1) 
    {
		if (sending)
 6de:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <sending>
 6e2:	88 23       	and	r24, r24
 6e4:	d1 f0       	breq	.+52     	; 0x71a <main+0x68>
 6e6:	c0 e0       	ldi	r28, 0x00	; 0
 6e8:	d1 e0       	ldi	r29, 0x01	; 1
		{
			for (uint8_t i = 0;i < sizeof(message);i++)
			{
				ir.Transmit(message[i]);
 6ea:	69 91       	ld	r22, Y+
 6ec:	8c e8       	ldi	r24, 0x8C	; 140
 6ee:	91 e0       	ldi	r25, 0x01	; 1
 6f0:	0e 94 23 01 	call	0x246	; 0x246 <_ZN2IR8TransmitEc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6f4:	8f e3       	ldi	r24, 0x3F	; 63
 6f6:	9c e9       	ldi	r25, 0x9C	; 156
 6f8:	01 97       	sbiw	r24, 0x01	; 1
 6fa:	f1 f7       	brne	.-4      	; 0x6f8 <main+0x46>
 6fc:	00 c0       	rjmp	.+0      	; 0x6fe <main+0x4c>
 6fe:	00 00       	nop
    /* Replace with your application code */
    while (1) 
    {
		if (sending)
		{
			for (uint8_t i = 0;i < sizeof(message);i++)
 700:	c0 17       	cp	r28, r16
 702:	d1 07       	cpc	r29, r17
 704:	91 f7       	brne	.-28     	; 0x6ea <main+0x38>
 706:	9f ef       	ldi	r25, 0xFF	; 255
 708:	29 e6       	ldi	r18, 0x69	; 105
 70a:	88 e1       	ldi	r24, 0x18	; 24
 70c:	91 50       	subi	r25, 0x01	; 1
 70e:	20 40       	sbci	r18, 0x00	; 0
 710:	80 40       	sbci	r24, 0x00	; 0
 712:	e1 f7       	brne	.-8      	; 0x70c <main+0x5a>
 714:	00 c0       	rjmp	.+0      	; 0x716 <main+0x64>
 716:	00 00       	nop
 718:	e2 cf       	rjmp	.-60     	; 0x6de <main+0x2c>
				_delay_ms(10);
			}
			_delay_ms(500);
		}
		else{
			if (ir.Available())
 71a:	8c e8       	ldi	r24, 0x8C	; 140
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	0e 94 20 01 	call	0x240	; 0x240 <_ZN2IR9AvailableEv>
 722:	88 23       	and	r24, r24
 724:	e1 f2       	breq	.-72     	; 0x6de <main+0x2c>
			{
				Serial.Transmit(ir.Recieve());
 726:	8c e8       	ldi	r24, 0x8C	; 140
 728:	91 e0       	ldi	r25, 0x01	; 1
 72a:	0e 94 08 01 	call	0x210	; 0x210 <_ZN2IR7RecieveEv>
 72e:	68 2f       	mov	r22, r24
 730:	8d e8       	ldi	r24, 0x8D	; 141
 732:	91 e0       	ldi	r25, 0x01	; 1
 734:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN4UART8TransmitEh>
 738:	d2 cf       	rjmp	.-92     	; 0x6de <main+0x2c>

0000073a <_GLOBAL__sub_I_Serial>:
#include <util/delay.h>
#include <stdbool.h>
#include "SimpleUart.h"
#include "IRcomm.h"

UART Serial;
 73a:	8d e8       	ldi	r24, 0x8D	; 141
 73c:	91 e0       	ldi	r25, 0x01	; 1
 73e:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN4UARTC1Ev>
IR ir;
 742:	8c e8       	ldi	r24, 0x8C	; 140
 744:	91 e0       	ldi	r25, 0x01	; 1
 746:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZN2IRC1Ev>
 74a:	08 95       	ret

0000074c <_ZN4UARTC1Ev>:
 *  Author: joost
 */ 

#include "SimpleUart.h"

UART::UART(){
 74c:	08 95       	ret

0000074e <_ZN4UART4InitEmm>:
	
}

void UART::Init( unsigned long f_cpu,unsigned long baud)
{
 74e:	0f 93       	push	r16
 750:	1f 93       	push	r17
	/*calculate baud register*/
unsigned int ubrr = f_cpu/16/baud-1;
 752:	cb 01       	movw	r24, r22
 754:	ba 01       	movw	r22, r20
 756:	68 94       	set
 758:	13 f8       	bld	r1, 3
 75a:	96 95       	lsr	r25
 75c:	87 95       	ror	r24
 75e:	77 95       	ror	r23
 760:	67 95       	ror	r22
 762:	16 94       	lsr	r1
 764:	d1 f7       	brne	.-12     	; 0x75a <_ZN4UART4InitEmm+0xc>
 766:	a9 01       	movw	r20, r18
 768:	98 01       	movw	r18, r16
 76a:	0e 94 ce 03 	call	0x79c	; 0x79c <__udivmodsi4>
 76e:	21 50       	subi	r18, 0x01	; 1
 770:	31 09       	sbc	r19, r1
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 772:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
 776:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 77a:	88 e1       	ldi	r24, 0x18	; 24
 77c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (3<<UCSZ00);
 780:	86 e0       	ldi	r24, 0x06	; 6
 782:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
}
 786:	1f 91       	pop	r17
 788:	0f 91       	pop	r16
 78a:	08 95       	ret

0000078c <_ZN4UART8TransmitEh>:
void UART::Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 78c:	e0 ec       	ldi	r30, 0xC0	; 192
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	80 81       	ld	r24, Z
 792:	85 ff       	sbrs	r24, 5
 794:	fd cf       	rjmp	.-6      	; 0x790 <_ZN4UART8TransmitEh+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 796:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 79a:	08 95       	ret

0000079c <__udivmodsi4>:
 79c:	a1 e2       	ldi	r26, 0x21	; 33
 79e:	1a 2e       	mov	r1, r26
 7a0:	aa 1b       	sub	r26, r26
 7a2:	bb 1b       	sub	r27, r27
 7a4:	fd 01       	movw	r30, r26
 7a6:	0d c0       	rjmp	.+26     	; 0x7c2 <__udivmodsi4_ep>

000007a8 <__udivmodsi4_loop>:
 7a8:	aa 1f       	adc	r26, r26
 7aa:	bb 1f       	adc	r27, r27
 7ac:	ee 1f       	adc	r30, r30
 7ae:	ff 1f       	adc	r31, r31
 7b0:	a2 17       	cp	r26, r18
 7b2:	b3 07       	cpc	r27, r19
 7b4:	e4 07       	cpc	r30, r20
 7b6:	f5 07       	cpc	r31, r21
 7b8:	20 f0       	brcs	.+8      	; 0x7c2 <__udivmodsi4_ep>
 7ba:	a2 1b       	sub	r26, r18
 7bc:	b3 0b       	sbc	r27, r19
 7be:	e4 0b       	sbc	r30, r20
 7c0:	f5 0b       	sbc	r31, r21

000007c2 <__udivmodsi4_ep>:
 7c2:	66 1f       	adc	r22, r22
 7c4:	77 1f       	adc	r23, r23
 7c6:	88 1f       	adc	r24, r24
 7c8:	99 1f       	adc	r25, r25
 7ca:	1a 94       	dec	r1
 7cc:	69 f7       	brne	.-38     	; 0x7a8 <__udivmodsi4_loop>
 7ce:	60 95       	com	r22
 7d0:	70 95       	com	r23
 7d2:	80 95       	com	r24
 7d4:	90 95       	com	r25
 7d6:	9b 01       	movw	r18, r22
 7d8:	ac 01       	movw	r20, r24
 7da:	bd 01       	movw	r22, r26
 7dc:	cf 01       	movw	r24, r30
 7de:	08 95       	ret

000007e0 <__tablejump2__>:
 7e0:	ee 0f       	add	r30, r30
 7e2:	ff 1f       	adc	r31, r31
 7e4:	05 90       	lpm	r0, Z+
 7e6:	f4 91       	lpm	r31, Z
 7e8:	e0 2d       	mov	r30, r0
 7ea:	09 94       	ijmp

000007ec <_exit>:
 7ec:	f8 94       	cli

000007ee <__stop_program>:
 7ee:	ff cf       	rjmp	.-2      	; 0x7ee <__stop_program>
