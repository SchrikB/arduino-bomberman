
ir_test_cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000102e  000010c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000102e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  00800118  00800118  000010da  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001138  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c73  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e7e  00000000  00000000  00002f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b74  00000000  00000000  00003d89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000380  00000000  00000000  00004900  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000909  00000000  00000000  00004c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d88  00000000  00000000  00005589  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00006311  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 22 03 	jmp	0x644	; 0x644 <__vector_1>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 46 02 	jmp	0x48c	; 0x48c <__vector_8>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_11>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	75 04       	cpc	r7, r5

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	ee e2       	ldi	r30, 0x2E	; 46
      7e:	f0 e1       	ldi	r31, 0x10	; 16
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	a8 31       	cpi	r26, 0x18	; 24
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	a8 e1       	ldi	r26, 0x18	; 24
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	aa 39       	cpi	r26, 0x9A	; 154
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 25 05 	call	0xa4a	; 0xa4a <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 10 04 	call	0x820	; 0x820 <main>
      b6:	0c 94 15 08 	jmp	0x102a	; 0x102a <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <__vector_11>:
MILLIS millis;

volatile unsigned long timer1_millis;

ISR (TIMER1_COMPA_vect)
{
      be:	1f 92       	push	r1
      c0:	0f 92       	push	r0
      c2:	0f b6       	in	r0, 0x3f	; 63
      c4:	0f 92       	push	r0
      c6:	11 24       	eor	r1, r1
      c8:	8f 93       	push	r24
      ca:	9f 93       	push	r25
      cc:	af 93       	push	r26
      ce:	bf 93       	push	r27
	timer1_millis++;
      d0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
      d4:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
      d8:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <__data_end+0x2>
      dc:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <__data_end+0x3>
      e0:	01 96       	adiw	r24, 0x01	; 1
      e2:	a1 1d       	adc	r26, r1
      e4:	b1 1d       	adc	r27, r1
      e6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
      ea:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
      ee:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__data_end+0x2>
      f2:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__data_end+0x3>
}
      f6:	bf 91       	pop	r27
      f8:	af 91       	pop	r26
      fa:	9f 91       	pop	r25
      fc:	8f 91       	pop	r24
      fe:	0f 90       	pop	r0
     100:	0f be       	out	0x3f, r0	; 63
     102:	0f 90       	pop	r0
     104:	1f 90       	pop	r1
     106:	18 95       	reti

00000108 <_ZN6MILLIS4initEm>:

void MILLIS::init(unsigned long F_CPU){
	unsigned int CTC_MATCH_OVERFLOW = ((F_CPU / 1000) / 8);
     108:	cb 01       	movw	r24, r22
     10a:	ba 01       	movw	r22, r20
     10c:	20 e4       	ldi	r18, 0x40	; 64
     10e:	3f e1       	ldi	r19, 0x1F	; 31
     110:	40 e0       	ldi	r20, 0x00	; 0
     112:	50 e0       	ldi	r21, 0x00	; 0
     114:	0e 94 03 05 	call	0xa06	; 0xa06 <__udivmodsi4>
	// CTC mode, Clock/8
	TCCR1B |= (1 << WGM12) | (1 << CS11);
     118:	e1 e8       	ldi	r30, 0x81	; 129
     11a:	f0 e0       	ldi	r31, 0x00	; 0
     11c:	80 81       	ld	r24, Z
     11e:	8a 60       	ori	r24, 0x0A	; 10
     120:	80 83       	st	Z, r24
	
	// Load the high byte, then the low byte
	// into the output compare
	OCR1AH = (CTC_MATCH_OVERFLOW >> 8);
     122:	83 2f       	mov	r24, r19
     124:	99 27       	eor	r25, r25
     126:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL = CTC_MATCH_OVERFLOW;
     12a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	// Enable the compare match interrupt
	TIMSK1 |= (1 << OCIE1A);
     12e:	ef e6       	ldi	r30, 0x6F	; 111
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	80 81       	ld	r24, Z
     134:	82 60       	ori	r24, 0x02	; 2
     136:	80 83       	st	Z, r24
	

	// Now enable global interrupts
	sei();
     138:	78 94       	sei
     13a:	08 95       	ret

0000013c <_ZN6MILLIS3getEv>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     13c:	f8 94       	cli
{
	unsigned long millis_return;

	// Ensure this cannot be disrupted
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		millis_return = timer1_millis;
     13e:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <__data_end>
     142:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <__data_end+0x1>
     146:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end+0x2>
     14a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     14e:	78 94       	sei
	}
	
	return millis_return;
     150:	08 95       	ret

00000152 <_ZN2IRC1Ev>:
	}
	
}
bool IR::rawAvailable(){
	return rawNew;
}
     152:	08 95       	ret

00000154 <_ZN2IR4InitEii>:
     154:	53 9a       	sbi	0x0a, 3	; 10
     156:	e0 eb       	ldi	r30, 0xB0	; 176
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	80 81       	ld	r24, Z
     15c:	80 61       	ori	r24, 0x10	; 16
     15e:	80 83       	st	Z, r24
     160:	80 81       	ld	r24, Z
     162:	8f 7d       	andi	r24, 0xDF	; 223
     164:	80 83       	st	Z, r24
     166:	80 81       	ld	r24, Z
     168:	8e 7f       	andi	r24, 0xFE	; 254
     16a:	80 83       	st	Z, r24
     16c:	80 81       	ld	r24, Z
     16e:	8d 7f       	andi	r24, 0xFD	; 253
     170:	80 83       	st	Z, r24
     172:	e1 eb       	ldi	r30, 0xB1	; 177
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	80 81       	ld	r24, Z
     178:	87 7f       	andi	r24, 0xF7	; 247
     17a:	80 83       	st	Z, r24
     17c:	80 81       	ld	r24, Z
     17e:	81 60       	ori	r24, 0x01	; 1
     180:	80 83       	st	Z, r24
     182:	80 81       	ld	r24, Z
     184:	8d 7f       	andi	r24, 0xFD	; 253
     186:	80 83       	st	Z, r24
     188:	80 81       	ld	r24, Z
     18a:	8b 7f       	andi	r24, 0xFB	; 251
     18c:	80 83       	st	Z, r24
     18e:	66 32       	cpi	r22, 0x26	; 38
     190:	71 05       	cpc	r23, r1
     192:	99 f4       	brne	.+38     	; 0x1ba <_ZN2IR4InitEii+0x66>
     194:	80 ec       	ldi	r24, 0xC0	; 192
     196:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     19a:	e0 e7       	ldi	r30, 0x70	; 112
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	84 60       	ori	r24, 0x04	; 4
     1a2:	80 83       	st	Z, r24
     1a4:	e9 e6       	ldi	r30, 0x69	; 105
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	82 60       	ori	r24, 0x02	; 2
     1ac:	80 83       	st	Z, r24
     1ae:	e8 9a       	sbi	0x1d, 0	; 29
     1b0:	46 32       	cpi	r20, 0x26	; 38
     1b2:	51 05       	cpc	r21, r1
     1b4:	09 f0       	breq	.+2      	; 0x1b8 <_ZN2IR4InitEii+0x64>
     1b6:	72 c0       	rjmp	.+228    	; 0x29c <_ZN2IR4InitEii+0x148>
     1b8:	08 c0       	rjmp	.+16     	; 0x1ca <_ZN2IR4InitEii+0x76>
     1ba:	68 33       	cpi	r22, 0x38	; 56
     1bc:	71 05       	cpc	r23, r1
     1be:	09 f0       	breq	.+2      	; 0x1c2 <_ZN2IR4InitEii+0x6e>
     1c0:	5e c0       	rjmp	.+188    	; 0x27e <_ZN2IR4InitEii+0x12a>
     1c2:	8d e7       	ldi	r24, 0x7D	; 125
     1c4:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     1c8:	5a c0       	rjmp	.+180    	; 0x27e <_ZN2IR4InitEii+0x12a>
     1ca:	ee e6       	ldi	r30, 0x6E	; 110
     1cc:	f1 e0       	ldi	r31, 0x01	; 1
     1ce:	88 e2       	ldi	r24, 0x28	; 40
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	91 83       	std	Z+1, r25	; 0x01
     1d4:	80 83       	st	Z, r24
     1d6:	8c e3       	ldi	r24, 0x3C	; 60
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	93 83       	std	Z+3, r25	; 0x03
     1dc:	82 83       	std	Z+2, r24	; 0x02
     1de:	8c ea       	ldi	r24, 0xAC	; 172
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	95 83       	std	Z+5, r25	; 0x05
     1e4:	84 83       	std	Z+4, r24	; 0x04
     1e6:	80 e5       	ldi	r24, 0x50	; 80
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	97 83       	std	Z+7, r25	; 0x07
     1ec:	86 83       	std	Z+6, r24	; 0x06
     1ee:	45 c0       	rjmp	.+138    	; 0x27a <_ZN2IR4InitEii+0x126>
     1f0:	68 33       	cpi	r22, 0x38	; 56
     1f2:	71 05       	cpc	r23, r1
     1f4:	09 f0       	breq	.+2      	; 0x1f8 <_ZN2IR4InitEii+0xa4>
     1f6:	41 c0       	rjmp	.+130    	; 0x27a <_ZN2IR4InitEii+0x126>
     1f8:	ee e6       	ldi	r30, 0x6E	; 110
     1fa:	f1 e0       	ldi	r31, 0x01	; 1
     1fc:	87 e3       	ldi	r24, 0x37	; 55
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	91 83       	std	Z+1, r25	; 0x01
     202:	80 83       	st	Z, r24
     204:	82 e5       	ldi	r24, 0x52	; 82
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	93 83       	std	Z+3, r25	; 0x03
     20a:	82 83       	std	Z+2, r24	; 0x02
     20c:	8e ee       	ldi	r24, 0xEE	; 238
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	95 83       	std	Z+5, r25	; 0x05
     212:	84 83       	std	Z+4, r24	; 0x04
     214:	8e e6       	ldi	r24, 0x6E	; 110
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	97 83       	std	Z+7, r25	; 0x07
     21a:	86 83       	std	Z+6, r24	; 0x06
     21c:	2e c0       	rjmp	.+92     	; 0x27a <_ZN2IR4InitEii+0x126>
     21e:	48 33       	cpi	r20, 0x38	; 56
     220:	51 05       	cpc	r21, r1
     222:	59 f5       	brne	.+86     	; 0x27a <_ZN2IR4InitEii+0x126>
     224:	66 32       	cpi	r22, 0x26	; 38
     226:	71 05       	cpc	r23, r1
     228:	99 f4       	brne	.+38     	; 0x250 <_ZN2IR4InitEii+0xfc>
     22a:	ee e6       	ldi	r30, 0x6E	; 110
     22c:	f1 e0       	ldi	r31, 0x01	; 1
     22e:	8e e1       	ldi	r24, 0x1E	; 30
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	91 83       	std	Z+1, r25	; 0x01
     234:	80 83       	st	Z, r24
     236:	8c e2       	ldi	r24, 0x2C	; 44
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	93 83       	std	Z+3, r25	; 0x03
     23c:	82 83       	std	Z+2, r24	; 0x02
     23e:	8f e7       	ldi	r24, 0x7F	; 127
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	95 83       	std	Z+5, r25	; 0x05
     244:	84 83       	std	Z+4, r24	; 0x04
     246:	8c e3       	ldi	r24, 0x3C	; 60
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	97 83       	std	Z+7, r25	; 0x07
     24c:	86 83       	std	Z+6, r24	; 0x06
     24e:	15 c0       	rjmp	.+42     	; 0x27a <_ZN2IR4InitEii+0x126>
     250:	68 33       	cpi	r22, 0x38	; 56
     252:	71 05       	cpc	r23, r1
     254:	91 f4       	brne	.+36     	; 0x27a <_ZN2IR4InitEii+0x126>
     256:	ee e6       	ldi	r30, 0x6E	; 110
     258:	f1 e0       	ldi	r31, 0x01	; 1
     25a:	8a e2       	ldi	r24, 0x2A	; 42
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	91 83       	std	Z+1, r25	; 0x01
     260:	80 83       	st	Z, r24
     262:	8f e3       	ldi	r24, 0x3F	; 63
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	93 83       	std	Z+3, r25	; 0x03
     268:	82 83       	std	Z+2, r24	; 0x02
     26a:	82 eb       	ldi	r24, 0xB2	; 178
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	95 83       	std	Z+5, r25	; 0x05
     270:	84 83       	std	Z+4, r24	; 0x04
     272:	83 e5       	ldi	r24, 0x53	; 83
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	97 83       	std	Z+7, r25	; 0x07
     278:	86 83       	std	Z+6, r24	; 0x06
     27a:	78 94       	sei
     27c:	08 95       	ret
     27e:	e0 e7       	ldi	r30, 0x70	; 112
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	84 60       	ori	r24, 0x04	; 4
     286:	80 83       	st	Z, r24
     288:	e9 e6       	ldi	r30, 0x69	; 105
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	80 81       	ld	r24, Z
     28e:	82 60       	ori	r24, 0x02	; 2
     290:	80 83       	st	Z, r24
     292:	e8 9a       	sbi	0x1d, 0	; 29
     294:	46 32       	cpi	r20, 0x26	; 38
     296:	51 05       	cpc	r21, r1
     298:	11 f6       	brne	.-124    	; 0x21e <_ZN2IR4InitEii+0xca>
     29a:	aa cf       	rjmp	.-172    	; 0x1f0 <_ZN2IR4InitEii+0x9c>
     29c:	48 33       	cpi	r20, 0x38	; 56
     29e:	51 05       	cpc	r21, r1
     2a0:	61 f7       	brne	.-40     	; 0x27a <_ZN2IR4InitEii+0x126>
     2a2:	c3 cf       	rjmp	.-122    	; 0x22a <_ZN2IR4InitEii+0xd6>

000002a4 <_ZN2IR7RecieveEv>:
     2a4:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <recieveByte>
     2a8:	08 95       	ret

000002aa <_ZN2IR9AvailableEv>:
     2aa:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <frameAvailable>
     2ae:	88 23       	and	r24, r24
     2b0:	11 f1       	breq	.+68     	; 0x2f6 <_ZN2IR9AvailableEv+0x4c>
     2b2:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <frameAvailable>
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	60 e0       	ldi	r22, 0x00	; 0
     2bc:	a9 01       	movw	r20, r18
     2be:	4f 5f       	subi	r20, 0xFF	; 255
     2c0:	5f 4f       	sbci	r21, 0xFF	; 255
     2c2:	fa 01       	movw	r30, r20
     2c4:	ee 5a       	subi	r30, 0xAE	; 174
     2c6:	fe 4f       	sbci	r31, 0xFE	; 254
     2c8:	80 81       	ld	r24, Z
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <_ZN2IR9AvailableEv+0x28>
     2ce:	88 0f       	add	r24, r24
     2d0:	99 1f       	adc	r25, r25
     2d2:	2a 95       	dec	r18
     2d4:	e2 f7       	brpl	.-8      	; 0x2ce <_ZN2IR9AvailableEv+0x24>
     2d6:	68 2b       	or	r22, r24
     2d8:	9a 01       	movw	r18, r20
     2da:	48 30       	cpi	r20, 0x08	; 8
     2dc:	51 05       	cpc	r21, r1
     2de:	71 f7       	brne	.-36     	; 0x2bc <_ZN2IR9AvailableEv+0x12>
     2e0:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <frameBuffer+0x9>
     2e4:	96 2f       	mov	r25, r22
     2e6:	91 70       	andi	r25, 0x01	; 1
     2e8:	98 13       	cpse	r25, r24
     2ea:	08 c0       	rjmp	.+16     	; 0x2fc <_ZN2IR9AvailableEv+0x52>
     2ec:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <recieveByte>
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	08 95       	ret
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	08 95       	ret
     2fc:	8f ef       	ldi	r24, 0xFF	; 255
     2fe:	9f ef       	ldi	r25, 0xFF	; 255
     300:	08 95       	ret

00000302 <_ZN2IR8TransmitEc>:
void IR::Transmit(char input){
	sendFrame[0] = 2;
     302:	ec e7       	ldi	r30, 0x7C	; 124
     304:	f1 e0       	ldi	r31, 0x01	; 1
     306:	82 e0       	ldi	r24, 0x02	; 2
     308:	80 83       	st	Z, r24
	uint8_t framePos = 1;
	sendFrame[framePos] = 4;
     30a:	84 e0       	ldi	r24, 0x04	; 4
     30c:	81 83       	std	Z+1, r24	; 0x01
	framePos ++;
	for (int i = 0;i<8;i++)
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	90 e0       	ldi	r25, 0x00	; 0
	{
		uint8_t bitState = (input >> i)&1;
		sendFrame[framePos] = bitState;
     312:	a6 2f       	mov	r26, r22
     314:	b0 e0       	ldi	r27, 0x00	; 0
		framePos ++;
		sendFrame[framePos] = 4;
     316:	44 e0       	ldi	r20, 0x04	; 4
	sendFrame[framePos] = 4;
	framePos ++;
	for (int i = 0;i<8;i++)
	{
		uint8_t bitState = (input >> i)&1;
		sendFrame[framePos] = bitState;
     318:	9d 01       	movw	r18, r26
     31a:	08 2e       	mov	r0, r24
     31c:	02 c0       	rjmp	.+4      	; 0x322 <_ZN2IR8TransmitEc+0x20>
     31e:	35 95       	asr	r19
     320:	27 95       	ror	r18
     322:	0a 94       	dec	r0
     324:	e2 f7       	brpl	.-8      	; 0x31e <_ZN2IR8TransmitEc+0x1c>
     326:	21 70       	andi	r18, 0x01	; 1
     328:	22 83       	std	Z+2, r18	; 0x02
		framePos ++;
		sendFrame[framePos] = 4;
     32a:	43 83       	std	Z+3, r20	; 0x03
void IR::Transmit(char input){
	sendFrame[0] = 2;
	uint8_t framePos = 1;
	sendFrame[framePos] = 4;
	framePos ++;
	for (int i = 0;i<8;i++)
     32c:	01 96       	adiw	r24, 0x01	; 1
     32e:	32 96       	adiw	r30, 0x02	; 2
     330:	88 30       	cpi	r24, 0x08	; 8
     332:	91 05       	cpc	r25, r1
     334:	89 f7       	brne	.-30     	; 0x318 <_ZN2IR8TransmitEc+0x16>
		sendFrame[framePos] = 4;
		framePos ++;
		
	}
	uint8_t parity = (input & 1);
	sendFrame[framePos] = parity;
     336:	ec e7       	ldi	r30, 0x7C	; 124
     338:	f1 e0       	ldi	r31, 0x01	; 1
     33a:	61 70       	andi	r22, 0x01	; 1
     33c:	62 8b       	std	Z+18, r22	; 0x12
	framePos ++;
	sendFrame[framePos] = 4;
     33e:	84 e0       	ldi	r24, 0x04	; 4
     340:	83 8b       	std	Z+19, r24	; 0x13
	framePos ++;
	sendFrame[framePos] = 3;
     342:	93 e0       	ldi	r25, 0x03	; 3
     344:	94 8b       	std	Z+20, r25	; 0x14
	framePos ++;
	sendFrame[framePos] = 4;
     346:	85 8b       	std	Z+21, r24	; 0x15
	framePos ++;
	sendFrame[framePos] = 0;
     348:	16 8a       	std	Z+22, r1	; 0x16
	newFrame = 1;
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <newFrame+0x1>
     352:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <newFrame>
     356:	08 95       	ret

00000358 <_Z6decodev>:
	
}
void decode(){
     358:	6f 92       	push	r6
     35a:	7f 92       	push	r7
     35c:	8f 92       	push	r8
     35e:	9f 92       	push	r9
     360:	af 92       	push	r10
     362:	bf 92       	push	r11
     364:	cf 92       	push	r12
     366:	df 92       	push	r13
     368:	ef 92       	push	r14
     36a:	ff 92       	push	r15
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
	
	for (int i = 0;i<11;i++)
	{
		int pulsTime = decodeFrame[i];
		if (pulsTime <= (recievelookup[0]+devPos) && pulsTime >= (recievelookup[0]-devNeg))
     374:	8e e6       	ldi	r24, 0x6E	; 110
     376:	91 e0       	ldi	r25, 0x01	; 1
     378:	dc 01       	movw	r26, r24
     37a:	6d 91       	ld	r22, X+
     37c:	7c 91       	ld	r23, X
     37e:	11 97       	sbiw	r26, 0x01	; 1
     380:	ab 01       	movw	r20, r22
     382:	4b 5f       	subi	r20, 0xFB	; 251
     384:	5f 4f       	sbci	r21, 0xFF	; 255
     386:	65 50       	subi	r22, 0x05	; 5
     388:	71 09       	sbc	r23, r1
		{
			frameBuffer[i] = 0;
		}
		else if (pulsTime <= (recievelookup[1]+devPos) && pulsTime >= (recievelookup[1]-devNeg))
     38a:	12 96       	adiw	r26, 0x02	; 2
     38c:	0d 90       	ld	r0, X+
     38e:	bc 91       	ld	r27, X
     390:	a0 2d       	mov	r26, r0
     392:	fd 01       	movw	r30, r26
     394:	35 96       	adiw	r30, 0x05	; 5
     396:	3d 01       	movw	r6, r26
     398:	25 e0       	ldi	r18, 0x05	; 5
     39a:	62 1a       	sub	r6, r18
     39c:	71 08       	sbc	r7, r1
		{
			frameBuffer[i] = 1;
		}
		else if (pulsTime <= (recievelookup[2]+devPos) && pulsTime >= (recievelookup[2]-devNeg))
     39e:	dc 01       	movw	r26, r24
     3a0:	14 96       	adiw	r26, 0x04	; 4
     3a2:	0d 91       	ld	r16, X+
     3a4:	1c 91       	ld	r17, X
     3a6:	15 97       	sbiw	r26, 0x05	; 5
     3a8:	e8 01       	movw	r28, r16
     3aa:	25 96       	adiw	r28, 0x05	; 5
     3ac:	05 50       	subi	r16, 0x05	; 5
     3ae:	11 09       	sbc	r17, r1
		{
			frameBuffer[i] = 2;
		}
		else if (pulsTime <= (recievelookup[3]+devPos) && pulsTime >= (recievelookup[3]-devNeg))
     3b0:	16 96       	adiw	r26, 0x06	; 6
     3b2:	ed 90       	ld	r14, X+
     3b4:	fc 90       	ld	r15, X
     3b6:	17 97       	sbiw	r26, 0x07	; 7
     3b8:	67 01       	movw	r12, r14
     3ba:	b5 e0       	ldi	r27, 0x05	; 5
     3bc:	cb 0e       	add	r12, r27
     3be:	d1 1c       	adc	r13, r1
     3c0:	25 e0       	ldi	r18, 0x05	; 5
     3c2:	e2 1a       	sub	r14, r18
     3c4:	f1 08       	sbc	r15, r1
	newFrame = 1;
	
}
void decode(){
	
	for (int i = 0;i<11;i++)
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	30 e0       	ldi	r19, 0x00	; 0
		{
			frameBuffer[i] = 3;
		}
		else
		{
			frameBuffer[i] = 4;
     3ca:	68 94       	set
     3cc:	bb 24       	eor	r11, r11
     3ce:	b2 f8       	bld	r11, 2
		{
			frameBuffer[i] = 2;
		}
		else if (pulsTime <= (recievelookup[3]+devPos) && pulsTime >= (recievelookup[3]-devNeg))
		{
			frameBuffer[i] = 3;
     3d0:	0f 2e       	mov	r0, r31
     3d2:	f3 e0       	ldi	r31, 0x03	; 3
     3d4:	8f 2e       	mov	r8, r31
     3d6:	f0 2d       	mov	r31, r0
		{
			frameBuffer[i] = 1;
		}
		else if (pulsTime <= (recievelookup[2]+devPos) && pulsTime >= (recievelookup[2]-devNeg))
		{
			frameBuffer[i] = 2;
     3d8:	68 94       	set
     3da:	99 24       	eor	r9, r9
     3dc:	91 f8       	bld	r9, 1
		{
			frameBuffer[i] = 0;
		}
		else if (pulsTime <= (recievelookup[1]+devPos) && pulsTime >= (recievelookup[1]-devNeg))
		{
			frameBuffer[i] = 1;
     3de:	aa 24       	eor	r10, r10
     3e0:	a3 94       	inc	r10
}
void decode(){
	
	for (int i = 0;i<11;i++)
	{
		int pulsTime = decodeFrame[i];
     3e2:	c9 01       	movw	r24, r18
     3e4:	88 0f       	add	r24, r24
     3e6:	99 1f       	adc	r25, r25
     3e8:	dc 01       	movw	r26, r24
     3ea:	a3 5e       	subi	r26, 0xE3	; 227
     3ec:	be 4f       	sbci	r27, 0xFE	; 254
     3ee:	8d 91       	ld	r24, X+
     3f0:	9c 91       	ld	r25, X
		if (pulsTime <= (recievelookup[0]+devPos) && pulsTime >= (recievelookup[0]-devNeg))
     3f2:	48 17       	cp	r20, r24
     3f4:	59 07       	cpc	r21, r25
     3f6:	4c f0       	brlt	.+18     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3f8:	86 17       	cp	r24, r22
     3fa:	97 07       	cpc	r25, r23
     3fc:	34 f0       	brlt	.+12     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		{
			frameBuffer[i] = 0;
     3fe:	c9 01       	movw	r24, r18
     400:	8e 5a       	subi	r24, 0xAE	; 174
     402:	9e 4f       	sbci	r25, 0xFE	; 254
     404:	dc 01       	movw	r26, r24
     406:	1c 92       	st	X, r1
     408:	29 c0       	rjmp	.+82     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		}
		else if (pulsTime <= (recievelookup[1]+devPos) && pulsTime >= (recievelookup[1]-devNeg))
     40a:	e8 17       	cp	r30, r24
     40c:	f9 07       	cpc	r31, r25
     40e:	4c f0       	brlt	.+18     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     410:	86 15       	cp	r24, r6
     412:	97 05       	cpc	r25, r7
     414:	34 f0       	brlt	.+12     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		{
			frameBuffer[i] = 1;
     416:	c9 01       	movw	r24, r18
     418:	8e 5a       	subi	r24, 0xAE	; 174
     41a:	9e 4f       	sbci	r25, 0xFE	; 254
     41c:	dc 01       	movw	r26, r24
     41e:	ac 92       	st	X, r10
     420:	1d c0       	rjmp	.+58     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		}
		else if (pulsTime <= (recievelookup[2]+devPos) && pulsTime >= (recievelookup[2]-devNeg))
     422:	c8 17       	cp	r28, r24
     424:	d9 07       	cpc	r29, r25
     426:	4c f0       	brlt	.+18     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     428:	80 17       	cp	r24, r16
     42a:	91 07       	cpc	r25, r17
     42c:	34 f0       	brlt	.+12     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		{
			frameBuffer[i] = 2;
     42e:	c9 01       	movw	r24, r18
     430:	8e 5a       	subi	r24, 0xAE	; 174
     432:	9e 4f       	sbci	r25, 0xFE	; 254
     434:	dc 01       	movw	r26, r24
     436:	9c 92       	st	X, r9
     438:	11 c0       	rjmp	.+34     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		}
		else if (pulsTime <= (recievelookup[3]+devPos) && pulsTime >= (recievelookup[3]-devNeg))
     43a:	c8 16       	cp	r12, r24
     43c:	d9 06       	cpc	r13, r25
     43e:	4c f0       	brlt	.+18     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     440:	8e 15       	cp	r24, r14
     442:	9f 05       	cpc	r25, r15
     444:	34 f0       	brlt	.+12     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		{
			frameBuffer[i] = 3;
     446:	c9 01       	movw	r24, r18
     448:	8e 5a       	subi	r24, 0xAE	; 174
     44a:	9e 4f       	sbci	r25, 0xFE	; 254
     44c:	dc 01       	movw	r26, r24
     44e:	8c 92       	st	X, r8
     450:	05 c0       	rjmp	.+10     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		}
		else
		{
			frameBuffer[i] = 4;
     452:	c9 01       	movw	r24, r18
     454:	8e 5a       	subi	r24, 0xAE	; 174
     456:	9e 4f       	sbci	r25, 0xFE	; 254
     458:	dc 01       	movw	r26, r24
     45a:	bc 92       	st	X, r11
	newFrame = 1;
	
}
void decode(){
	
	for (int i = 0;i<11;i++)
     45c:	2f 5f       	subi	r18, 0xFF	; 255
     45e:	3f 4f       	sbci	r19, 0xFF	; 255
     460:	2b 30       	cpi	r18, 0x0B	; 11
     462:	31 05       	cpc	r19, r1
     464:	09 f0       	breq	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     466:	bd cf       	rjmp	.-134    	; 0x3e2 <_Z6decodev+0x8a>
		{
			frameBuffer[i] = 4;
		}
		
	}
	frameAvailable = 1;
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <frameAvailable>
}
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	1f 91       	pop	r17
     474:	0f 91       	pop	r16
     476:	ff 90       	pop	r15
     478:	ef 90       	pop	r14
     47a:	df 90       	pop	r13
     47c:	cf 90       	pop	r12
     47e:	bf 90       	pop	r11
     480:	af 90       	pop	r10
     482:	9f 90       	pop	r9
     484:	8f 90       	pop	r8
     486:	7f 90       	pop	r7
     488:	6f 90       	pop	r6
     48a:	08 95       	ret

0000048c <__vector_8>:

ISR(TIMER2_COMPB_vect){
     48c:	1f 92       	push	r1
     48e:	0f 92       	push	r0
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	0f 92       	push	r0
     494:	11 24       	eor	r1, r1
     496:	cf 92       	push	r12
     498:	df 92       	push	r13
     49a:	ef 92       	push	r14
     49c:	ff 92       	push	r15
     49e:	2f 93       	push	r18
     4a0:	4f 93       	push	r20
     4a2:	5f 93       	push	r21
     4a4:	6f 93       	push	r22
     4a6:	7f 93       	push	r23
     4a8:	8f 93       	push	r24
     4aa:	9f 93       	push	r25
     4ac:	af 93       	push	r26
     4ae:	bf 93       	push	r27
     4b0:	ef 93       	push	r30
     4b2:	ff 93       	push	r31
	TCNT2 = 0;
     4b4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	IR_ticks ++;
     4b8:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IR_ticks>
     4bc:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <IR_ticks+0x1>
     4c0:	a0 91 6c 01 	lds	r26, 0x016C	; 0x80016c <IR_ticks+0x2>
     4c4:	b0 91 6d 01 	lds	r27, 0x016D	; 0x80016d <IR_ticks+0x3>
     4c8:	01 96       	adiw	r24, 0x01	; 1
     4ca:	a1 1d       	adc	r26, r1
     4cc:	b1 1d       	adc	r27, r1
     4ce:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <IR_ticks>
     4d2:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <IR_ticks+0x1>
     4d6:	a0 93 6c 01 	sts	0x016C, r26	; 0x80016c <IR_ticks+0x2>
     4da:	b0 93 6d 01 	sts	0x016D, r27	; 0x80016d <IR_ticks+0x3>
	if (newFrame)
     4de:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <newFrame>
     4e2:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <newFrame+0x1>
     4e6:	89 2b       	or	r24, r25
     4e8:	39 f1       	breq	.+78     	; 0x538 <__vector_8+0xac>
	{
		IR_ticks = 0;
     4ea:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <IR_ticks>
     4ee:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <IR_ticks+0x1>
     4f2:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <IR_ticks+0x2>
     4f6:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <IR_ticks+0x3>
		newFrame = 0;
     4fa:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <newFrame+0x1>
     4fe:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <newFrame>
		sendingFrame = 1;
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <sendingFrame+0x1>
     50a:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <sendingFrame>
		last_IR_ticks = IR_ticks;
     50e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IR_ticks>
     512:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <IR_ticks+0x1>
     516:	a0 91 6c 01 	lds	r26, 0x016C	; 0x80016c <IR_ticks+0x2>
     51a:	b0 91 6d 01 	lds	r27, 0x016D	; 0x80016d <IR_ticks+0x3>
     51e:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <last_IR_ticks>
     522:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <last_IR_ticks+0x1>
     526:	a0 93 68 01 	sts	0x0168, r26	; 0x800168 <last_IR_ticks+0x2>
     52a:	b0 93 69 01 	sts	0x0169, r27	; 0x800169 <last_IR_ticks+0x3>
		TCCR2A |= (1 << COM2B0);
     52e:	e0 eb       	ldi	r30, 0xB0	; 176
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	80 81       	ld	r24, Z
     534:	80 61       	ori	r24, 0x10	; 16
     536:	80 83       	st	Z, r24
		
	}
	if (sendingFrame)
     538:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <sendingFrame>
     53c:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <sendingFrame+0x1>
     540:	89 2b       	or	r24, r25
     542:	09 f4       	brne	.+2      	; 0x546 <__vector_8+0xba>
     544:	66 c0       	rjmp	.+204    	; 0x612 <__vector_8+0x186>
	{
		if (IR_ticks >= last_IR_ticks + sendTimes[sendFrame[sendIndex]])
     546:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <sendIndex>
     54a:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <sendIndex+0x1>
     54e:	e4 58       	subi	r30, 0x84	; 132
     550:	fe 4f       	sbci	r31, 0xFE	; 254
     552:	20 81       	ld	r18, Z
     554:	40 91 66 01 	lds	r20, 0x0166	; 0x800166 <last_IR_ticks>
     558:	50 91 67 01 	lds	r21, 0x0167	; 0x800167 <last_IR_ticks+0x1>
     55c:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <last_IR_ticks+0x2>
     560:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <last_IR_ticks+0x3>
     564:	c0 90 6a 01 	lds	r12, 0x016A	; 0x80016a <IR_ticks>
     568:	d0 90 6b 01 	lds	r13, 0x016B	; 0x80016b <IR_ticks+0x1>
     56c:	e0 90 6c 01 	lds	r14, 0x016C	; 0x80016c <IR_ticks+0x2>
     570:	f0 90 6d 01 	lds	r15, 0x016D	; 0x80016d <IR_ticks+0x3>
     574:	e2 2f       	mov	r30, r18
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	ee 0f       	add	r30, r30
     57a:	ff 1f       	adc	r31, r31
     57c:	ef 5f       	subi	r30, 0xFF	; 255
     57e:	fe 4f       	sbci	r31, 0xFE	; 254
     580:	80 81       	ld	r24, Z
     582:	91 81       	ldd	r25, Z+1	; 0x01
     584:	09 2e       	mov	r0, r25
     586:	00 0c       	add	r0, r0
     588:	aa 0b       	sbc	r26, r26
     58a:	bb 0b       	sbc	r27, r27
     58c:	84 0f       	add	r24, r20
     58e:	95 1f       	adc	r25, r21
     590:	a6 1f       	adc	r26, r22
     592:	b7 1f       	adc	r27, r23
     594:	c8 16       	cp	r12, r24
     596:	d9 06       	cpc	r13, r25
     598:	ea 06       	cpc	r14, r26
     59a:	fb 06       	cpc	r15, r27
     59c:	30 f1       	brcs	.+76     	; 0x5ea <__vector_8+0x15e>
		{
			if (sendFrame[sendIndex] == 4)//detect if it is a divider
     59e:	24 30       	cpi	r18, 0x04	; 4
     5a0:	31 f4       	brne	.+12     	; 0x5ae <__vector_8+0x122>
			{
				TCCR2A |= (1 << COM2B0);
     5a2:	e0 eb       	ldi	r30, 0xB0	; 176
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	80 81       	ld	r24, Z
     5a8:	80 61       	ori	r24, 0x10	; 16
     5aa:	80 83       	st	Z, r24
     5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <__vector_8+0x12c>
			}
			else{
				TCCR2A &= ~(1 << COM2B0);
     5ae:	e0 eb       	ldi	r30, 0xB0	; 176
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	80 81       	ld	r24, Z
     5b4:	8f 7e       	andi	r24, 0xEF	; 239
     5b6:	80 83       	st	Z, r24
				
			}
			
			sendIndex++;
     5b8:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <sendIndex>
     5bc:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <sendIndex+0x1>
     5c0:	01 96       	adiw	r24, 0x01	; 1
     5c2:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <sendIndex+0x1>
     5c6:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <sendIndex>
			last_IR_ticks = IR_ticks;
     5ca:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IR_ticks>
     5ce:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <IR_ticks+0x1>
     5d2:	a0 91 6c 01 	lds	r26, 0x016C	; 0x80016c <IR_ticks+0x2>
     5d6:	b0 91 6d 01 	lds	r27, 0x016D	; 0x80016d <IR_ticks+0x3>
     5da:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <last_IR_ticks>
     5de:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <last_IR_ticks+0x1>
     5e2:	a0 93 68 01 	sts	0x0168, r26	; 0x800168 <last_IR_ticks+0x2>
     5e6:	b0 93 69 01 	sts	0x0169, r27	; 0x800169 <last_IR_ticks+0x3>
		}
		if (sendIndex >= 23)
     5ea:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <sendIndex>
     5ee:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <sendIndex+0x1>
     5f2:	47 97       	sbiw	r24, 0x17	; 23
     5f4:	9c f0       	brlt	.+38     	; 0x61c <__vector_8+0x190>
		{
			sendIndex = 0;
     5f6:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <sendIndex+0x1>
     5fa:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <sendIndex>
			sendingFrame = 0;
     5fe:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <sendingFrame+0x1>
     602:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <sendingFrame>
			TCCR2A &= ~(1 << COM2B0);
     606:	e0 eb       	ldi	r30, 0xB0	; 176
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	80 81       	ld	r24, Z
     60c:	8f 7e       	andi	r24, 0xEF	; 239
     60e:	80 83       	st	Z, r24
     610:	05 c0       	rjmp	.+10     	; 0x61c <__vector_8+0x190>
		}
	}
	else{
		TCCR2A &= ~(1 << COM2B0);
     612:	e0 eb       	ldi	r30, 0xB0	; 176
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	80 81       	ld	r24, Z
     618:	8f 7e       	andi	r24, 0xEF	; 239
     61a:	80 83       	st	Z, r24
	}
	
	
}
     61c:	ff 91       	pop	r31
     61e:	ef 91       	pop	r30
     620:	bf 91       	pop	r27
     622:	af 91       	pop	r26
     624:	9f 91       	pop	r25
     626:	8f 91       	pop	r24
     628:	7f 91       	pop	r23
     62a:	6f 91       	pop	r22
     62c:	5f 91       	pop	r21
     62e:	4f 91       	pop	r20
     630:	2f 91       	pop	r18
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	df 90       	pop	r13
     638:	cf 90       	pop	r12
     63a:	0f 90       	pop	r0
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	0f 90       	pop	r0
     640:	1f 90       	pop	r1
     642:	18 95       	reti

00000644 <__vector_1>:

ISR(INT0_vect){
     644:	1f 92       	push	r1
     646:	0f 92       	push	r0
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	0f 92       	push	r0
     64c:	11 24       	eor	r1, r1
     64e:	2f 93       	push	r18
     650:	3f 93       	push	r19
     652:	4f 93       	push	r20
     654:	5f 93       	push	r21
     656:	6f 93       	push	r22
     658:	7f 93       	push	r23
     65a:	8f 93       	push	r24
     65c:	9f 93       	push	r25
     65e:	af 93       	push	r26
     660:	bf 93       	push	r27
     662:	ef 93       	push	r30
     664:	ff 93       	push	r31
	pulseEnd = IR_ticks;
     666:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IR_ticks>
     66a:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <IR_ticks+0x1>
     66e:	a0 91 6c 01 	lds	r26, 0x016C	; 0x80016c <IR_ticks+0x2>
     672:	b0 91 6d 01 	lds	r27, 0x016D	; 0x80016d <IR_ticks+0x3>
     676:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <pulseEnd>
     67a:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <pulseEnd+0x1>
     67e:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <pulseEnd+0x2>
     682:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <pulseEnd+0x3>
	int pulsTime = pulseEnd-pulseBegin;
     686:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <pulseEnd>
     68a:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <pulseEnd+0x1>
     68e:	a0 91 60 01 	lds	r26, 0x0160	; 0x800160 <pulseEnd+0x2>
     692:	b0 91 61 01 	lds	r27, 0x0161	; 0x800161 <pulseEnd+0x3>
     696:	40 91 62 01 	lds	r20, 0x0162	; 0x800162 <pulseBegin>
     69a:	50 91 63 01 	lds	r21, 0x0163	; 0x800163 <pulseBegin+0x1>
     69e:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <pulseBegin+0x2>
     6a2:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <pulseBegin+0x3>
     6a6:	84 1b       	sub	r24, r20
     6a8:	95 0b       	sbc	r25, r21
	pulseBegin = pulseEnd;
     6aa:	40 91 5e 01 	lds	r20, 0x015E	; 0x80015e <pulseEnd>
     6ae:	50 91 5f 01 	lds	r21, 0x015F	; 0x80015f <pulseEnd+0x1>
     6b2:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <pulseEnd+0x2>
     6b6:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <pulseEnd+0x3>
     6ba:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <pulseBegin>
     6be:	50 93 63 01 	sts	0x0163, r21	; 0x800163 <pulseBegin+0x1>
     6c2:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <pulseBegin+0x2>
     6c6:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <pulseBegin+0x3>
	
	//raw code
	
	if (pulsTime < 250 && pulsTime >= 120)
     6ca:	9c 01       	movw	r18, r24
     6cc:	28 57       	subi	r18, 0x78	; 120
     6ce:	31 09       	sbc	r19, r1
     6d0:	22 38       	cpi	r18, 0x82	; 130
     6d2:	31 05       	cpc	r19, r1
     6d4:	c0 f4       	brcc	.+48     	; 0x706 <__vector_1+0xc2>
	{
		rawindex = 0;
     6d6:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <rawindex+0x1>
     6da:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <rawindex>
		rawFrame[rawindex] = pulsTime;
     6de:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <rawindex>
     6e2:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <rawindex+0x1>
     6e6:	ee 0f       	add	r30, r30
     6e8:	ff 1f       	adc	r31, r31
     6ea:	e8 5c       	subi	r30, 0xC8	; 200
     6ec:	fe 4f       	sbci	r31, 0xFE	; 254
     6ee:	91 83       	std	Z+1, r25	; 0x01
     6f0:	80 83       	st	Z, r24
		rawindex++;
     6f2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <rawindex>
     6f6:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <rawindex+0x1>
     6fa:	01 96       	adiw	r24, 0x01	; 1
     6fc:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <rawindex+0x1>
     700:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <rawindex>
     704:	3c c0       	rjmp	.+120    	; 0x77e <__vector_1+0x13a>
		
		
	}
	else if (pulsTime < 120 && pulsTime > 0)
     706:	9c 01       	movw	r18, r24
     708:	21 50       	subi	r18, 0x01	; 1
     70a:	31 09       	sbc	r19, r1
     70c:	27 37       	cpi	r18, 0x77	; 119
     70e:	31 05       	cpc	r19, r1
     710:	b0 f5       	brcc	.+108    	; 0x77e <__vector_1+0x13a>
	{
		rawFrame[rawindex] = pulsTime;
     712:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <rawindex>
     716:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <rawindex+0x1>
     71a:	ee 0f       	add	r30, r30
     71c:	ff 1f       	adc	r31, r31
     71e:	e8 5c       	subi	r30, 0xC8	; 200
     720:	fe 4f       	sbci	r31, 0xFE	; 254
     722:	91 83       	std	Z+1, r25	; 0x01
     724:	80 83       	st	Z, r24
		rawindex++;
     726:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <rawindex>
     72a:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <rawindex+0x1>
     72e:	01 96       	adiw	r24, 0x01	; 1
     730:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <rawindex+0x1>
     734:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <rawindex>
		if (rawindex >= 11)
     738:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <rawindex>
     73c:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <rawindex+0x1>
     740:	0b 97       	sbiw	r24, 0x0b	; 11
     742:	ec f0       	brlt	.+58     	; 0x77e <__vector_1+0x13a>
		{
			rawindex = 0;
     744:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <rawindex+0x1>
     748:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <rawindex>
			rawNew = 1;
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <rawNew>
			for (int i = 0;i<11;i++)
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
			{
				decodeFrame[i] = rawFrame[i];
     756:	c9 01       	movw	r24, r18
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	fc 01       	movw	r30, r24
     75e:	e8 5c       	subi	r30, 0xC8	; 200
     760:	fe 4f       	sbci	r31, 0xFE	; 254
     762:	40 81       	ld	r20, Z
     764:	51 81       	ldd	r21, Z+1	; 0x01
     766:	fc 01       	movw	r30, r24
     768:	e3 5e       	subi	r30, 0xE3	; 227
     76a:	fe 4f       	sbci	r31, 0xFE	; 254
     76c:	51 83       	std	Z+1, r21	; 0x01
     76e:	40 83       	st	Z, r20
		rawindex++;
		if (rawindex >= 11)
		{
			rawindex = 0;
			rawNew = 1;
			for (int i = 0;i<11;i++)
     770:	2f 5f       	subi	r18, 0xFF	; 255
     772:	3f 4f       	sbci	r19, 0xFF	; 255
     774:	2b 30       	cpi	r18, 0x0B	; 11
     776:	31 05       	cpc	r19, r1
     778:	71 f7       	brne	.-36     	; 0x756 <__vector_1+0x112>
			{
				decodeFrame[i] = rawFrame[i];
			}
			decode();
     77a:	0e 94 ac 01 	call	0x358	; 0x358 <_Z6decodev>
		
		
	}
	
	
     77e:	ff 91       	pop	r31
     780:	ef 91       	pop	r30
     782:	bf 91       	pop	r27
     784:	af 91       	pop	r26
     786:	9f 91       	pop	r25
     788:	8f 91       	pop	r24
     78a:	7f 91       	pop	r23
     78c:	6f 91       	pop	r22
     78e:	5f 91       	pop	r21
     790:	4f 91       	pop	r20
     792:	3f 91       	pop	r19
     794:	2f 91       	pop	r18
     796:	0f 90       	pop	r0
     798:	0f be       	out	0x3f, r0	; 63
     79a:	0f 90       	pop	r0
     79c:	1f 90       	pop	r1
     79e:	18 95       	reti

000007a0 <_Z8sendDatac>:
	}
}
void sendData(char data){
	bool sending = 1;
	while(sending){
		ir.Transmit(count);
     7a0:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <count>
     7a4:	88 e9       	ldi	r24, 0x98	; 152
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	0e 94 81 01 	call	0x302	; 0x302 <_ZN2IR8TransmitEc>
		if (ir.Available() == 1)
     7ac:	88 e9       	ldi	r24, 0x98	; 152
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	0e 94 55 01 	call	0x2aa	; 0x2aa <_ZN2IR9AvailableEv>
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	31 f4       	brne	.+12     	; 0x7c4 <_Z8sendDatac+0x24>
		{
			uint8_t c = ir.Recieve();
     7b8:	88 e9       	ldi	r24, 0x98	; 152
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN2IR7RecieveEv>
			if (c == 6)
     7c0:	86 30       	cpi	r24, 0x06	; 6
     7c2:	39 f0       	breq	.+14     	; 0x7d2 <_Z8sendDatac+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7c4:	8f e5       	ldi	r24, 0x5F	; 95
     7c6:	9a ee       	ldi	r25, 0xEA	; 234
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <_Z8sendDatac+0x28>
     7cc:	00 c0       	rjmp	.+0      	; 0x7ce <_Z8sendDatac+0x2e>
     7ce:	00 00       	nop
     7d0:	e7 cf       	rjmp	.-50     	; 0x7a0 <_Z8sendDatac>
     7d2:	8f e5       	ldi	r24, 0x5F	; 95
     7d4:	9a ee       	ldi	r25, 0xEA	; 234
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	f1 f7       	brne	.-4      	; 0x7d6 <_Z8sendDatac+0x36>
     7da:	00 c0       	rjmp	.+0      	; 0x7dc <_Z8sendDatac+0x3c>
     7dc:	00 00       	nop
     7de:	08 95       	ret

000007e0 <_Z11recieveDatav>:
			
		}
		_delay_ms(15);
	}
}
char recieveData(){
     7e0:	cf 93       	push	r28
	char output = 0;
	bool recieving = 1;
	while(recieving){
		if (ir.Available() == 1)//recieved correctly
     7e2:	88 e9       	ldi	r24, 0x98	; 152
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	0e 94 55 01 	call	0x2aa	; 0x2aa <_ZN2IR9AvailableEv>
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	61 f0       	breq	.+24     	; 0x806 <_Z11recieveDatav+0x26>
		{
			output = ir.Recieve();
			ir.Transmit(6);
			recieving = 0;
		}
		else if (ir.Available() == -1)//parity fault
     7ee:	88 e9       	ldi	r24, 0x98	; 152
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	0e 94 55 01 	call	0x2aa	; 0x2aa <_ZN2IR9AvailableEv>
     7f6:	01 96       	adiw	r24, 0x01	; 1
     7f8:	a1 f7       	brne	.-24     	; 0x7e2 <_Z11recieveDatav+0x2>
		{
			ir.Transmit(21);
     7fa:	65 e1       	ldi	r22, 0x15	; 21
     7fc:	88 e9       	ldi	r24, 0x98	; 152
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	0e 94 81 01 	call	0x302	; 0x302 <_ZN2IR8TransmitEc>
     804:	ee cf       	rjmp	.-36     	; 0x7e2 <_Z11recieveDatav+0x2>
	char output = 0;
	bool recieving = 1;
	while(recieving){
		if (ir.Available() == 1)//recieved correctly
		{
			output = ir.Recieve();
     806:	88 e9       	ldi	r24, 0x98	; 152
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN2IR7RecieveEv>
     80e:	c8 2f       	mov	r28, r24
			ir.Transmit(6);
     810:	66 e0       	ldi	r22, 0x06	; 6
     812:	88 e9       	ldi	r24, 0x98	; 152
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	0e 94 81 01 	call	0x302	; 0x302 <_ZN2IR8TransmitEc>
			ir.Transmit(21);
			
		}
	}
	return output;
}
     81a:	8c 2f       	mov	r24, r28
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <main>:
uint8_t bufferIndex;
char reply[] = "hi, i got: ";
char replyline[25];
int main(void)
{
	millis.init(F_CPU);
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	54 e2       	ldi	r21, 0x24	; 36
     824:	64 ef       	ldi	r22, 0xF4	; 244
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	8c e1       	ldi	r24, 0x1C	; 28
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	0e 94 84 00 	call	0x108	; 0x108 <_ZN6MILLIS4initEm>
	Serial.Init(F_CPU,9600);
     830:	00 e8       	ldi	r16, 0x80	; 128
     832:	15 e2       	ldi	r17, 0x25	; 37
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	40 e0       	ldi	r20, 0x00	; 0
     83a:	54 e2       	ldi	r21, 0x24	; 36
     83c:	64 ef       	ldi	r22, 0xF4	; 244
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	89 e9       	ldi	r24, 0x99	; 153
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	0e 94 7f 04 	call	0x8fe	; 0x8fe <_ZN4UART4InitEmm>
	if (greenduino) ir.Init(38,56);
     848:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     84c:	88 23       	and	r24, r24
     84e:	49 f0       	breq	.+18     	; 0x862 <main+0x42>
     850:	48 e3       	ldi	r20, 0x38	; 56
     852:	50 e0       	ldi	r21, 0x00	; 0
     854:	66 e2       	ldi	r22, 0x26	; 38
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	88 e9       	ldi	r24, 0x98	; 152
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN2IR4InitEii>
     860:	08 c0       	rjmp	.+16     	; 0x872 <main+0x52>
	else ir.Init(56,38);
     862:	46 e2       	ldi	r20, 0x26	; 38
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	68 e3       	ldi	r22, 0x38	; 56
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	88 e9       	ldi	r24, 0x98	; 152
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN2IR4InitEii>
	
	
	/* Replace with your application code */
	while (1)
	{
		if (greenduino)
     872:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     876:	88 23       	and	r24, r24
     878:	51 f1       	breq	.+84     	; 0x8ce <main+0xae>
		{
			if (millis.get()>= sendtime + 20)
     87a:	8c e1       	ldi	r24, 0x1C	; 28
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN6MILLIS3getEv>
     882:	00 91 93 01 	lds	r16, 0x0193	; 0x800193 <sendtime>
     886:	10 91 94 01 	lds	r17, 0x0194	; 0x800194 <sendtime+0x1>
     88a:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <sendtime+0x2>
     88e:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <sendtime+0x3>
     892:	0c 5e       	subi	r16, 0xEC	; 236
     894:	1f 4f       	sbci	r17, 0xFF	; 255
     896:	2f 4f       	sbci	r18, 0xFF	; 255
     898:	3f 4f       	sbci	r19, 0xFF	; 255
     89a:	60 17       	cp	r22, r16
     89c:	71 07       	cpc	r23, r17
     89e:	82 07       	cpc	r24, r18
     8a0:	93 07       	cpc	r25, r19
     8a2:	38 f3       	brcs	.-50     	; 0x872 <main+0x52>
			{
				sendData(count);
     8a4:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <count>
     8a8:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z8sendDatac>
				count ++;
     8ac:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <count>
     8b0:	8f 5f       	subi	r24, 0xFF	; 255
     8b2:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <count>
				Serial.PutString("sent!");
     8b6:	6b e0       	ldi	r22, 0x0B	; 11
     8b8:	71 e0       	ldi	r23, 0x01	; 1
     8ba:	89 e9       	ldi	r24, 0x99	; 153
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN4UART9PutStringEPc>
				Serial.Transmit('/n');
     8c2:	6e e6       	ldi	r22, 0x6E	; 110
     8c4:	89 e9       	ldi	r24, 0x99	; 153
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN4UART8TransmitEh>
     8cc:	d2 cf       	rjmp	.-92     	; 0x872 <main+0x52>
			}			
		}
		else{
			char c = recieveData();
     8ce:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11recieveDatav>
			Serial.PutUInt(c);
     8d2:	68 2f       	mov	r22, r24
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	89 e9       	ldi	r24, 0x99	; 153
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_ZN4UART7PutUIntEi>
			Serial.Transmit('\n');
     8de:	6a e0       	ldi	r22, 0x0A	; 10
     8e0:	89 e9       	ldi	r24, 0x99	; 153
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN4UART8TransmitEh>
     8e8:	c4 cf       	rjmp	.-120    	; 0x872 <main+0x52>

000008ea <_GLOBAL__sub_I_Serial>:
#include <stdbool.h>
#include "SimpleUart.h"
#include "IRcomm.h"
#include "AVRmillis.h"

UART Serial;
     8ea:	89 e9       	ldi	r24, 0x99	; 153
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	0e 94 7e 04 	call	0x8fc	; 0x8fc <_ZN4UARTC1Ev>
IR ir;
     8f2:	88 e9       	ldi	r24, 0x98	; 152
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	0e 94 a9 00 	call	0x152	; 0x152 <_ZN2IRC1Ev>
     8fa:	08 95       	ret

000008fc <_ZN4UARTC1Ev>:
}
void UART::PutInt(int input){
	char str[20];
	sprintf(str, "%d", input);
	PutString(str);
}
     8fc:	08 95       	ret

000008fe <_ZN4UART4InitEmm>:
     8fe:	0f 93       	push	r16
     900:	1f 93       	push	r17
     902:	cb 01       	movw	r24, r22
     904:	ba 01       	movw	r22, r20
     906:	68 94       	set
     908:	13 f8       	bld	r1, 3
     90a:	96 95       	lsr	r25
     90c:	87 95       	ror	r24
     90e:	77 95       	ror	r23
     910:	67 95       	ror	r22
     912:	16 94       	lsr	r1
     914:	d1 f7       	brne	.-12     	; 0x90a <__stack+0xb>
     916:	a9 01       	movw	r20, r18
     918:	98 01       	movw	r18, r16
     91a:	0e 94 03 05 	call	0xa06	; 0xa06 <__udivmodsi4>
     91e:	21 50       	subi	r18, 0x01	; 1
     920:	31 09       	sbc	r19, r1
     922:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     926:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     92a:	88 e1       	ldi	r24, 0x18	; 24
     92c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     930:	86 e0       	ldi	r24, 0x06	; 6
     932:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     936:	1f 91       	pop	r17
     938:	0f 91       	pop	r16
     93a:	08 95       	ret

0000093c <_ZN4UART8TransmitEh>:
     93c:	e0 ec       	ldi	r30, 0xC0	; 192
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	80 81       	ld	r24, Z
     942:	85 ff       	sbrs	r24, 5
     944:	fd cf       	rjmp	.-6      	; 0x940 <_ZN4UART8TransmitEh+0x4>
     946:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     94a:	08 95       	ret

0000094c <_ZN4UART9PutStringEPc>:
     94c:	cf 92       	push	r12
     94e:	df 92       	push	r13
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	7c 01       	movw	r14, r24
     95e:	eb 01       	movw	r28, r22
     960:	8b 01       	movw	r16, r22
     962:	c1 2c       	mov	r12, r1
     964:	d1 2c       	mov	r13, r1
     966:	fe 01       	movw	r30, r28
     968:	01 90       	ld	r0, Z+
     96a:	00 20       	and	r0, r0
     96c:	e9 f7       	brne	.-6      	; 0x968 <_ZN4UART9PutStringEPc+0x1c>
     96e:	31 97       	sbiw	r30, 0x01	; 1
     970:	ec 1b       	sub	r30, r28
     972:	fd 0b       	sbc	r31, r29
     974:	ce 16       	cp	r12, r30
     976:	df 06       	cpc	r13, r31
     978:	50 f4       	brcc	.+20     	; 0x98e <_ZN4UART9PutStringEPc+0x42>
     97a:	f8 01       	movw	r30, r16
     97c:	61 91       	ld	r22, Z+
     97e:	8f 01       	movw	r16, r30
     980:	c7 01       	movw	r24, r14
     982:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN4UART8TransmitEh>
     986:	ff ef       	ldi	r31, 0xFF	; 255
     988:	cf 1a       	sub	r12, r31
     98a:	df 0a       	sbc	r13, r31
     98c:	ec cf       	rjmp	.-40     	; 0x966 <_ZN4UART9PutStringEPc+0x1a>
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	ff 90       	pop	r15
     998:	ef 90       	pop	r14
     99a:	df 90       	pop	r13
     99c:	cf 90       	pop	r12
     99e:	08 95       	ret

000009a0 <_ZN4UART7PutUIntEi>:
void UART::PutUInt(int input){
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	64 97       	sbiw	r28, 0x14	; 20
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	7c 01       	movw	r14, r24
	char str[20];
	sprintf(str, "%u", input);
     9be:	7f 93       	push	r23
     9c0:	6f 93       	push	r22
     9c2:	84 e1       	ldi	r24, 0x14	; 20
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	9f 93       	push	r25
     9c8:	8f 93       	push	r24
     9ca:	8e 01       	movw	r16, r28
     9cc:	0f 5f       	subi	r16, 0xFF	; 255
     9ce:	1f 4f       	sbci	r17, 0xFF	; 255
     9d0:	1f 93       	push	r17
     9d2:	0f 93       	push	r16
     9d4:	0e 94 2b 05 	call	0xa56	; 0xa56 <sprintf>
	PutString(str);
     9d8:	b8 01       	movw	r22, r16
     9da:	c7 01       	movw	r24, r14
     9dc:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN4UART9PutStringEPc>
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	64 96       	adiw	r28, 0x14	; 20
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	de bf       	out	0x3e, r29	; 62
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	cd bf       	out	0x3d, r28	; 61
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	08 95       	ret

00000a06 <__udivmodsi4>:
     a06:	a1 e2       	ldi	r26, 0x21	; 33
     a08:	1a 2e       	mov	r1, r26
     a0a:	aa 1b       	sub	r26, r26
     a0c:	bb 1b       	sub	r27, r27
     a0e:	fd 01       	movw	r30, r26
     a10:	0d c0       	rjmp	.+26     	; 0xa2c <__udivmodsi4_ep>

00000a12 <__udivmodsi4_loop>:
     a12:	aa 1f       	adc	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	ee 1f       	adc	r30, r30
     a18:	ff 1f       	adc	r31, r31
     a1a:	a2 17       	cp	r26, r18
     a1c:	b3 07       	cpc	r27, r19
     a1e:	e4 07       	cpc	r30, r20
     a20:	f5 07       	cpc	r31, r21
     a22:	20 f0       	brcs	.+8      	; 0xa2c <__udivmodsi4_ep>
     a24:	a2 1b       	sub	r26, r18
     a26:	b3 0b       	sbc	r27, r19
     a28:	e4 0b       	sbc	r30, r20
     a2a:	f5 0b       	sbc	r31, r21

00000a2c <__udivmodsi4_ep>:
     a2c:	66 1f       	adc	r22, r22
     a2e:	77 1f       	adc	r23, r23
     a30:	88 1f       	adc	r24, r24
     a32:	99 1f       	adc	r25, r25
     a34:	1a 94       	dec	r1
     a36:	69 f7       	brne	.-38     	; 0xa12 <__udivmodsi4_loop>
     a38:	60 95       	com	r22
     a3a:	70 95       	com	r23
     a3c:	80 95       	com	r24
     a3e:	90 95       	com	r25
     a40:	9b 01       	movw	r18, r22
     a42:	ac 01       	movw	r20, r24
     a44:	bd 01       	movw	r22, r26
     a46:	cf 01       	movw	r24, r30
     a48:	08 95       	ret

00000a4a <__tablejump2__>:
     a4a:	ee 0f       	add	r30, r30
     a4c:	ff 1f       	adc	r31, r31
     a4e:	05 90       	lpm	r0, Z+
     a50:	f4 91       	lpm	r31, Z
     a52:	e0 2d       	mov	r30, r0
     a54:	09 94       	ijmp

00000a56 <sprintf>:
     a56:	ae e0       	ldi	r26, 0x0E	; 14
     a58:	b0 e0       	ldi	r27, 0x00	; 0
     a5a:	e1 e3       	ldi	r30, 0x31	; 49
     a5c:	f5 e0       	ldi	r31, 0x05	; 5
     a5e:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__prologue_saves__+0x1c>
     a62:	0d 89       	ldd	r16, Y+21	; 0x15
     a64:	1e 89       	ldd	r17, Y+22	; 0x16
     a66:	86 e0       	ldi	r24, 0x06	; 6
     a68:	8c 83       	std	Y+4, r24	; 0x04
     a6a:	1a 83       	std	Y+2, r17	; 0x02
     a6c:	09 83       	std	Y+1, r16	; 0x01
     a6e:	8f ef       	ldi	r24, 0xFF	; 255
     a70:	9f e7       	ldi	r25, 0x7F	; 127
     a72:	9e 83       	std	Y+6, r25	; 0x06
     a74:	8d 83       	std	Y+5, r24	; 0x05
     a76:	ae 01       	movw	r20, r28
     a78:	47 5e       	subi	r20, 0xE7	; 231
     a7a:	5f 4f       	sbci	r21, 0xFF	; 255
     a7c:	6f 89       	ldd	r22, Y+23	; 0x17
     a7e:	78 8d       	ldd	r23, Y+24	; 0x18
     a80:	ce 01       	movw	r24, r28
     a82:	01 96       	adiw	r24, 0x01	; 1
     a84:	0e 94 4d 05 	call	0xa9a	; 0xa9a <vfprintf>
     a88:	ef 81       	ldd	r30, Y+7	; 0x07
     a8a:	f8 85       	ldd	r31, Y+8	; 0x08
     a8c:	e0 0f       	add	r30, r16
     a8e:	f1 1f       	adc	r31, r17
     a90:	10 82       	st	Z, r1
     a92:	2e 96       	adiw	r28, 0x0e	; 14
     a94:	e4 e0       	ldi	r30, 0x04	; 4
     a96:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__epilogue_restores__+0x1c>

00000a9a <vfprintf>:
     a9a:	ab e0       	ldi	r26, 0x0B	; 11
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e3 e5       	ldi	r30, 0x53	; 83
     aa0:	f5 e0       	ldi	r31, 0x05	; 5
     aa2:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__prologue_saves__>
     aa6:	6c 01       	movw	r12, r24
     aa8:	7b 01       	movw	r14, r22
     aaa:	8a 01       	movw	r16, r20
     aac:	fc 01       	movw	r30, r24
     aae:	17 82       	std	Z+7, r1	; 0x07
     ab0:	16 82       	std	Z+6, r1	; 0x06
     ab2:	83 81       	ldd	r24, Z+3	; 0x03
     ab4:	81 ff       	sbrs	r24, 1
     ab6:	cc c1       	rjmp	.+920    	; 0xe50 <vfprintf+0x3b6>
     ab8:	ce 01       	movw	r24, r28
     aba:	01 96       	adiw	r24, 0x01	; 1
     abc:	3c 01       	movw	r6, r24
     abe:	f6 01       	movw	r30, r12
     ac0:	93 81       	ldd	r25, Z+3	; 0x03
     ac2:	f7 01       	movw	r30, r14
     ac4:	93 fd       	sbrc	r25, 3
     ac6:	85 91       	lpm	r24, Z+
     ac8:	93 ff       	sbrs	r25, 3
     aca:	81 91       	ld	r24, Z+
     acc:	7f 01       	movw	r14, r30
     ace:	88 23       	and	r24, r24
     ad0:	09 f4       	brne	.+2      	; 0xad4 <vfprintf+0x3a>
     ad2:	ba c1       	rjmp	.+884    	; 0xe48 <vfprintf+0x3ae>
     ad4:	85 32       	cpi	r24, 0x25	; 37
     ad6:	39 f4       	brne	.+14     	; 0xae6 <vfprintf+0x4c>
     ad8:	93 fd       	sbrc	r25, 3
     ada:	85 91       	lpm	r24, Z+
     adc:	93 ff       	sbrs	r25, 3
     ade:	81 91       	ld	r24, Z+
     ae0:	7f 01       	movw	r14, r30
     ae2:	85 32       	cpi	r24, 0x25	; 37
     ae4:	29 f4       	brne	.+10     	; 0xaf0 <vfprintf+0x56>
     ae6:	b6 01       	movw	r22, r12
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	0e 94 44 07 	call	0xe88	; 0xe88 <fputc>
     aee:	e7 cf       	rjmp	.-50     	; 0xabe <vfprintf+0x24>
     af0:	91 2c       	mov	r9, r1
     af2:	21 2c       	mov	r2, r1
     af4:	31 2c       	mov	r3, r1
     af6:	ff e1       	ldi	r31, 0x1F	; 31
     af8:	f3 15       	cp	r31, r3
     afa:	d8 f0       	brcs	.+54     	; 0xb32 <vfprintf+0x98>
     afc:	8b 32       	cpi	r24, 0x2B	; 43
     afe:	79 f0       	breq	.+30     	; 0xb1e <vfprintf+0x84>
     b00:	38 f4       	brcc	.+14     	; 0xb10 <vfprintf+0x76>
     b02:	80 32       	cpi	r24, 0x20	; 32
     b04:	79 f0       	breq	.+30     	; 0xb24 <vfprintf+0x8a>
     b06:	83 32       	cpi	r24, 0x23	; 35
     b08:	a1 f4       	brne	.+40     	; 0xb32 <vfprintf+0x98>
     b0a:	23 2d       	mov	r18, r3
     b0c:	20 61       	ori	r18, 0x10	; 16
     b0e:	1d c0       	rjmp	.+58     	; 0xb4a <vfprintf+0xb0>
     b10:	8d 32       	cpi	r24, 0x2D	; 45
     b12:	61 f0       	breq	.+24     	; 0xb2c <vfprintf+0x92>
     b14:	80 33       	cpi	r24, 0x30	; 48
     b16:	69 f4       	brne	.+26     	; 0xb32 <vfprintf+0x98>
     b18:	23 2d       	mov	r18, r3
     b1a:	21 60       	ori	r18, 0x01	; 1
     b1c:	16 c0       	rjmp	.+44     	; 0xb4a <vfprintf+0xb0>
     b1e:	83 2d       	mov	r24, r3
     b20:	82 60       	ori	r24, 0x02	; 2
     b22:	38 2e       	mov	r3, r24
     b24:	e3 2d       	mov	r30, r3
     b26:	e4 60       	ori	r30, 0x04	; 4
     b28:	3e 2e       	mov	r3, r30
     b2a:	2a c0       	rjmp	.+84     	; 0xb80 <vfprintf+0xe6>
     b2c:	f3 2d       	mov	r31, r3
     b2e:	f8 60       	ori	r31, 0x08	; 8
     b30:	1d c0       	rjmp	.+58     	; 0xb6c <vfprintf+0xd2>
     b32:	37 fc       	sbrc	r3, 7
     b34:	2d c0       	rjmp	.+90     	; 0xb90 <vfprintf+0xf6>
     b36:	20 ed       	ldi	r18, 0xD0	; 208
     b38:	28 0f       	add	r18, r24
     b3a:	2a 30       	cpi	r18, 0x0A	; 10
     b3c:	40 f0       	brcs	.+16     	; 0xb4e <vfprintf+0xb4>
     b3e:	8e 32       	cpi	r24, 0x2E	; 46
     b40:	b9 f4       	brne	.+46     	; 0xb70 <vfprintf+0xd6>
     b42:	36 fc       	sbrc	r3, 6
     b44:	81 c1       	rjmp	.+770    	; 0xe48 <vfprintf+0x3ae>
     b46:	23 2d       	mov	r18, r3
     b48:	20 64       	ori	r18, 0x40	; 64
     b4a:	32 2e       	mov	r3, r18
     b4c:	19 c0       	rjmp	.+50     	; 0xb80 <vfprintf+0xe6>
     b4e:	36 fe       	sbrs	r3, 6
     b50:	06 c0       	rjmp	.+12     	; 0xb5e <vfprintf+0xc4>
     b52:	8a e0       	ldi	r24, 0x0A	; 10
     b54:	98 9e       	mul	r9, r24
     b56:	20 0d       	add	r18, r0
     b58:	11 24       	eor	r1, r1
     b5a:	92 2e       	mov	r9, r18
     b5c:	11 c0       	rjmp	.+34     	; 0xb80 <vfprintf+0xe6>
     b5e:	ea e0       	ldi	r30, 0x0A	; 10
     b60:	2e 9e       	mul	r2, r30
     b62:	20 0d       	add	r18, r0
     b64:	11 24       	eor	r1, r1
     b66:	22 2e       	mov	r2, r18
     b68:	f3 2d       	mov	r31, r3
     b6a:	f0 62       	ori	r31, 0x20	; 32
     b6c:	3f 2e       	mov	r3, r31
     b6e:	08 c0       	rjmp	.+16     	; 0xb80 <vfprintf+0xe6>
     b70:	8c 36       	cpi	r24, 0x6C	; 108
     b72:	21 f4       	brne	.+8      	; 0xb7c <vfprintf+0xe2>
     b74:	83 2d       	mov	r24, r3
     b76:	80 68       	ori	r24, 0x80	; 128
     b78:	38 2e       	mov	r3, r24
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <vfprintf+0xe6>
     b7c:	88 36       	cpi	r24, 0x68	; 104
     b7e:	41 f4       	brne	.+16     	; 0xb90 <vfprintf+0xf6>
     b80:	f7 01       	movw	r30, r14
     b82:	93 fd       	sbrc	r25, 3
     b84:	85 91       	lpm	r24, Z+
     b86:	93 ff       	sbrs	r25, 3
     b88:	81 91       	ld	r24, Z+
     b8a:	7f 01       	movw	r14, r30
     b8c:	81 11       	cpse	r24, r1
     b8e:	b3 cf       	rjmp	.-154    	; 0xaf6 <vfprintf+0x5c>
     b90:	98 2f       	mov	r25, r24
     b92:	9f 7d       	andi	r25, 0xDF	; 223
     b94:	95 54       	subi	r25, 0x45	; 69
     b96:	93 30       	cpi	r25, 0x03	; 3
     b98:	28 f4       	brcc	.+10     	; 0xba4 <vfprintf+0x10a>
     b9a:	0c 5f       	subi	r16, 0xFC	; 252
     b9c:	1f 4f       	sbci	r17, 0xFF	; 255
     b9e:	9f e3       	ldi	r25, 0x3F	; 63
     ba0:	99 83       	std	Y+1, r25	; 0x01
     ba2:	0d c0       	rjmp	.+26     	; 0xbbe <vfprintf+0x124>
     ba4:	83 36       	cpi	r24, 0x63	; 99
     ba6:	31 f0       	breq	.+12     	; 0xbb4 <vfprintf+0x11a>
     ba8:	83 37       	cpi	r24, 0x73	; 115
     baa:	71 f0       	breq	.+28     	; 0xbc8 <vfprintf+0x12e>
     bac:	83 35       	cpi	r24, 0x53	; 83
     bae:	09 f0       	breq	.+2      	; 0xbb2 <vfprintf+0x118>
     bb0:	59 c0       	rjmp	.+178    	; 0xc64 <vfprintf+0x1ca>
     bb2:	21 c0       	rjmp	.+66     	; 0xbf6 <vfprintf+0x15c>
     bb4:	f8 01       	movw	r30, r16
     bb6:	80 81       	ld	r24, Z
     bb8:	89 83       	std	Y+1, r24	; 0x01
     bba:	0e 5f       	subi	r16, 0xFE	; 254
     bbc:	1f 4f       	sbci	r17, 0xFF	; 255
     bbe:	88 24       	eor	r8, r8
     bc0:	83 94       	inc	r8
     bc2:	91 2c       	mov	r9, r1
     bc4:	53 01       	movw	r10, r6
     bc6:	13 c0       	rjmp	.+38     	; 0xbee <vfprintf+0x154>
     bc8:	28 01       	movw	r4, r16
     bca:	f2 e0       	ldi	r31, 0x02	; 2
     bcc:	4f 0e       	add	r4, r31
     bce:	51 1c       	adc	r5, r1
     bd0:	f8 01       	movw	r30, r16
     bd2:	a0 80       	ld	r10, Z
     bd4:	b1 80       	ldd	r11, Z+1	; 0x01
     bd6:	36 fe       	sbrs	r3, 6
     bd8:	03 c0       	rjmp	.+6      	; 0xbe0 <vfprintf+0x146>
     bda:	69 2d       	mov	r22, r9
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <vfprintf+0x14a>
     be0:	6f ef       	ldi	r22, 0xFF	; 255
     be2:	7f ef       	ldi	r23, 0xFF	; 255
     be4:	c5 01       	movw	r24, r10
     be6:	0e 94 39 07 	call	0xe72	; 0xe72 <strnlen>
     bea:	4c 01       	movw	r8, r24
     bec:	82 01       	movw	r16, r4
     bee:	f3 2d       	mov	r31, r3
     bf0:	ff 77       	andi	r31, 0x7F	; 127
     bf2:	3f 2e       	mov	r3, r31
     bf4:	16 c0       	rjmp	.+44     	; 0xc22 <vfprintf+0x188>
     bf6:	28 01       	movw	r4, r16
     bf8:	22 e0       	ldi	r18, 0x02	; 2
     bfa:	42 0e       	add	r4, r18
     bfc:	51 1c       	adc	r5, r1
     bfe:	f8 01       	movw	r30, r16
     c00:	a0 80       	ld	r10, Z
     c02:	b1 80       	ldd	r11, Z+1	; 0x01
     c04:	36 fe       	sbrs	r3, 6
     c06:	03 c0       	rjmp	.+6      	; 0xc0e <vfprintf+0x174>
     c08:	69 2d       	mov	r22, r9
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <vfprintf+0x178>
     c0e:	6f ef       	ldi	r22, 0xFF	; 255
     c10:	7f ef       	ldi	r23, 0xFF	; 255
     c12:	c5 01       	movw	r24, r10
     c14:	0e 94 2e 07 	call	0xe5c	; 0xe5c <strnlen_P>
     c18:	4c 01       	movw	r8, r24
     c1a:	f3 2d       	mov	r31, r3
     c1c:	f0 68       	ori	r31, 0x80	; 128
     c1e:	3f 2e       	mov	r3, r31
     c20:	82 01       	movw	r16, r4
     c22:	33 fc       	sbrc	r3, 3
     c24:	1b c0       	rjmp	.+54     	; 0xc5c <vfprintf+0x1c2>
     c26:	82 2d       	mov	r24, r2
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	88 16       	cp	r8, r24
     c2c:	99 06       	cpc	r9, r25
     c2e:	b0 f4       	brcc	.+44     	; 0xc5c <vfprintf+0x1c2>
     c30:	b6 01       	movw	r22, r12
     c32:	80 e2       	ldi	r24, 0x20	; 32
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 44 07 	call	0xe88	; 0xe88 <fputc>
     c3a:	2a 94       	dec	r2
     c3c:	f4 cf       	rjmp	.-24     	; 0xc26 <vfprintf+0x18c>
     c3e:	f5 01       	movw	r30, r10
     c40:	37 fc       	sbrc	r3, 7
     c42:	85 91       	lpm	r24, Z+
     c44:	37 fe       	sbrs	r3, 7
     c46:	81 91       	ld	r24, Z+
     c48:	5f 01       	movw	r10, r30
     c4a:	b6 01       	movw	r22, r12
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 44 07 	call	0xe88	; 0xe88 <fputc>
     c52:	21 10       	cpse	r2, r1
     c54:	2a 94       	dec	r2
     c56:	21 e0       	ldi	r18, 0x01	; 1
     c58:	82 1a       	sub	r8, r18
     c5a:	91 08       	sbc	r9, r1
     c5c:	81 14       	cp	r8, r1
     c5e:	91 04       	cpc	r9, r1
     c60:	71 f7       	brne	.-36     	; 0xc3e <vfprintf+0x1a4>
     c62:	e8 c0       	rjmp	.+464    	; 0xe34 <vfprintf+0x39a>
     c64:	84 36       	cpi	r24, 0x64	; 100
     c66:	11 f0       	breq	.+4      	; 0xc6c <vfprintf+0x1d2>
     c68:	89 36       	cpi	r24, 0x69	; 105
     c6a:	41 f5       	brne	.+80     	; 0xcbc <vfprintf+0x222>
     c6c:	f8 01       	movw	r30, r16
     c6e:	37 fe       	sbrs	r3, 7
     c70:	07 c0       	rjmp	.+14     	; 0xc80 <vfprintf+0x1e6>
     c72:	60 81       	ld	r22, Z
     c74:	71 81       	ldd	r23, Z+1	; 0x01
     c76:	82 81       	ldd	r24, Z+2	; 0x02
     c78:	93 81       	ldd	r25, Z+3	; 0x03
     c7a:	0c 5f       	subi	r16, 0xFC	; 252
     c7c:	1f 4f       	sbci	r17, 0xFF	; 255
     c7e:	08 c0       	rjmp	.+16     	; 0xc90 <vfprintf+0x1f6>
     c80:	60 81       	ld	r22, Z
     c82:	71 81       	ldd	r23, Z+1	; 0x01
     c84:	07 2e       	mov	r0, r23
     c86:	00 0c       	add	r0, r0
     c88:	88 0b       	sbc	r24, r24
     c8a:	99 0b       	sbc	r25, r25
     c8c:	0e 5f       	subi	r16, 0xFE	; 254
     c8e:	1f 4f       	sbci	r17, 0xFF	; 255
     c90:	f3 2d       	mov	r31, r3
     c92:	ff 76       	andi	r31, 0x6F	; 111
     c94:	3f 2e       	mov	r3, r31
     c96:	97 ff       	sbrs	r25, 7
     c98:	09 c0       	rjmp	.+18     	; 0xcac <vfprintf+0x212>
     c9a:	90 95       	com	r25
     c9c:	80 95       	com	r24
     c9e:	70 95       	com	r23
     ca0:	61 95       	neg	r22
     ca2:	7f 4f       	sbci	r23, 0xFF	; 255
     ca4:	8f 4f       	sbci	r24, 0xFF	; 255
     ca6:	9f 4f       	sbci	r25, 0xFF	; 255
     ca8:	f0 68       	ori	r31, 0x80	; 128
     caa:	3f 2e       	mov	r3, r31
     cac:	2a e0       	ldi	r18, 0x0A	; 10
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	a3 01       	movw	r20, r6
     cb2:	0e 94 80 07 	call	0xf00	; 0xf00 <__ultoa_invert>
     cb6:	88 2e       	mov	r8, r24
     cb8:	86 18       	sub	r8, r6
     cba:	45 c0       	rjmp	.+138    	; 0xd46 <vfprintf+0x2ac>
     cbc:	85 37       	cpi	r24, 0x75	; 117
     cbe:	31 f4       	brne	.+12     	; 0xccc <vfprintf+0x232>
     cc0:	23 2d       	mov	r18, r3
     cc2:	2f 7e       	andi	r18, 0xEF	; 239
     cc4:	b2 2e       	mov	r11, r18
     cc6:	2a e0       	ldi	r18, 0x0A	; 10
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	25 c0       	rjmp	.+74     	; 0xd16 <vfprintf+0x27c>
     ccc:	93 2d       	mov	r25, r3
     cce:	99 7f       	andi	r25, 0xF9	; 249
     cd0:	b9 2e       	mov	r11, r25
     cd2:	8f 36       	cpi	r24, 0x6F	; 111
     cd4:	c1 f0       	breq	.+48     	; 0xd06 <vfprintf+0x26c>
     cd6:	18 f4       	brcc	.+6      	; 0xcde <vfprintf+0x244>
     cd8:	88 35       	cpi	r24, 0x58	; 88
     cda:	79 f0       	breq	.+30     	; 0xcfa <vfprintf+0x260>
     cdc:	b5 c0       	rjmp	.+362    	; 0xe48 <vfprintf+0x3ae>
     cde:	80 37       	cpi	r24, 0x70	; 112
     ce0:	19 f0       	breq	.+6      	; 0xce8 <vfprintf+0x24e>
     ce2:	88 37       	cpi	r24, 0x78	; 120
     ce4:	21 f0       	breq	.+8      	; 0xcee <vfprintf+0x254>
     ce6:	b0 c0       	rjmp	.+352    	; 0xe48 <vfprintf+0x3ae>
     ce8:	e9 2f       	mov	r30, r25
     cea:	e0 61       	ori	r30, 0x10	; 16
     cec:	be 2e       	mov	r11, r30
     cee:	b4 fe       	sbrs	r11, 4
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <vfprintf+0x272>
     cf2:	fb 2d       	mov	r31, r11
     cf4:	f4 60       	ori	r31, 0x04	; 4
     cf6:	bf 2e       	mov	r11, r31
     cf8:	09 c0       	rjmp	.+18     	; 0xd0c <vfprintf+0x272>
     cfa:	34 fe       	sbrs	r3, 4
     cfc:	0a c0       	rjmp	.+20     	; 0xd12 <vfprintf+0x278>
     cfe:	29 2f       	mov	r18, r25
     d00:	26 60       	ori	r18, 0x06	; 6
     d02:	b2 2e       	mov	r11, r18
     d04:	06 c0       	rjmp	.+12     	; 0xd12 <vfprintf+0x278>
     d06:	28 e0       	ldi	r18, 0x08	; 8
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	05 c0       	rjmp	.+10     	; 0xd16 <vfprintf+0x27c>
     d0c:	20 e1       	ldi	r18, 0x10	; 16
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <vfprintf+0x27c>
     d12:	20 e1       	ldi	r18, 0x10	; 16
     d14:	32 e0       	ldi	r19, 0x02	; 2
     d16:	f8 01       	movw	r30, r16
     d18:	b7 fe       	sbrs	r11, 7
     d1a:	07 c0       	rjmp	.+14     	; 0xd2a <vfprintf+0x290>
     d1c:	60 81       	ld	r22, Z
     d1e:	71 81       	ldd	r23, Z+1	; 0x01
     d20:	82 81       	ldd	r24, Z+2	; 0x02
     d22:	93 81       	ldd	r25, Z+3	; 0x03
     d24:	0c 5f       	subi	r16, 0xFC	; 252
     d26:	1f 4f       	sbci	r17, 0xFF	; 255
     d28:	06 c0       	rjmp	.+12     	; 0xd36 <vfprintf+0x29c>
     d2a:	60 81       	ld	r22, Z
     d2c:	71 81       	ldd	r23, Z+1	; 0x01
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0e 5f       	subi	r16, 0xFE	; 254
     d34:	1f 4f       	sbci	r17, 0xFF	; 255
     d36:	a3 01       	movw	r20, r6
     d38:	0e 94 80 07 	call	0xf00	; 0xf00 <__ultoa_invert>
     d3c:	88 2e       	mov	r8, r24
     d3e:	86 18       	sub	r8, r6
     d40:	fb 2d       	mov	r31, r11
     d42:	ff 77       	andi	r31, 0x7F	; 127
     d44:	3f 2e       	mov	r3, r31
     d46:	36 fe       	sbrs	r3, 6
     d48:	0d c0       	rjmp	.+26     	; 0xd64 <vfprintf+0x2ca>
     d4a:	23 2d       	mov	r18, r3
     d4c:	2e 7f       	andi	r18, 0xFE	; 254
     d4e:	a2 2e       	mov	r10, r18
     d50:	89 14       	cp	r8, r9
     d52:	58 f4       	brcc	.+22     	; 0xd6a <vfprintf+0x2d0>
     d54:	34 fe       	sbrs	r3, 4
     d56:	0b c0       	rjmp	.+22     	; 0xd6e <vfprintf+0x2d4>
     d58:	32 fc       	sbrc	r3, 2
     d5a:	09 c0       	rjmp	.+18     	; 0xd6e <vfprintf+0x2d4>
     d5c:	83 2d       	mov	r24, r3
     d5e:	8e 7e       	andi	r24, 0xEE	; 238
     d60:	a8 2e       	mov	r10, r24
     d62:	05 c0       	rjmp	.+10     	; 0xd6e <vfprintf+0x2d4>
     d64:	b8 2c       	mov	r11, r8
     d66:	a3 2c       	mov	r10, r3
     d68:	03 c0       	rjmp	.+6      	; 0xd70 <vfprintf+0x2d6>
     d6a:	b8 2c       	mov	r11, r8
     d6c:	01 c0       	rjmp	.+2      	; 0xd70 <vfprintf+0x2d6>
     d6e:	b9 2c       	mov	r11, r9
     d70:	a4 fe       	sbrs	r10, 4
     d72:	0f c0       	rjmp	.+30     	; 0xd92 <vfprintf+0x2f8>
     d74:	fe 01       	movw	r30, r28
     d76:	e8 0d       	add	r30, r8
     d78:	f1 1d       	adc	r31, r1
     d7a:	80 81       	ld	r24, Z
     d7c:	80 33       	cpi	r24, 0x30	; 48
     d7e:	21 f4       	brne	.+8      	; 0xd88 <vfprintf+0x2ee>
     d80:	9a 2d       	mov	r25, r10
     d82:	99 7e       	andi	r25, 0xE9	; 233
     d84:	a9 2e       	mov	r10, r25
     d86:	09 c0       	rjmp	.+18     	; 0xd9a <vfprintf+0x300>
     d88:	a2 fe       	sbrs	r10, 2
     d8a:	06 c0       	rjmp	.+12     	; 0xd98 <vfprintf+0x2fe>
     d8c:	b3 94       	inc	r11
     d8e:	b3 94       	inc	r11
     d90:	04 c0       	rjmp	.+8      	; 0xd9a <vfprintf+0x300>
     d92:	8a 2d       	mov	r24, r10
     d94:	86 78       	andi	r24, 0x86	; 134
     d96:	09 f0       	breq	.+2      	; 0xd9a <vfprintf+0x300>
     d98:	b3 94       	inc	r11
     d9a:	a3 fc       	sbrc	r10, 3
     d9c:	11 c0       	rjmp	.+34     	; 0xdc0 <vfprintf+0x326>
     d9e:	a0 fe       	sbrs	r10, 0
     da0:	06 c0       	rjmp	.+12     	; 0xdae <vfprintf+0x314>
     da2:	b2 14       	cp	r11, r2
     da4:	88 f4       	brcc	.+34     	; 0xdc8 <vfprintf+0x32e>
     da6:	28 0c       	add	r2, r8
     da8:	92 2c       	mov	r9, r2
     daa:	9b 18       	sub	r9, r11
     dac:	0e c0       	rjmp	.+28     	; 0xdca <vfprintf+0x330>
     dae:	b2 14       	cp	r11, r2
     db0:	60 f4       	brcc	.+24     	; 0xdca <vfprintf+0x330>
     db2:	b6 01       	movw	r22, r12
     db4:	80 e2       	ldi	r24, 0x20	; 32
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 44 07 	call	0xe88	; 0xe88 <fputc>
     dbc:	b3 94       	inc	r11
     dbe:	f7 cf       	rjmp	.-18     	; 0xdae <vfprintf+0x314>
     dc0:	b2 14       	cp	r11, r2
     dc2:	18 f4       	brcc	.+6      	; 0xdca <vfprintf+0x330>
     dc4:	2b 18       	sub	r2, r11
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <vfprintf+0x332>
     dc8:	98 2c       	mov	r9, r8
     dca:	21 2c       	mov	r2, r1
     dcc:	a4 fe       	sbrs	r10, 4
     dce:	10 c0       	rjmp	.+32     	; 0xdf0 <vfprintf+0x356>
     dd0:	b6 01       	movw	r22, r12
     dd2:	80 e3       	ldi	r24, 0x30	; 48
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 44 07 	call	0xe88	; 0xe88 <fputc>
     dda:	a2 fe       	sbrs	r10, 2
     ddc:	17 c0       	rjmp	.+46     	; 0xe0c <vfprintf+0x372>
     dde:	a1 fc       	sbrc	r10, 1
     de0:	03 c0       	rjmp	.+6      	; 0xde8 <vfprintf+0x34e>
     de2:	88 e7       	ldi	r24, 0x78	; 120
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	02 c0       	rjmp	.+4      	; 0xdec <vfprintf+0x352>
     de8:	88 e5       	ldi	r24, 0x58	; 88
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	b6 01       	movw	r22, r12
     dee:	0c c0       	rjmp	.+24     	; 0xe08 <vfprintf+0x36e>
     df0:	8a 2d       	mov	r24, r10
     df2:	86 78       	andi	r24, 0x86	; 134
     df4:	59 f0       	breq	.+22     	; 0xe0c <vfprintf+0x372>
     df6:	a1 fe       	sbrs	r10, 1
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <vfprintf+0x364>
     dfa:	8b e2       	ldi	r24, 0x2B	; 43
     dfc:	01 c0       	rjmp	.+2      	; 0xe00 <vfprintf+0x366>
     dfe:	80 e2       	ldi	r24, 0x20	; 32
     e00:	a7 fc       	sbrc	r10, 7
     e02:	8d e2       	ldi	r24, 0x2D	; 45
     e04:	b6 01       	movw	r22, r12
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 44 07 	call	0xe88	; 0xe88 <fputc>
     e0c:	89 14       	cp	r8, r9
     e0e:	38 f4       	brcc	.+14     	; 0xe1e <vfprintf+0x384>
     e10:	b6 01       	movw	r22, r12
     e12:	80 e3       	ldi	r24, 0x30	; 48
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 44 07 	call	0xe88	; 0xe88 <fputc>
     e1a:	9a 94       	dec	r9
     e1c:	f7 cf       	rjmp	.-18     	; 0xe0c <vfprintf+0x372>
     e1e:	8a 94       	dec	r8
     e20:	f3 01       	movw	r30, r6
     e22:	e8 0d       	add	r30, r8
     e24:	f1 1d       	adc	r31, r1
     e26:	80 81       	ld	r24, Z
     e28:	b6 01       	movw	r22, r12
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 44 07 	call	0xe88	; 0xe88 <fputc>
     e30:	81 10       	cpse	r8, r1
     e32:	f5 cf       	rjmp	.-22     	; 0xe1e <vfprintf+0x384>
     e34:	22 20       	and	r2, r2
     e36:	09 f4       	brne	.+2      	; 0xe3a <vfprintf+0x3a0>
     e38:	42 ce       	rjmp	.-892    	; 0xabe <vfprintf+0x24>
     e3a:	b6 01       	movw	r22, r12
     e3c:	80 e2       	ldi	r24, 0x20	; 32
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 44 07 	call	0xe88	; 0xe88 <fputc>
     e44:	2a 94       	dec	r2
     e46:	f6 cf       	rjmp	.-20     	; 0xe34 <vfprintf+0x39a>
     e48:	f6 01       	movw	r30, r12
     e4a:	86 81       	ldd	r24, Z+6	; 0x06
     e4c:	97 81       	ldd	r25, Z+7	; 0x07
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <vfprintf+0x3ba>
     e50:	8f ef       	ldi	r24, 0xFF	; 255
     e52:	9f ef       	ldi	r25, 0xFF	; 255
     e54:	2b 96       	adiw	r28, 0x0b	; 11
     e56:	e2 e1       	ldi	r30, 0x12	; 18
     e58:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__epilogue_restores__>

00000e5c <strnlen_P>:
     e5c:	fc 01       	movw	r30, r24
     e5e:	05 90       	lpm	r0, Z+
     e60:	61 50       	subi	r22, 0x01	; 1
     e62:	70 40       	sbci	r23, 0x00	; 0
     e64:	01 10       	cpse	r0, r1
     e66:	d8 f7       	brcc	.-10     	; 0xe5e <strnlen_P+0x2>
     e68:	80 95       	com	r24
     e6a:	90 95       	com	r25
     e6c:	8e 0f       	add	r24, r30
     e6e:	9f 1f       	adc	r25, r31
     e70:	08 95       	ret

00000e72 <strnlen>:
     e72:	fc 01       	movw	r30, r24
     e74:	61 50       	subi	r22, 0x01	; 1
     e76:	70 40       	sbci	r23, 0x00	; 0
     e78:	01 90       	ld	r0, Z+
     e7a:	01 10       	cpse	r0, r1
     e7c:	d8 f7       	brcc	.-10     	; 0xe74 <strnlen+0x2>
     e7e:	80 95       	com	r24
     e80:	90 95       	com	r25
     e82:	8e 0f       	add	r24, r30
     e84:	9f 1f       	adc	r25, r31
     e86:	08 95       	ret

00000e88 <fputc>:
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	fb 01       	movw	r30, r22
     e92:	23 81       	ldd	r18, Z+3	; 0x03
     e94:	21 fd       	sbrc	r18, 1
     e96:	03 c0       	rjmp	.+6      	; 0xe9e <fputc+0x16>
     e98:	8f ef       	ldi	r24, 0xFF	; 255
     e9a:	9f ef       	ldi	r25, 0xFF	; 255
     e9c:	2c c0       	rjmp	.+88     	; 0xef6 <fputc+0x6e>
     e9e:	22 ff       	sbrs	r18, 2
     ea0:	16 c0       	rjmp	.+44     	; 0xece <fputc+0x46>
     ea2:	46 81       	ldd	r20, Z+6	; 0x06
     ea4:	57 81       	ldd	r21, Z+7	; 0x07
     ea6:	24 81       	ldd	r18, Z+4	; 0x04
     ea8:	35 81       	ldd	r19, Z+5	; 0x05
     eaa:	42 17       	cp	r20, r18
     eac:	53 07       	cpc	r21, r19
     eae:	44 f4       	brge	.+16     	; 0xec0 <fputc+0x38>
     eb0:	a0 81       	ld	r26, Z
     eb2:	b1 81       	ldd	r27, Z+1	; 0x01
     eb4:	9d 01       	movw	r18, r26
     eb6:	2f 5f       	subi	r18, 0xFF	; 255
     eb8:	3f 4f       	sbci	r19, 0xFF	; 255
     eba:	31 83       	std	Z+1, r19	; 0x01
     ebc:	20 83       	st	Z, r18
     ebe:	8c 93       	st	X, r24
     ec0:	26 81       	ldd	r18, Z+6	; 0x06
     ec2:	37 81       	ldd	r19, Z+7	; 0x07
     ec4:	2f 5f       	subi	r18, 0xFF	; 255
     ec6:	3f 4f       	sbci	r19, 0xFF	; 255
     ec8:	37 83       	std	Z+7, r19	; 0x07
     eca:	26 83       	std	Z+6, r18	; 0x06
     ecc:	14 c0       	rjmp	.+40     	; 0xef6 <fputc+0x6e>
     ece:	8b 01       	movw	r16, r22
     ed0:	ec 01       	movw	r28, r24
     ed2:	fb 01       	movw	r30, r22
     ed4:	00 84       	ldd	r0, Z+8	; 0x08
     ed6:	f1 85       	ldd	r31, Z+9	; 0x09
     ed8:	e0 2d       	mov	r30, r0
     eda:	09 95       	icall
     edc:	89 2b       	or	r24, r25
     ede:	e1 f6       	brne	.-72     	; 0xe98 <fputc+0x10>
     ee0:	d8 01       	movw	r26, r16
     ee2:	16 96       	adiw	r26, 0x06	; 6
     ee4:	8d 91       	ld	r24, X+
     ee6:	9c 91       	ld	r25, X
     ee8:	17 97       	sbiw	r26, 0x07	; 7
     eea:	01 96       	adiw	r24, 0x01	; 1
     eec:	17 96       	adiw	r26, 0x07	; 7
     eee:	9c 93       	st	X, r25
     ef0:	8e 93       	st	-X, r24
     ef2:	16 97       	sbiw	r26, 0x06	; 6
     ef4:	ce 01       	movw	r24, r28
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	08 95       	ret

00000f00 <__ultoa_invert>:
     f00:	fa 01       	movw	r30, r20
     f02:	aa 27       	eor	r26, r26
     f04:	28 30       	cpi	r18, 0x08	; 8
     f06:	51 f1       	breq	.+84     	; 0xf5c <__ultoa_invert+0x5c>
     f08:	20 31       	cpi	r18, 0x10	; 16
     f0a:	81 f1       	breq	.+96     	; 0xf6c <__ultoa_invert+0x6c>
     f0c:	e8 94       	clt
     f0e:	6f 93       	push	r22
     f10:	6e 7f       	andi	r22, 0xFE	; 254
     f12:	6e 5f       	subi	r22, 0xFE	; 254
     f14:	7f 4f       	sbci	r23, 0xFF	; 255
     f16:	8f 4f       	sbci	r24, 0xFF	; 255
     f18:	9f 4f       	sbci	r25, 0xFF	; 255
     f1a:	af 4f       	sbci	r26, 0xFF	; 255
     f1c:	b1 e0       	ldi	r27, 0x01	; 1
     f1e:	3e d0       	rcall	.+124    	; 0xf9c <__ultoa_invert+0x9c>
     f20:	b4 e0       	ldi	r27, 0x04	; 4
     f22:	3c d0       	rcall	.+120    	; 0xf9c <__ultoa_invert+0x9c>
     f24:	67 0f       	add	r22, r23
     f26:	78 1f       	adc	r23, r24
     f28:	89 1f       	adc	r24, r25
     f2a:	9a 1f       	adc	r25, r26
     f2c:	a1 1d       	adc	r26, r1
     f2e:	68 0f       	add	r22, r24
     f30:	79 1f       	adc	r23, r25
     f32:	8a 1f       	adc	r24, r26
     f34:	91 1d       	adc	r25, r1
     f36:	a1 1d       	adc	r26, r1
     f38:	6a 0f       	add	r22, r26
     f3a:	71 1d       	adc	r23, r1
     f3c:	81 1d       	adc	r24, r1
     f3e:	91 1d       	adc	r25, r1
     f40:	a1 1d       	adc	r26, r1
     f42:	20 d0       	rcall	.+64     	; 0xf84 <__ultoa_invert+0x84>
     f44:	09 f4       	brne	.+2      	; 0xf48 <__ultoa_invert+0x48>
     f46:	68 94       	set
     f48:	3f 91       	pop	r19
     f4a:	2a e0       	ldi	r18, 0x0A	; 10
     f4c:	26 9f       	mul	r18, r22
     f4e:	11 24       	eor	r1, r1
     f50:	30 19       	sub	r19, r0
     f52:	30 5d       	subi	r19, 0xD0	; 208
     f54:	31 93       	st	Z+, r19
     f56:	de f6       	brtc	.-74     	; 0xf0e <__ultoa_invert+0xe>
     f58:	cf 01       	movw	r24, r30
     f5a:	08 95       	ret
     f5c:	46 2f       	mov	r20, r22
     f5e:	47 70       	andi	r20, 0x07	; 7
     f60:	40 5d       	subi	r20, 0xD0	; 208
     f62:	41 93       	st	Z+, r20
     f64:	b3 e0       	ldi	r27, 0x03	; 3
     f66:	0f d0       	rcall	.+30     	; 0xf86 <__ultoa_invert+0x86>
     f68:	c9 f7       	brne	.-14     	; 0xf5c <__ultoa_invert+0x5c>
     f6a:	f6 cf       	rjmp	.-20     	; 0xf58 <__ultoa_invert+0x58>
     f6c:	46 2f       	mov	r20, r22
     f6e:	4f 70       	andi	r20, 0x0F	; 15
     f70:	40 5d       	subi	r20, 0xD0	; 208
     f72:	4a 33       	cpi	r20, 0x3A	; 58
     f74:	18 f0       	brcs	.+6      	; 0xf7c <__ultoa_invert+0x7c>
     f76:	49 5d       	subi	r20, 0xD9	; 217
     f78:	31 fd       	sbrc	r19, 1
     f7a:	40 52       	subi	r20, 0x20	; 32
     f7c:	41 93       	st	Z+, r20
     f7e:	02 d0       	rcall	.+4      	; 0xf84 <__ultoa_invert+0x84>
     f80:	a9 f7       	brne	.-22     	; 0xf6c <__ultoa_invert+0x6c>
     f82:	ea cf       	rjmp	.-44     	; 0xf58 <__ultoa_invert+0x58>
     f84:	b4 e0       	ldi	r27, 0x04	; 4
     f86:	a6 95       	lsr	r26
     f88:	97 95       	ror	r25
     f8a:	87 95       	ror	r24
     f8c:	77 95       	ror	r23
     f8e:	67 95       	ror	r22
     f90:	ba 95       	dec	r27
     f92:	c9 f7       	brne	.-14     	; 0xf86 <__ultoa_invert+0x86>
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	61 05       	cpc	r22, r1
     f98:	71 05       	cpc	r23, r1
     f9a:	08 95       	ret
     f9c:	9b 01       	movw	r18, r22
     f9e:	ac 01       	movw	r20, r24
     fa0:	0a 2e       	mov	r0, r26
     fa2:	06 94       	lsr	r0
     fa4:	57 95       	ror	r21
     fa6:	47 95       	ror	r20
     fa8:	37 95       	ror	r19
     faa:	27 95       	ror	r18
     fac:	ba 95       	dec	r27
     fae:	c9 f7       	brne	.-14     	; 0xfa2 <__ultoa_invert+0xa2>
     fb0:	62 0f       	add	r22, r18
     fb2:	73 1f       	adc	r23, r19
     fb4:	84 1f       	adc	r24, r20
     fb6:	95 1f       	adc	r25, r21
     fb8:	a0 1d       	adc	r26, r0
     fba:	08 95       	ret

00000fbc <__prologue_saves__>:
     fbc:	2f 92       	push	r2
     fbe:	3f 92       	push	r3
     fc0:	4f 92       	push	r4
     fc2:	5f 92       	push	r5
     fc4:	6f 92       	push	r6
     fc6:	7f 92       	push	r7
     fc8:	8f 92       	push	r8
     fca:	9f 92       	push	r9
     fcc:	af 92       	push	r10
     fce:	bf 92       	push	r11
     fd0:	cf 92       	push	r12
     fd2:	df 92       	push	r13
     fd4:	ef 92       	push	r14
     fd6:	ff 92       	push	r15
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	ca 1b       	sub	r28, r26
     fe6:	db 0b       	sbc	r29, r27
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	09 94       	ijmp

00000ff4 <__epilogue_restores__>:
     ff4:	2a 88       	ldd	r2, Y+18	; 0x12
     ff6:	39 88       	ldd	r3, Y+17	; 0x11
     ff8:	48 88       	ldd	r4, Y+16	; 0x10
     ffa:	5f 84       	ldd	r5, Y+15	; 0x0f
     ffc:	6e 84       	ldd	r6, Y+14	; 0x0e
     ffe:	7d 84       	ldd	r7, Y+13	; 0x0d
    1000:	8c 84       	ldd	r8, Y+12	; 0x0c
    1002:	9b 84       	ldd	r9, Y+11	; 0x0b
    1004:	aa 84       	ldd	r10, Y+10	; 0x0a
    1006:	b9 84       	ldd	r11, Y+9	; 0x09
    1008:	c8 84       	ldd	r12, Y+8	; 0x08
    100a:	df 80       	ldd	r13, Y+7	; 0x07
    100c:	ee 80       	ldd	r14, Y+6	; 0x06
    100e:	fd 80       	ldd	r15, Y+5	; 0x05
    1010:	0c 81       	ldd	r16, Y+4	; 0x04
    1012:	1b 81       	ldd	r17, Y+3	; 0x03
    1014:	aa 81       	ldd	r26, Y+2	; 0x02
    1016:	b9 81       	ldd	r27, Y+1	; 0x01
    1018:	ce 0f       	add	r28, r30
    101a:	d1 1d       	adc	r29, r1
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	ed 01       	movw	r28, r26
    1028:	08 95       	ret

0000102a <_exit>:
    102a:	f8 94       	cli

0000102c <__stop_program>:
    102c:	ff cf       	rjmp	.-2      	; 0x102c <__stop_program>
