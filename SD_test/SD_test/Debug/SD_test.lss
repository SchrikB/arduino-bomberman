
SD_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  000005f0  00000684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800158  00800158  000006dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000070c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c37  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d18  00000000  00000000  000024a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000942  00000000  00000000  000031bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  00003b00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007be  00000000  00000000  00003e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c14  00000000  00000000  0000460e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00005222  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_11>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	d7 01       	movw	r26, r14

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e0 ef       	ldi	r30, 0xF0	; 240
  7e:	f5 e0       	ldi	r31, 0x05	; 5
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a8 35       	cpi	r26, 0x58	; 88
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a8 e5       	ldi	r26, 0x58	; 88
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a3 36       	cpi	r26, 0x63	; 99
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 77 01 	call	0x2ee	; 0x2ee <main>
  b6:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <__vector_11>:
MILLIS millis;

volatile unsigned long timer1_millis;

ISR (TIMER1_COMPA_vect)
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	af 93       	push	r26
  ce:	bf 93       	push	r27
	timer1_millis++;
  d0:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
  d4:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <__data_end+0x1>
  d8:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <__data_end+0x2>
  dc:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <__data_end+0x3>
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	a1 1d       	adc	r26, r1
  e4:	b1 1d       	adc	r27, r1
  e6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <__data_end>
  ea:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <__data_end+0x1>
  ee:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <__data_end+0x2>
  f2:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <__data_end+0x3>
}
  f6:	bf 91       	pop	r27
  f8:	af 91       	pop	r26
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <_Z6SDInit3SPI>:
	while (1)
	{
	}
}

uint8_t SDInit(SPI SD_SPI){
 108:	ef 92       	push	r14
 10a:	ff 92       	push	r15
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	1f 92       	push	r1
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	89 83       	std	Y+1, r24	; 0x01
	bool spiInit = 0;
	bool sdInit = 0;
	
	SD_SPI.init();
 11c:	ce 01       	movw	r24, r28
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	0e 94 8a 02 	call	0x514	; 0x514 <_ZN3SPI4initEv>
	SD_SPI.endTransmission();
 124:	ce 01       	movw	r24, r28
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_ZN3SPI15endTransmissionEv>
 12c:	0a e0       	ldi	r16, 0x0A	; 10
 12e:	10 e0       	ldi	r17, 0x00	; 0
	for (int i = 0;i<10;i++)
	{
		SD_SPI.transfer(0xFF);
 130:	6f ef       	ldi	r22, 0xFF	; 255
 132:	ce 01       	movw	r24, r28
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN3SPI8transferEh>
 13a:	01 50       	subi	r16, 0x01	; 1
 13c:	11 09       	sbc	r17, r1
	bool spiInit = 0;
	bool sdInit = 0;
	
	SD_SPI.init();
	SD_SPI.endTransmission();
	for (int i = 0;i<10;i++)
 13e:	c1 f7       	brne	.-16     	; 0x130 <_Z6SDInit3SPI+0x28>
	{
		SD_SPI.transfer(0xFF);
	}
	SD_SPI.beginTransmission();
 140:	ce 01       	movw	r24, r28
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN3SPI17beginTransmissionEv>
	SD_SPI.transfer(0x40);
 148:	60 e4       	ldi	r22, 0x40	; 64
 14a:	ce 01       	movw	r24, r28
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN3SPI8transferEh>
	SD_SPI.transfer(0x00);
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	ce 01       	movw	r24, r28
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN3SPI8transferEh>
	SD_SPI.transfer(0x00);
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	ce 01       	movw	r24, r28
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN3SPI8transferEh>
	SD_SPI.transfer(0x00);
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	ce 01       	movw	r24, r28
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN3SPI8transferEh>
	SD_SPI.transfer(0x00);
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	ce 01       	movw	r24, r28
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN3SPI8transferEh>
	SD_SPI.transfer(0x95);
 17a:	65 e9       	ldi	r22, 0x95	; 149
 17c:	ce 01       	movw	r24, r28
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN3SPI8transferEh>
 184:	18 e0       	ldi	r17, 0x08	; 8
	{
	}
}

uint8_t SDInit(SPI SD_SPI){
	bool spiInit = 0;
 186:	f1 2c       	mov	r15, r1
	for (uint8_t i = 0;i<8;i++)
	{
		
		if (SD.transfer(0xFF) == 0x01)
		{
			spiInit = 1;
 188:	01 e0       	ldi	r16, 0x01	; 1
	SD_SPI.transfer(0x95);
	
	for (uint8_t i = 0;i<8;i++)
	{
		
		if (SD.transfer(0xFF) == 0x01)
 18a:	6f ef       	ldi	r22, 0xFF	; 255
 18c:	8d e5       	ldi	r24, 0x5D	; 93
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN3SPI8transferEh>
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	09 f4       	brne	.+2      	; 0x19a <_Z6SDInit3SPI+0x92>
		{
			spiInit = 1;
 198:	f0 2e       	mov	r15, r16
 19a:	11 50       	subi	r17, 0x01	; 1
	SD_SPI.transfer(0x00);
	SD_SPI.transfer(0x00);
	SD_SPI.transfer(0x00);
	SD_SPI.transfer(0x95);
	
	for (uint8_t i = 0;i<8;i++)
 19c:	b1 f7       	brne	.-20     	; 0x18a <_Z6SDInit3SPI+0x82>
		if (SD.transfer(0xFF) == 0x01)
		{
			spiInit = 1;
		}
	}
	SD_SPI.transfer(0x41);
 19e:	61 e4       	ldi	r22, 0x41	; 65
 1a0:	ce 01       	movw	r24, r28
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN3SPI8transferEh>
	SD_SPI.transfer(0x00);
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	ce 01       	movw	r24, r28
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN3SPI8transferEh>
	SD_SPI.transfer(0x00);
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	ce 01       	movw	r24, r28
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN3SPI8transferEh>
	SD_SPI.transfer(0x00);
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	ce 01       	movw	r24, r28
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN3SPI8transferEh>
	SD_SPI.transfer(0x00);
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	ce 01       	movw	r24, r28
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN3SPI8transferEh>
	SD_SPI.transfer(0xFF);
 1d0:	6f ef       	ldi	r22, 0xFF	; 255
 1d2:	ce 01       	movw	r24, r28
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN3SPI8transferEh>
 1da:	18 e0       	ldi	r17, 0x08	; 8
	}
}

uint8_t SDInit(SPI SD_SPI){
	bool spiInit = 0;
	bool sdInit = 0;
 1dc:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i = 0;i<8;i++)
	{
		
		if (SD.transfer(0xFF) == 0x01)
		{
			sdInit = 1;
 1de:	ee 24       	eor	r14, r14
 1e0:	e3 94       	inc	r14
	SD_SPI.transfer(0xFF);
	
	for (uint8_t i = 0;i<8;i++)
	{
		
		if (SD.transfer(0xFF) == 0x01)
 1e2:	6f ef       	ldi	r22, 0xFF	; 255
 1e4:	8d e5       	ldi	r24, 0x5D	; 93
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN3SPI8transferEh>
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <_Z6SDInit3SPI+0xea>
		{
			sdInit = 1;
 1f0:	0e 2d       	mov	r16, r14
 1f2:	11 50       	subi	r17, 0x01	; 1
	SD_SPI.transfer(0x00);
	SD_SPI.transfer(0x00);
	SD_SPI.transfer(0x00);
	SD_SPI.transfer(0xFF);
	
	for (uint8_t i = 0;i<8;i++)
 1f4:	b1 f7       	brne	.-20     	; 0x1e2 <_Z6SDInit3SPI+0xda>
		{
			sdInit = 1;
		}
	}
	
	return spiInit | (sdInit<<1);
 1f6:	80 2f       	mov	r24, r16
 1f8:	88 0f       	add	r24, r24
}
 1fa:	8f 29       	or	r24, r15
 1fc:	0f 90       	pop	r0
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	ff 90       	pop	r15
 208:	ef 90       	pop	r14
 20a:	08 95       	ret

0000020c <_Z10SD_commandhmhm>:
void SD_command(unsigned char cmd, unsigned long arg, unsigned char crc, uint32_t read) {
 20c:	4f 92       	push	r4
 20e:	5f 92       	push	r5
 210:	6f 92       	push	r6
 212:	7f 92       	push	r7
 214:	8f 92       	push	r8
 216:	9f 92       	push	r9
 218:	af 92       	push	r10
 21a:	bf 92       	push	r11
 21c:	cf 92       	push	r12
 21e:	df 92       	push	r13
 220:	ef 92       	push	r14
 222:	ff 92       	push	r15
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	c8 2e       	mov	r12, r24
 22a:	2a 01       	movw	r4, r20
 22c:	3b 01       	movw	r6, r22
 22e:	d2 2e       	mov	r13, r18
 230:	47 01       	movw	r8, r14
 232:	58 01       	movw	r10, r16
	
	
	SD.beginTransmission();
 234:	8d e5       	ldi	r24, 0x5D	; 93
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN3SPI17beginTransmissionEv>
	SD.transfer(cmd);
 23c:	6c 2d       	mov	r22, r12
 23e:	8d e5       	ldi	r24, 0x5D	; 93
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN3SPI8transferEh>
	SD.transfer(arg>>24);
 246:	67 2d       	mov	r22, r7
 248:	77 27       	eor	r23, r23
 24a:	88 27       	eor	r24, r24
 24c:	99 27       	eor	r25, r25
 24e:	8d e5       	ldi	r24, 0x5D	; 93
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN3SPI8transferEh>
	SD.transfer(arg>>16);
 256:	b3 01       	movw	r22, r6
 258:	88 27       	eor	r24, r24
 25a:	99 27       	eor	r25, r25
 25c:	8d e5       	ldi	r24, 0x5D	; 93
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN3SPI8transferEh>
	SD.transfer(arg>>8);
 264:	99 27       	eor	r25, r25
 266:	87 2d       	mov	r24, r7
 268:	76 2d       	mov	r23, r6
 26a:	65 2d       	mov	r22, r5
 26c:	8d e5       	ldi	r24, 0x5D	; 93
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN3SPI8transferEh>
	SD.transfer(arg);
 274:	64 2d       	mov	r22, r4
 276:	8d e5       	ldi	r24, 0x5D	; 93
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN3SPI8transferEh>
	SD.transfer(crc);
 27e:	6d 2d       	mov	r22, r13
 280:	8d e5       	ldi	r24, 0x5D	; 93
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN3SPI8transferEh>
	
	for(uint32_t i = 0; i<read; i++){
 288:	ef 28       	or	r14, r15
 28a:	e0 2a       	or	r14, r16
 28c:	e1 2a       	or	r14, r17
 28e:	e1 f0       	breq	.+56     	; 0x2c8 <_Z10SD_commandhmhm+0xbc>
 290:	c1 2c       	mov	r12, r1
 292:	d1 2c       	mov	r13, r1
 294:	76 01       	movw	r14, r12
		Serial.PutHex(SD.transfer(0xFF));
 296:	6f ef       	ldi	r22, 0xFF	; 255
 298:	8d e5       	ldi	r24, 0x5D	; 93
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN3SPI8transferEh>
 2a0:	68 2f       	mov	r22, r24
 2a2:	8c e5       	ldi	r24, 0x5C	; 92
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN4UART6PutHexEh>
		Serial.Transmit(' ');
 2aa:	60 e2       	ldi	r22, 0x20	; 32
 2ac:	8c e5       	ldi	r24, 0x5C	; 92
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_ZN4UART8TransmitEh>
	SD.transfer(arg>>16);
	SD.transfer(arg>>8);
	SD.transfer(arg);
	SD.transfer(crc);
	
	for(uint32_t i = 0; i<read; i++){
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	c8 1a       	sub	r12, r24
 2b8:	d8 0a       	sbc	r13, r24
 2ba:	e8 0a       	sbc	r14, r24
 2bc:	f8 0a       	sbc	r15, r24
 2be:	8c 14       	cp	r8, r12
 2c0:	9d 04       	cpc	r9, r13
 2c2:	ae 04       	cpc	r10, r14
 2c4:	bf 04       	cpc	r11, r15
 2c6:	39 f7       	brne	.-50     	; 0x296 <_Z10SD_commandhmhm+0x8a>
		Serial.Transmit(' ');
	}
	
	
	
	SD.endTransmission();
 2c8:	8d e5       	ldi	r24, 0x5D	; 93
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_ZN3SPI15endTransmissionEv>
	
	
}
 2d0:	1f 91       	pop	r17
 2d2:	0f 91       	pop	r16
 2d4:	ff 90       	pop	r15
 2d6:	ef 90       	pop	r14
 2d8:	df 90       	pop	r13
 2da:	cf 90       	pop	r12
 2dc:	bf 90       	pop	r11
 2de:	af 90       	pop	r10
 2e0:	9f 90       	pop	r9
 2e2:	8f 90       	pop	r8
 2e4:	7f 90       	pop	r7
 2e6:	6f 90       	pop	r6
 2e8:	5f 90       	pop	r5
 2ea:	4f 90       	pop	r4
 2ec:	08 95       	ret

000002ee <main>:

uint8_t SDInit(SPI SD_SPI);
void SD_command(unsigned char cmd, unsigned long arg, unsigned char crc, uint32_t read);

int main(void){
	Serial.Init(F_CPU,9600);
 2ee:	00 e8       	ldi	r16, 0x80	; 128
 2f0:	15 e2       	ldi	r17, 0x25	; 37
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	54 e2       	ldi	r21, 0x24	; 36
 2fa:	64 ef       	ldi	r22, 0xF4	; 244
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	8c e5       	ldi	r24, 0x5C	; 92
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_ZN4UART4InitEmm>
	
	Serial.PutCString("sd spi init!\n");
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	71 e0       	ldi	r23, 0x01	; 1
 30a:	8c e5       	ldi	r24, 0x5C	; 92
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	0e 94 1c 02 	call	0x438	; 0x438 <_ZN4UART10PutCStringEPKc>
	switch(SDInit(SD)){
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0e 94 84 00 	call	0x108	; 0x108 <_Z6SDInit3SPI>
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	69 f0       	breq	.+26     	; 0x336 <main+0x48>
 31c:	28 f0       	brcs	.+10     	; 0x328 <main+0x3a>
 31e:	82 30       	cpi	r24, 0x02	; 2
 320:	89 f0       	breq	.+34     	; 0x344 <main+0x56>
 322:	83 30       	cpi	r24, 0x03	; 3
 324:	b1 f0       	breq	.+44     	; 0x352 <main+0x64>
 326:	1b c0       	rjmp	.+54     	; 0x35e <main+0x70>
		case 0:
		Serial.PutCString("init failed\n");
 328:	61 e1       	ldi	r22, 0x11	; 17
 32a:	71 e0       	ldi	r23, 0x01	; 1
 32c:	8c e5       	ldi	r24, 0x5C	; 92
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 1c 02 	call	0x438	; 0x438 <_ZN4UART10PutCStringEPKc>
		break;
 334:	14 c0       	rjmp	.+40     	; 0x35e <main+0x70>
		case 1:
		Serial.PutCString("sd init failed\n");
 336:	6e e0       	ldi	r22, 0x0E	; 14
 338:	71 e0       	ldi	r23, 0x01	; 1
 33a:	8c e5       	ldi	r24, 0x5C	; 92
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	0e 94 1c 02 	call	0x438	; 0x438 <_ZN4UART10PutCStringEPKc>
		break;
 342:	0d c0       	rjmp	.+26     	; 0x35e <main+0x70>
		case 2:
		Serial.PutCString("spi init failed\n");
 344:	6e e1       	ldi	r22, 0x1E	; 30
 346:	71 e0       	ldi	r23, 0x01	; 1
 348:	8c e5       	ldi	r24, 0x5C	; 92
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	0e 94 1c 02 	call	0x438	; 0x438 <_ZN4UART10PutCStringEPKc>
		break;
 350:	06 c0       	rjmp	.+12     	; 0x35e <main+0x70>
		case 3:
		Serial.PutCString("succes!\n");
 352:	6f e2       	ldi	r22, 0x2F	; 47
 354:	71 e0       	ldi	r23, 0x01	; 1
 356:	8c e5       	ldi	r24, 0x5C	; 92
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	0e 94 1c 02 	call	0x438	; 0x438 <_ZN4UART10PutCStringEPKc>
		break;
	}
	Serial.PutCString("set transfer size\n");
 35e:	68 e3       	ldi	r22, 0x38	; 56
 360:	71 e0       	ldi	r23, 0x01	; 1
 362:	8c e5       	ldi	r24, 0x5C	; 92
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	0e 94 1c 02 	call	0x438	; 0x438 <_ZN4UART10PutCStringEPKc>
	SD_command(0x50,0x0200,0xFF,8);
 36a:	18 e0       	ldi	r17, 0x08	; 8
 36c:	e1 2e       	mov	r14, r17
 36e:	f1 2c       	mov	r15, r1
 370:	00 e0       	ldi	r16, 0x00	; 0
 372:	10 e0       	ldi	r17, 0x00	; 0
 374:	2f ef       	ldi	r18, 0xFF	; 255
 376:	40 e0       	ldi	r20, 0x00	; 0
 378:	52 e0       	ldi	r21, 0x02	; 2
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	80 e5       	ldi	r24, 0x50	; 80
 380:	0e 94 06 01 	call	0x20c	; 0x20c <_Z10SD_commandhmhm>
	Serial.PutCString("read sector\n");
 384:	6b e4       	ldi	r22, 0x4B	; 75
 386:	71 e0       	ldi	r23, 0x01	; 1
 388:	8c e5       	ldi	r24, 0x5C	; 92
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 1c 02 	call	0x438	; 0x438 <_ZN4UART10PutCStringEPKc>
	SD_command(0x51,10,0xFF,10000);
 390:	10 e1       	ldi	r17, 0x10	; 16
 392:	e1 2e       	mov	r14, r17
 394:	17 e2       	ldi	r17, 0x27	; 39
 396:	f1 2e       	mov	r15, r17
 398:	00 e0       	ldi	r16, 0x00	; 0
 39a:	10 e0       	ldi	r17, 0x00	; 0
 39c:	2f ef       	ldi	r18, 0xFF	; 255
 39e:	4a e0       	ldi	r20, 0x0A	; 10
 3a0:	50 e0       	ldi	r21, 0x00	; 0
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	81 e5       	ldi	r24, 0x51	; 81
 3a8:	0e 94 06 01 	call	0x20c	; 0x20c <_Z10SD_commandhmhm>
 3ac:	ff cf       	rjmp	.-2      	; 0x3ac <main+0xbe>

000003ae <_GLOBAL__sub_I_SD>:
#include <string.h>

#include "SimpleUart.h"
#include "SPI.h"

SPI SD = SPI(&DDRD,&PORTD,4);
 3ae:	24 e0       	ldi	r18, 0x04	; 4
 3b0:	4b e2       	ldi	r20, 0x2B	; 43
 3b2:	50 e0       	ldi	r21, 0x00	; 0
 3b4:	6a e2       	ldi	r22, 0x2A	; 42
 3b6:	70 e0       	ldi	r23, 0x00	; 0
 3b8:	8d e5       	ldi	r24, 0x5D	; 93
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN3SPIC1EPVhS1_h>
UART Serial = UART();
 3c0:	8c e5       	ldi	r24, 0x5C	; 92
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN4UARTC1Ev>
 3c8:	08 95       	ret

000003ca <_ZN4UARTC1Ev>:
	sprintf(str, "%u", input);
	for (uint8_t i = 0;i<sizeof(str)-1;i++)
	{
		Transmit(str[i]);
	}
}
 3ca:	08 95       	ret

000003cc <_ZN4UART4InitEmm>:
 3cc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 3d0:	88 e0       	ldi	r24, 0x08	; 8
 3d2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 3d6:	88 e1       	ldi	r24, 0x18	; 24
 3d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 3dc:	86 e0       	ldi	r24, 0x06	; 6
 3de:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 3e2:	08 95       	ret

000003e4 <_ZN4UART8TransmitEh>:
 3e4:	e0 ec       	ldi	r30, 0xC0	; 192
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	85 ff       	sbrs	r24, 5
 3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <_ZN4UART8TransmitEh+0x4>
 3ee:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3f2:	08 95       	ret

000003f4 <_ZN4UART6PutHexEh>:
void UART::PutHex(uint8_t data){
 3f4:	0f 93       	push	r16
 3f6:	1f 93       	push	r17
 3f8:	cf 93       	push	r28
 3fa:	8c 01       	movw	r16, r24
	uint8_t char1 = (data >> 4) & 0x0F;
 3fc:	96 2f       	mov	r25, r22
 3fe:	92 95       	swap	r25
 400:	9f 70       	andi	r25, 0x0F	; 15
	uint8_t char2 = (data & 0x0F);
 402:	86 2f       	mov	r24, r22
 404:	8f 70       	andi	r24, 0x0F	; 15
	if (char1 >= 0x0A) char1 += 55;
 406:	9a 30       	cpi	r25, 0x0A	; 10
 408:	18 f0       	brcs	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40a:	67 e3       	ldi	r22, 0x37	; 55
 40c:	69 0f       	add	r22, r25
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	else char1 += 48;
 410:	60 e3       	ldi	r22, 0x30	; 48
 412:	69 0f       	add	r22, r25
	if (char2 >= 0x0A) char2 += 55;
 414:	8a 30       	cpi	r24, 0x0A	; 10
 416:	18 f0       	brcs	.+6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 418:	c7 e3       	ldi	r28, 0x37	; 55
 41a:	c8 0f       	add	r28, r24
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	else char2 += 48;
 41e:	c0 e3       	ldi	r28, 0x30	; 48
 420:	c8 0f       	add	r28, r24
	Transmit(char1);
 422:	c8 01       	movw	r24, r16
 424:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_ZN4UART8TransmitEh>
	Transmit(char2);
 428:	6c 2f       	mov	r22, r28
 42a:	c8 01       	movw	r24, r16
 42c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_ZN4UART8TransmitEh>
	
}
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	08 95       	ret

00000438 <_ZN4UART10PutCStringEPKc>:
 void UART::PutCString(const char* str){
 438:	4f 92       	push	r4
 43a:	5f 92       	push	r5
 43c:	6f 92       	push	r6
 43e:	7f 92       	push	r7
 440:	8f 92       	push	r8
 442:	9f 92       	push	r9
 444:	af 92       	push	r10
 446:	bf 92       	push	r11
 448:	cf 92       	push	r12
 44a:	df 92       	push	r13
 44c:	ef 92       	push	r14
 44e:	ff 92       	push	r15
 450:	0f 93       	push	r16
 452:	1f 93       	push	r17
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	cd b7       	in	r28, 0x3d	; 61
 45a:	de b7       	in	r29, 0x3e	; 62
 45c:	7c 01       	movw	r14, r24
	 
	 for (uint32_t i = 0;i<sizeof(message)-1;i++)
	 {
		 Transmit(message[i]);
	 }
 45e:	cd b6       	in	r12, 0x3d	; 61
 460:	de b6       	in	r13, 0x3e	; 62
	Transmit(char2);
	
}
 void UART::PutCString(const char* str){
	 
	 char message[strlen(str)+1];
 462:	fb 01       	movw	r30, r22
 464:	01 90       	ld	r0, Z+
 466:	00 20       	and	r0, r0
 468:	e9 f7       	brne	.-6      	; 0x464 <_ZN4UART10PutCStringEPKc+0x2c>
 46a:	31 97       	sbiw	r30, 0x01	; 1
 46c:	4f 01       	movw	r8, r30
 46e:	86 1a       	sub	r8, r22
 470:	97 0a       	sbc	r9, r23
 472:	c4 01       	movw	r24, r8
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	2d b7       	in	r18, 0x3d	; 61
 478:	3e b7       	in	r19, 0x3e	; 62
 47a:	28 1b       	sub	r18, r24
 47c:	39 0b       	sbc	r19, r25
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	f8 94       	cli
 482:	3e bf       	out	0x3e, r19	; 62
 484:	0f be       	out	0x3f, r0	; 63
 486:	2d bf       	out	0x3d, r18	; 61
 488:	0d b7       	in	r16, 0x3d	; 61
 48a:	1e b7       	in	r17, 0x3e	; 62
 48c:	0f 5f       	subi	r16, 0xFF	; 255
 48e:	1f 4f       	sbci	r17, 0xFF	; 255
	 strcpy (message,str);
 490:	c8 01       	movw	r24, r16
 492:	0e 94 ef 02 	call	0x5de	; 0x5de <strcpy>
	 message[sizeof(message)-1] = '\0';
 496:	f8 01       	movw	r30, r16
 498:	e8 0d       	add	r30, r8
 49a:	f9 1d       	adc	r31, r9
 49c:	10 82       	st	Z, r1
	 
	 for (uint32_t i = 0;i<sizeof(message)-1;i++)
 49e:	a1 2c       	mov	r10, r1
 4a0:	b1 2c       	mov	r11, r1
 4a2:	81 14       	cp	r8, r1
 4a4:	91 04       	cpc	r9, r1
 4a6:	a1 04       	cpc	r10, r1
 4a8:	b1 04       	cpc	r11, r1
 4aa:	99 f0       	breq	.+38     	; 0x4d2 <_ZN4UART10PutCStringEPKc+0x9a>
 4ac:	41 2c       	mov	r4, r1
 4ae:	51 2c       	mov	r5, r1
 4b0:	32 01       	movw	r6, r4
	 {
		 Transmit(message[i]);
 4b2:	f8 01       	movw	r30, r16
 4b4:	61 91       	ld	r22, Z+
 4b6:	8f 01       	movw	r16, r30
 4b8:	c7 01       	movw	r24, r14
 4ba:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_ZN4UART8TransmitEh>
	 
	 char message[strlen(str)+1];
	 strcpy (message,str);
	 message[sizeof(message)-1] = '\0';
	 
	 for (uint32_t i = 0;i<sizeof(message)-1;i++)
 4be:	ff ef       	ldi	r31, 0xFF	; 255
 4c0:	4f 1a       	sub	r4, r31
 4c2:	5f 0a       	sbc	r5, r31
 4c4:	6f 0a       	sbc	r6, r31
 4c6:	7f 0a       	sbc	r7, r31
 4c8:	48 14       	cp	r4, r8
 4ca:	59 04       	cpc	r5, r9
 4cc:	6a 04       	cpc	r6, r10
 4ce:	7b 04       	cpc	r7, r11
 4d0:	80 f3       	brcs	.-32     	; 0x4b2 <_ZN4UART10PutCStringEPKc+0x7a>
	 {
		 Transmit(message[i]);
	 }
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	f8 94       	cli
 4d6:	de be       	out	0x3e, r13	; 62
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	cd be       	out	0x3d, r12	; 61
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	1f 91       	pop	r17
 4e2:	0f 91       	pop	r16
 4e4:	ff 90       	pop	r15
 4e6:	ef 90       	pop	r14
 4e8:	df 90       	pop	r13
 4ea:	cf 90       	pop	r12
 4ec:	bf 90       	pop	r11
 4ee:	af 90       	pop	r10
 4f0:	9f 90       	pop	r9
 4f2:	8f 90       	pop	r8
 4f4:	7f 90       	pop	r7
 4f6:	6f 90       	pop	r6
 4f8:	5f 90       	pop	r5
 4fa:	4f 90       	pop	r4
 4fc:	08 95       	ret

000004fe <_ZN3SPIC1EPVhS1_h>:
void SPI::transmit32(uint32_t l){
	transmit((l) >> 24);
	transmit((l) >> 16);
	transmit((l) >> 8);
	transmit(l);
}
 4fe:	70 93 62 01 	sts	0x0162, r23	; 0x800162 <CS_stateReg+0x1>
 502:	60 93 61 01 	sts	0x0161, r22	; 0x800161 <CS_stateReg>
 506:	50 93 60 01 	sts	0x0160, r21	; 0x800160 <CS_portReg+0x1>
 50a:	40 93 5f 01 	sts	0x015F, r20	; 0x80015f <CS_portReg>
 50e:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <CS_pinNumber>
 512:	08 95       	ret

00000514 <_ZN3SPI4initEv>:
void SPI::init(){
	//set cs port to output
	DDRB |= (1<<PORTB2);
 514:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<PORTB2);
 516:	2a 9a       	sbi	0x05, 2	; 5
	
	//set cs port settings
	*CS_stateReg |= (1 << CS_pinNumber);
 518:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <CS_pinNumber>
 51c:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <CS_stateReg>
 520:	f0 91 62 01 	lds	r31, 0x0162	; 0x800162 <CS_stateReg+0x1>
 524:	40 81       	ld	r20, Z
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	bc 01       	movw	r22, r24
 52c:	02 c0       	rjmp	.+4      	; 0x532 <_ZN3SPI4initEv+0x1e>
 52e:	66 0f       	add	r22, r22
 530:	77 1f       	adc	r23, r23
 532:	2a 95       	dec	r18
 534:	e2 f7       	brpl	.-8      	; 0x52e <_ZN3SPI4initEv+0x1a>
 536:	9b 01       	movw	r18, r22
 538:	24 2b       	or	r18, r20
 53a:	20 83       	st	Z, r18
	*CS_portReg &= ~(1 << CS_pinNumber);
 53c:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <CS_pinNumber>
 540:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <CS_portReg>
 544:	f0 91 60 01 	lds	r31, 0x0160	; 0x800160 <CS_portReg+0x1>
 548:	20 81       	ld	r18, Z
 54a:	02 c0       	rjmp	.+4      	; 0x550 <_ZN3SPI4initEv+0x3c>
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	3a 95       	dec	r19
 552:	e2 f7       	brpl	.-8      	; 0x54c <_ZN3SPI4initEv+0x38>
 554:	80 95       	com	r24
 556:	90 95       	com	r25
 558:	82 23       	and	r24, r18
 55a:	80 83       	st	Z, r24
	
	
	
	/* Set SS, MOSI and SCK output, all others input */
	DDRB |= (1<<PORTB3)|(1<<PORTB5);
 55c:	84 b1       	in	r24, 0x04	; 4
 55e:	88 62       	ori	r24, 0x28	; 40
 560:	84 b9       	out	0x04, r24	; 4
	// set miso to input
	DDRB &= ~(1<<PORTB4);
 562:	24 98       	cbi	0x04, 4	; 4
	/* Enable SPI, Master, set clock rate fck/4 enable interrupt */
	SPCR |= (1<<SPE)|(1<<MSTR);
 564:	8c b5       	in	r24, 0x2c	; 44
 566:	80 65       	ori	r24, 0x50	; 80
 568:	8c bd       	out	0x2c, r24	; 44
	SPSR &= ~(1 << SPI2X);
 56a:	8d b5       	in	r24, 0x2d	; 45
 56c:	8e 7f       	andi	r24, 0xFE	; 254
 56e:	8d bd       	out	0x2d, r24	; 45
	SPCR |= (1 << SPR0);
 570:	8c b5       	in	r24, 0x2c	; 44
 572:	81 60       	ori	r24, 0x01	; 1
 574:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1 << SPR1);
 576:	8c b5       	in	r24, 0x2c	; 44
 578:	82 60       	ori	r24, 0x02	; 2
 57a:	8c bd       	out	0x2c, r24	; 44
 57c:	08 95       	ret

0000057e <_ZN3SPI17beginTransmissionEv>:
	//enable interrupts for data transfer
	//sei();
}
void SPI::beginTransmission(){
	//set chip select to low (active) for this spi instance
	*CS_portReg &= ~(1 << CS_pinNumber);
 57e:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <CS_pinNumber>
 582:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <CS_portReg>
 586:	f0 91 60 01 	lds	r31, 0x0160	; 0x800160 <CS_portReg+0x1>
 58a:	20 81       	ld	r18, Z
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	02 c0       	rjmp	.+4      	; 0x596 <_ZN3SPI17beginTransmissionEv+0x18>
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	3a 95       	dec	r19
 598:	e2 f7       	brpl	.-8      	; 0x592 <_ZN3SPI17beginTransmissionEv+0x14>
 59a:	80 95       	com	r24
 59c:	90 95       	com	r25
 59e:	82 23       	and	r24, r18
 5a0:	80 83       	st	Z, r24
 5a2:	08 95       	ret

000005a4 <_ZN3SPI15endTransmissionEv>:
}
void SPI::endTransmission(){
	//set chip select to HIGH (deaf) for this spi instance
	
	*CS_portReg |= (1 << CS_pinNumber);
 5a4:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <CS_pinNumber>
 5a8:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <CS_portReg>
 5ac:	f0 91 60 01 	lds	r31, 0x0160	; 0x800160 <CS_portReg+0x1>
 5b0:	20 81       	ld	r18, Z
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <_ZN3SPI15endTransmissionEv+0x18>
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	3a 95       	dec	r19
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <_ZN3SPI15endTransmissionEv+0x14>
 5c0:	82 2b       	or	r24, r18
 5c2:	80 83       	st	Z, r24
 5c4:	08 95       	ret

000005c6 <_ZN3SPI8transferEh>:
}
uint8_t SPI::transfer(uint8_t out){
	/* Start transmission */
	SPDR = out;
 5c6:	6e bd       	out	0x2e, r22	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))	;
 5c8:	0d b4       	in	r0, 0x2d	; 45
 5ca:	07 fe       	sbrs	r0, 7
 5cc:	fd cf       	rjmp	.-6      	; 0x5c8 <_ZN3SPI8transferEh+0x2>
	//read data
	return SPDR;
 5ce:	8e b5       	in	r24, 0x2e	; 46
}
 5d0:	08 95       	ret

000005d2 <__tablejump2__>:
 5d2:	ee 0f       	add	r30, r30
 5d4:	ff 1f       	adc	r31, r31
 5d6:	05 90       	lpm	r0, Z+
 5d8:	f4 91       	lpm	r31, Z
 5da:	e0 2d       	mov	r30, r0
 5dc:	09 94       	ijmp

000005de <strcpy>:
 5de:	fb 01       	movw	r30, r22
 5e0:	dc 01       	movw	r26, r24
 5e2:	01 90       	ld	r0, Z+
 5e4:	0d 92       	st	X+, r0
 5e6:	00 20       	and	r0, r0
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <strcpy+0x4>
 5ea:	08 95       	ret

000005ec <_exit>:
 5ec:	f8 94       	cli

000005ee <__stop_program>:
 5ee:	ff cf       	rjmp	.-2      	; 0x5ee <__stop_program>
