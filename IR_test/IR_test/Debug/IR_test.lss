
IR_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000e28  00000ebc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000072  00800126  00800126  00000ee2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ee2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010e3  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c0  00000000  00000000  00002133  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000926  00000000  00000000  00002af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  0000341c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000613  00000000  00000000  000036d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a8a  00000000  00000000  00003ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004771  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 2b 03 	jmp	0x656	; 0x656 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__vector_8>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e2       	ldi	r30, 0x28	; 40
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 32       	cpi	r26, 0x26	; 38
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e2       	ldi	r26, 0x26	; 38
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 39       	cpi	r26, 0x98	; 152
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 12 07 	jmp	0xe24	; 0xe24 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
bool sending = 0;
char message[] = "hello infrared!\n";

int main(void)
{
	USART_Init(MYUBRR);
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 c6 03 	call	0x78c	; 0x78c <USART_Init>
	IR_Init(38,38);
  ae:	66 e2       	ldi	r22, 0x26	; 38
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	86 e2       	ldi	r24, 0x26	; 38
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 8f 00 	call	0x11e	; 0x11e <IR_Init>
  ba:	01 e1       	ldi	r16, 0x11	; 17
  bc:	11 e0       	ldi	r17, 0x01	; 1

	
	/* Replace with your application code */
	while (1)
	{
		if (sending)
  be:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
  c2:	88 23       	and	r24, r24
  c4:	c1 f0       	breq	.+48     	; 0xf6 <main+0x50>
  c6:	c0 e0       	ldi	r28, 0x00	; 0
  c8:	d1 e0       	ldi	r29, 0x01	; 1
		{
			for (int i = 0;i<sizeof(message);i++)
			{
				IR_Transmit(message[i]);
  ca:	89 91       	ld	r24, Y+
  cc:	0e 94 90 01 	call	0x320	; 0x320 <IR_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	8f e3       	ldi	r24, 0x3F	; 63
  d2:	9c e9       	ldi	r25, 0x9C	; 156
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x2e>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x34>
  da:	00 00       	nop
	/* Replace with your application code */
	while (1)
	{
		if (sending)
		{
			for (int i = 0;i<sizeof(message);i++)
  dc:	0c 17       	cp	r16, r28
  de:	1d 07       	cpc	r17, r29
  e0:	a1 f7       	brne	.-24     	; 0xca <main+0x24>
  e2:	9f ef       	ldi	r25, 0xFF	; 255
  e4:	29 e6       	ldi	r18, 0x69	; 105
  e6:	88 e1       	ldi	r24, 0x18	; 24
  e8:	91 50       	subi	r25, 0x01	; 1
  ea:	20 40       	sbci	r18, 0x00	; 0
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x42>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x4c>
  f2:	00 00       	nop
  f4:	e4 cf       	rjmp	.-56     	; 0xbe <main+0x18>
				_delay_ms(10);
			}
			_delay_ms(500);
		}
		else{
			if (raw)
  f6:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <raw>
  fa:	88 23       	and	r24, r24
  fc:	39 f0       	breq	.+14     	; 0x10c <main+0x66>
			{
				
				if (IR_rawAvailable())
  fe:	0e 94 8d 01 	call	0x31a	; 0x31a <IR_rawAvailable>
 102:	88 23       	and	r24, r24
 104:	e1 f2       	breq	.-72     	; 0xbe <main+0x18>
				{
					IR_printRaw();
 106:	0e 94 6d 01 	call	0x2da	; 0x2da <IR_printRaw>
 10a:	d9 cf       	rjmp	.-78     	; 0xbe <main+0x18>
				}
			}
			else{
				if (IR_Available())
 10c:	0e 94 8a 01 	call	0x314	; 0x314 <IR_Available>
 110:	88 23       	and	r24, r24
 112:	a9 f2       	breq	.-86     	; 0xbe <main+0x18>
				{
					
					USART_Transmit(IR_Recieve());
 114:	0e 94 55 01 	call	0x2aa	; 0x2aa <IR_Recieve>
 118:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <USART_Transmit>
 11c:	d0 cf       	rjmp	.-96     	; 0xbe <main+0x18>

0000011e <IR_Init>:
USART_PutString(", ");

}
USART_Transmit('\n');

}
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	9c 01       	movw	r18, r24
 128:	53 9a       	sbi	0x0a, 3	; 10
 12a:	e0 eb       	ldi	r30, 0xB0	; 176
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 61       	ori	r24, 0x10	; 16
 132:	80 83       	st	Z, r24
 134:	80 81       	ld	r24, Z
 136:	8f 7d       	andi	r24, 0xDF	; 223
 138:	80 83       	st	Z, r24
 13a:	80 81       	ld	r24, Z
 13c:	8e 7f       	andi	r24, 0xFE	; 254
 13e:	80 83       	st	Z, r24
 140:	90 81       	ld	r25, Z
 142:	9d 7f       	andi	r25, 0xFD	; 253
 144:	90 83       	st	Z, r25
 146:	e1 eb       	ldi	r30, 0xB1	; 177
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	90 81       	ld	r25, Z
 14c:	97 7f       	andi	r25, 0xF7	; 247
 14e:	90 83       	st	Z, r25
 150:	90 81       	ld	r25, Z
 152:	91 60       	ori	r25, 0x01	; 1
 154:	90 83       	st	Z, r25
 156:	90 81       	ld	r25, Z
 158:	9d 7f       	andi	r25, 0xFD	; 253
 15a:	90 83       	st	Z, r25
 15c:	90 81       	ld	r25, Z
 15e:	9b 7f       	andi	r25, 0xFB	; 251
 160:	90 83       	st	Z, r25
 162:	26 32       	cpi	r18, 0x26	; 38
 164:	31 05       	cpc	r19, r1
 166:	99 f4       	brne	.+38     	; 0x18e <IR_Init+0x70>
 168:	80 ec       	ldi	r24, 0xC0	; 192
 16a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 16e:	e0 e7       	ldi	r30, 0x70	; 112
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	84 60       	ori	r24, 0x04	; 4
 176:	80 83       	st	Z, r24
 178:	e9 e6       	ldi	r30, 0x69	; 105
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	82 60       	ori	r24, 0x02	; 2
 180:	80 83       	st	Z, r24
 182:	e8 9a       	sbi	0x1d, 0	; 29
 184:	66 32       	cpi	r22, 0x26	; 38
 186:	71 05       	cpc	r23, r1
 188:	09 f0       	breq	.+2      	; 0x18c <IR_Init+0x6e>
 18a:	86 c0       	rjmp	.+268    	; 0x298 <IR_Init+0x17a>
 18c:	08 c0       	rjmp	.+16     	; 0x19e <IR_Init+0x80>
 18e:	28 33       	cpi	r18, 0x38	; 56
 190:	31 05       	cpc	r19, r1
 192:	09 f0       	breq	.+2      	; 0x196 <IR_Init+0x78>
 194:	71 c0       	rjmp	.+226    	; 0x278 <IR_Init+0x15a>
 196:	8d e7       	ldi	r24, 0x7D	; 125
 198:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 19c:	6d c0       	rjmp	.+218    	; 0x278 <IR_Init+0x15a>
 19e:	e0 e9       	ldi	r30, 0x90	; 144
 1a0:	f1 e0       	ldi	r31, 0x01	; 1
 1a2:	88 e2       	ldi	r24, 0x28	; 40
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	91 83       	std	Z+1, r25	; 0x01
 1a8:	80 83       	st	Z, r24
 1aa:	8c e3       	ldi	r24, 0x3C	; 60
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	93 83       	std	Z+3, r25	; 0x03
 1b0:	82 83       	std	Z+2, r24	; 0x02
 1b2:	80 e5       	ldi	r24, 0x50	; 80
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	95 83       	std	Z+5, r25	; 0x05
 1b8:	84 83       	std	Z+4, r24	; 0x04
 1ba:	84 e6       	ldi	r24, 0x64	; 100
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	97 83       	std	Z+7, r25	; 0x07
 1c0:	86 83       	std	Z+6, r24	; 0x06
 1c2:	45 c0       	rjmp	.+138    	; 0x24e <IR_Init+0x130>
 1c4:	28 33       	cpi	r18, 0x38	; 56
 1c6:	31 05       	cpc	r19, r1
 1c8:	09 f0       	breq	.+2      	; 0x1cc <IR_Init+0xae>
 1ca:	41 c0       	rjmp	.+130    	; 0x24e <IR_Init+0x130>
 1cc:	e0 e9       	ldi	r30, 0x90	; 144
 1ce:	f1 e0       	ldi	r31, 0x01	; 1
 1d0:	8f e3       	ldi	r24, 0x3F	; 63
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	91 83       	std	Z+1, r25	; 0x01
 1d6:	80 83       	st	Z, r24
 1d8:	8e e5       	ldi	r24, 0x5E	; 94
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	93 83       	std	Z+3, r25	; 0x03
 1de:	82 83       	std	Z+2, r24	; 0x02
 1e0:	81 e8       	ldi	r24, 0x81	; 129
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	95 83       	std	Z+5, r25	; 0x05
 1e6:	84 83       	std	Z+4, r24	; 0x04
 1e8:	8e e9       	ldi	r24, 0x9E	; 158
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	97 83       	std	Z+7, r25	; 0x07
 1ee:	86 83       	std	Z+6, r24	; 0x06
 1f0:	2e c0       	rjmp	.+92     	; 0x24e <IR_Init+0x130>
 1f2:	68 33       	cpi	r22, 0x38	; 56
 1f4:	71 05       	cpc	r23, r1
 1f6:	59 f5       	brne	.+86     	; 0x24e <IR_Init+0x130>
 1f8:	26 32       	cpi	r18, 0x26	; 38
 1fa:	31 05       	cpc	r19, r1
 1fc:	99 f4       	brne	.+38     	; 0x224 <IR_Init+0x106>
 1fe:	e0 e9       	ldi	r30, 0x90	; 144
 200:	f1 e0       	ldi	r31, 0x01	; 1
 202:	8e e1       	ldi	r24, 0x1E	; 30
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	91 83       	std	Z+1, r25	; 0x01
 208:	80 83       	st	Z, r24
 20a:	8c e2       	ldi	r24, 0x2C	; 44
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	93 83       	std	Z+3, r25	; 0x03
 210:	82 83       	std	Z+2, r24	; 0x02
 212:	8d e3       	ldi	r24, 0x3D	; 61
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	95 83       	std	Z+5, r25	; 0x05
 218:	84 83       	std	Z+4, r24	; 0x04
 21a:	8a e4       	ldi	r24, 0x4A	; 74
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	97 83       	std	Z+7, r25	; 0x07
 220:	86 83       	std	Z+6, r24	; 0x06
 222:	15 c0       	rjmp	.+42     	; 0x24e <IR_Init+0x130>
 224:	28 33       	cpi	r18, 0x38	; 56
 226:	31 05       	cpc	r19, r1
 228:	91 f4       	brne	.+36     	; 0x24e <IR_Init+0x130>
 22a:	e0 e9       	ldi	r30, 0x90	; 144
 22c:	f1 e0       	ldi	r31, 0x01	; 1
 22e:	8f e2       	ldi	r24, 0x2F	; 47
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	91 83       	std	Z+1, r25	; 0x01
 234:	80 83       	st	Z, r24
 236:	86 e4       	ldi	r24, 0x46	; 70
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	93 83       	std	Z+3, r25	; 0x03
 23c:	82 83       	std	Z+2, r24	; 0x02
 23e:	80 e6       	ldi	r24, 0x60	; 96
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	95 83       	std	Z+5, r25	; 0x05
 244:	84 83       	std	Z+4, r24	; 0x04
 246:	86 e7       	ldi	r24, 0x76	; 118
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	97 83       	std	Z+7, r25	; 0x07
 24c:	86 83       	std	Z+6, r24	; 0x06
 24e:	c0 e9       	ldi	r28, 0x90	; 144
 250:	d1 e0       	ldi	r29, 0x01	; 1
 252:	08 e9       	ldi	r16, 0x98	; 152
 254:	11 e0       	ldi	r17, 0x01	; 1
 256:	89 91       	ld	r24, Y+
 258:	99 91       	ld	r25, Y+
 25a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <USART_PutInt>
 25e:	81 e1       	ldi	r24, 0x11	; 17
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <USART_PutString>
 266:	c0 17       	cp	r28, r16
 268:	d1 07       	cpc	r29, r17
 26a:	a9 f7       	brne	.-22     	; 0x256 <IR_Init+0x138>
 26c:	84 e1       	ldi	r24, 0x14	; 20
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <USART_PutString>
 274:	78 94       	sei
 276:	14 c0       	rjmp	.+40     	; 0x2a0 <IR_Init+0x182>
 278:	e0 e7       	ldi	r30, 0x70	; 112
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	84 60       	ori	r24, 0x04	; 4
 280:	80 83       	st	Z, r24
 282:	e9 e6       	ldi	r30, 0x69	; 105
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	82 60       	ori	r24, 0x02	; 2
 28a:	80 83       	st	Z, r24
 28c:	e8 9a       	sbi	0x1d, 0	; 29
 28e:	66 32       	cpi	r22, 0x26	; 38
 290:	71 05       	cpc	r23, r1
 292:	09 f0       	breq	.+2      	; 0x296 <IR_Init+0x178>
 294:	ae cf       	rjmp	.-164    	; 0x1f2 <IR_Init+0xd4>
 296:	96 cf       	rjmp	.-212    	; 0x1c4 <IR_Init+0xa6>
 298:	68 33       	cpi	r22, 0x38	; 56
 29a:	71 05       	cpc	r23, r1
 29c:	c1 f6       	brne	.-80     	; 0x24e <IR_Init+0x130>
 29e:	af cf       	rjmp	.-162    	; 0x1fe <IR_Init+0xe0>
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	08 95       	ret

000002aa <IR_Recieve>:
 2aa:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <irAvaliable>
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	50 e0       	ldi	r21, 0x00	; 0
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	ba 01       	movw	r22, r20
 2b6:	6f 5f       	subi	r22, 0xFF	; 255
 2b8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ba:	fb 01       	movw	r30, r22
 2bc:	e5 59       	subi	r30, 0x95	; 149
 2be:	fe 4f       	sbci	r31, 0xFE	; 254
 2c0:	20 81       	ld	r18, Z
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <IR_Recieve+0x20>
 2c6:	22 0f       	add	r18, r18
 2c8:	33 1f       	adc	r19, r19
 2ca:	4a 95       	dec	r20
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <IR_Recieve+0x1c>
 2ce:	82 2b       	or	r24, r18
 2d0:	ab 01       	movw	r20, r22
 2d2:	68 30       	cpi	r22, 0x08	; 8
 2d4:	71 05       	cpc	r23, r1
 2d6:	71 f7       	brne	.-36     	; 0x2b4 <IR_Recieve+0xa>
 2d8:	08 95       	ret

000002da <IR_printRaw>:
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	c0 e0       	ldi	r28, 0x00	; 0
 2e0:	d0 e0       	ldi	r29, 0x00	; 0
 2e2:	fe 01       	movw	r30, r28
 2e4:	ee 0f       	add	r30, r30
 2e6:	ff 1f       	adc	r31, r31
 2e8:	e6 58       	subi	r30, 0x86	; 134
 2ea:	fe 4f       	sbci	r31, 0xFE	; 254
 2ec:	80 81       	ld	r24, Z
 2ee:	91 81       	ldd	r25, Z+1	; 0x01
 2f0:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <USART_PutInt>
 2f4:	81 e1       	ldi	r24, 0x11	; 17
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <USART_PutString>
 2fc:	21 96       	adiw	r28, 0x01	; 1
 2fe:	cb 30       	cpi	r28, 0x0B	; 11
 300:	d1 05       	cpc	r29, r1
 302:	79 f7       	brne	.-34     	; 0x2e2 <IR_printRaw+0x8>
 304:	8a e0       	ldi	r24, 0x0A	; 10
 306:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <USART_Transmit>
 30a:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <rawNew>
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <IR_Available>:

bool IR_Available(){
	return irAvaliable;
 314:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <irAvaliable>
}
 318:	08 95       	ret

0000031a <IR_rawAvailable>:

bool IR_rawAvailable(){
	return rawNew;
 31a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <rawNew>
}
 31e:	08 95       	ret

00000320 <IR_Transmit>:
void IR_Transmit(char input){
	sendFrame[0] = 2;
 320:	e4 e5       	ldi	r30, 0x54	; 84
 322:	f1 e0       	ldi	r31, 0x01	; 1
 324:	92 e0       	ldi	r25, 0x02	; 2
 326:	90 83       	st	Z, r25
	uint8_t framePos = 1;
	sendFrame[framePos] = 4;
 328:	94 e0       	ldi	r25, 0x04	; 4
 32a:	91 83       	std	Z+1, r25	; 0x01
	framePos ++;
	for (int i = 0;i<8;i++)
 32c:	20 e0       	ldi	r18, 0x00	; 0
 32e:	30 e0       	ldi	r19, 0x00	; 0
	{
		uint8_t bitState = (input >> i)&1;
		sendFrame[framePos] = bitState;
 330:	68 2f       	mov	r22, r24
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	ab 01       	movw	r20, r22
 336:	02 2e       	mov	r0, r18
 338:	02 c0       	rjmp	.+4      	; 0x33e <IR_Transmit+0x1e>
 33a:	55 95       	asr	r21
 33c:	47 95       	ror	r20
 33e:	0a 94       	dec	r0
 340:	e2 f7       	brpl	.-8      	; 0x33a <IR_Transmit+0x1a>
 342:	41 70       	andi	r20, 0x01	; 1
 344:	42 83       	std	Z+2, r20	; 0x02
		framePos ++;
		sendFrame[framePos] = 4;
 346:	93 83       	std	Z+3, r25	; 0x03
void IR_Transmit(char input){
	sendFrame[0] = 2;
	uint8_t framePos = 1;
	sendFrame[framePos] = 4;
	framePos ++;
	for (int i = 0;i<8;i++)
 348:	2f 5f       	subi	r18, 0xFF	; 255
 34a:	3f 4f       	sbci	r19, 0xFF	; 255
 34c:	32 96       	adiw	r30, 0x02	; 2
 34e:	28 30       	cpi	r18, 0x08	; 8
 350:	31 05       	cpc	r19, r1
 352:	81 f7       	brne	.-32     	; 0x334 <IR_Transmit+0x14>
		sendFrame[framePos] = 4;
		framePos ++;
		
	}
	uint8_t parity = (input & 1);
	sendFrame[framePos] = parity;
 354:	e4 e5       	ldi	r30, 0x54	; 84
 356:	f1 e0       	ldi	r31, 0x01	; 1
 358:	81 70       	andi	r24, 0x01	; 1
 35a:	82 8b       	std	Z+18, r24	; 0x12
	framePos ++;
	sendFrame[framePos] = 4;
 35c:	84 e0       	ldi	r24, 0x04	; 4
 35e:	83 8b       	std	Z+19, r24	; 0x13
	framePos ++;
	sendFrame[framePos] = 3;
 360:	93 e0       	ldi	r25, 0x03	; 3
 362:	94 8b       	std	Z+20, r25	; 0x14
	framePos ++;
	sendFrame[framePos] = 4;
 364:	85 8b       	std	Z+21, r24	; 0x15
	framePos ++;
	sendFrame[framePos] = 0;
 366:	16 8a       	std	Z+22, r1	; 0x16
	newFrame = 1;
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <newFrame+0x1>
 370:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <newFrame>
 374:	08 95       	ret

00000376 <decode>:
	
}
void decode(){
 376:	6f 92       	push	r6
 378:	7f 92       	push	r7
 37a:	8f 92       	push	r8
 37c:	9f 92       	push	r9
 37e:	af 92       	push	r10
 380:	bf 92       	push	r11
 382:	cf 92       	push	r12
 384:	df 92       	push	r13
 386:	ef 92       	push	r14
 388:	ff 92       	push	r15
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
	
	for (int i = 0;i<11;i++)
	{
		int pulsTime = decodeFrame[i];
		if (pulsTime <= (recievelookup[0]+devPos) && pulsTime >= (recievelookup[0]-devNeg))
 392:	80 e9       	ldi	r24, 0x90	; 144
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	dc 01       	movw	r26, r24
 398:	6d 91       	ld	r22, X+
 39a:	7c 91       	ld	r23, X
 39c:	11 97       	sbiw	r26, 0x01	; 1
 39e:	ab 01       	movw	r20, r22
 3a0:	4b 5f       	subi	r20, 0xFB	; 251
 3a2:	5f 4f       	sbci	r21, 0xFF	; 255
 3a4:	65 50       	subi	r22, 0x05	; 5
 3a6:	71 09       	sbc	r23, r1
		{
			frameBuffer[i] = 0;
		}
		else if (pulsTime <= (recievelookup[1]+devPos) && pulsTime >= (recievelookup[1]-devNeg))
 3a8:	12 96       	adiw	r26, 0x02	; 2
 3aa:	0d 90       	ld	r0, X+
 3ac:	bc 91       	ld	r27, X
 3ae:	a0 2d       	mov	r26, r0
 3b0:	fd 01       	movw	r30, r26
 3b2:	35 96       	adiw	r30, 0x05	; 5
 3b4:	3d 01       	movw	r6, r26
 3b6:	25 e0       	ldi	r18, 0x05	; 5
 3b8:	62 1a       	sub	r6, r18
 3ba:	71 08       	sbc	r7, r1
		{
			frameBuffer[i] = 1;
		}
		else if (pulsTime <= (recievelookup[2]+devPos) && pulsTime >= (recievelookup[2]-devNeg))
 3bc:	dc 01       	movw	r26, r24
 3be:	14 96       	adiw	r26, 0x04	; 4
 3c0:	0d 91       	ld	r16, X+
 3c2:	1c 91       	ld	r17, X
 3c4:	15 97       	sbiw	r26, 0x05	; 5
 3c6:	e8 01       	movw	r28, r16
 3c8:	25 96       	adiw	r28, 0x05	; 5
 3ca:	05 50       	subi	r16, 0x05	; 5
 3cc:	11 09       	sbc	r17, r1
		{
			frameBuffer[i] = 2;
		}
		else if (pulsTime <= (recievelookup[3]+devPos) && pulsTime >= (recievelookup[3]-devNeg))
 3ce:	16 96       	adiw	r26, 0x06	; 6
 3d0:	ed 90       	ld	r14, X+
 3d2:	fc 90       	ld	r15, X
 3d4:	17 97       	sbiw	r26, 0x07	; 7
 3d6:	67 01       	movw	r12, r14
 3d8:	b5 e0       	ldi	r27, 0x05	; 5
 3da:	cb 0e       	add	r12, r27
 3dc:	d1 1c       	adc	r13, r1
 3de:	25 e0       	ldi	r18, 0x05	; 5
 3e0:	e2 1a       	sub	r14, r18
 3e2:	f1 08       	sbc	r15, r1
	newFrame = 1;
	
}
void decode(){
	
	for (int i = 0;i<11;i++)
 3e4:	20 e0       	ldi	r18, 0x00	; 0
 3e6:	30 e0       	ldi	r19, 0x00	; 0
		{
			frameBuffer[i] = 3;
		}
		else 
		{
			frameBuffer[i] = 4;
 3e8:	68 94       	set
 3ea:	bb 24       	eor	r11, r11
 3ec:	b2 f8       	bld	r11, 2
		{
			frameBuffer[i] = 2;
		}
		else if (pulsTime <= (recievelookup[3]+devPos) && pulsTime >= (recievelookup[3]-devNeg))
		{
			frameBuffer[i] = 3;
 3ee:	0f 2e       	mov	r0, r31
 3f0:	f3 e0       	ldi	r31, 0x03	; 3
 3f2:	8f 2e       	mov	r8, r31
 3f4:	f0 2d       	mov	r31, r0
		{
			frameBuffer[i] = 1;
		}
		else if (pulsTime <= (recievelookup[2]+devPos) && pulsTime >= (recievelookup[2]-devNeg))
		{
			frameBuffer[i] = 2;
 3f6:	68 94       	set
 3f8:	99 24       	eor	r9, r9
 3fa:	91 f8       	bld	r9, 1
		{
			frameBuffer[i] = 0;
		}
		else if (pulsTime <= (recievelookup[1]+devPos) && pulsTime >= (recievelookup[1]-devNeg))
		{
			frameBuffer[i] = 1;
 3fc:	aa 24       	eor	r10, r10
 3fe:	a3 94       	inc	r10
}
void decode(){
	
	for (int i = 0;i<11;i++)
	{
		int pulsTime = decodeFrame[i];
 400:	c9 01       	movw	r24, r18
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	dc 01       	movw	r26, r24
 408:	a6 5c       	subi	r26, 0xC6	; 198
 40a:	be 4f       	sbci	r27, 0xFE	; 254
 40c:	8d 91       	ld	r24, X+
 40e:	9c 91       	ld	r25, X
		if (pulsTime <= (recievelookup[0]+devPos) && pulsTime >= (recievelookup[0]-devNeg))
 410:	48 17       	cp	r20, r24
 412:	59 07       	cpc	r21, r25
 414:	4c f0       	brlt	.+18     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 416:	86 17       	cp	r24, r22
 418:	97 07       	cpc	r25, r23
 41a:	34 f0       	brlt	.+12     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		{
			frameBuffer[i] = 0;
 41c:	c9 01       	movw	r24, r18
 41e:	85 59       	subi	r24, 0x95	; 149
 420:	9e 4f       	sbci	r25, 0xFE	; 254
 422:	dc 01       	movw	r26, r24
 424:	1c 92       	st	X, r1
 426:	29 c0       	rjmp	.+82     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		}
		else if (pulsTime <= (recievelookup[1]+devPos) && pulsTime >= (recievelookup[1]-devNeg))
 428:	e8 17       	cp	r30, r24
 42a:	f9 07       	cpc	r31, r25
 42c:	4c f0       	brlt	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 42e:	86 15       	cp	r24, r6
 430:	97 05       	cpc	r25, r7
 432:	34 f0       	brlt	.+12     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		{
			frameBuffer[i] = 1;
 434:	c9 01       	movw	r24, r18
 436:	85 59       	subi	r24, 0x95	; 149
 438:	9e 4f       	sbci	r25, 0xFE	; 254
 43a:	dc 01       	movw	r26, r24
 43c:	ac 92       	st	X, r10
 43e:	1d c0       	rjmp	.+58     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		}
		else if (pulsTime <= (recievelookup[2]+devPos) && pulsTime >= (recievelookup[2]-devNeg))
 440:	c8 17       	cp	r28, r24
 442:	d9 07       	cpc	r29, r25
 444:	4c f0       	brlt	.+18     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 446:	80 17       	cp	r24, r16
 448:	91 07       	cpc	r25, r17
 44a:	34 f0       	brlt	.+12     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		{
			frameBuffer[i] = 2;
 44c:	c9 01       	movw	r24, r18
 44e:	85 59       	subi	r24, 0x95	; 149
 450:	9e 4f       	sbci	r25, 0xFE	; 254
 452:	dc 01       	movw	r26, r24
 454:	9c 92       	st	X, r9
 456:	11 c0       	rjmp	.+34     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		}
		else if (pulsTime <= (recievelookup[3]+devPos) && pulsTime >= (recievelookup[3]-devNeg))
 458:	c8 16       	cp	r12, r24
 45a:	d9 06       	cpc	r13, r25
 45c:	4c f0       	brlt	.+18     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 45e:	8e 15       	cp	r24, r14
 460:	9f 05       	cpc	r25, r15
 462:	34 f0       	brlt	.+12     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
		{
			frameBuffer[i] = 3;
 464:	c9 01       	movw	r24, r18
 466:	85 59       	subi	r24, 0x95	; 149
 468:	9e 4f       	sbci	r25, 0xFE	; 254
 46a:	dc 01       	movw	r26, r24
 46c:	8c 92       	st	X, r8
 46e:	05 c0       	rjmp	.+10     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		}
		else 
		{
			frameBuffer[i] = 4;
 470:	c9 01       	movw	r24, r18
 472:	85 59       	subi	r24, 0x95	; 149
 474:	9e 4f       	sbci	r25, 0xFE	; 254
 476:	dc 01       	movw	r26, r24
 478:	bc 92       	st	X, r11
	newFrame = 1;
	
}
void decode(){
	
	for (int i = 0;i<11;i++)
 47a:	2f 5f       	subi	r18, 0xFF	; 255
 47c:	3f 4f       	sbci	r19, 0xFF	; 255
 47e:	2b 30       	cpi	r18, 0x0B	; 11
 480:	31 05       	cpc	r19, r1
 482:	09 f0       	breq	.+2      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 484:	bd cf       	rjmp	.-134    	; 0x400 <__LOCK_REGION_LENGTH__>
		{
			frameBuffer[i] = 4;
		}
		
	}
	irAvaliable = 1;
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <irAvaliable>
}
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	1f 91       	pop	r17
 492:	0f 91       	pop	r16
 494:	ff 90       	pop	r15
 496:	ef 90       	pop	r14
 498:	df 90       	pop	r13
 49a:	cf 90       	pop	r12
 49c:	bf 90       	pop	r11
 49e:	af 90       	pop	r10
 4a0:	9f 90       	pop	r9
 4a2:	8f 90       	pop	r8
 4a4:	7f 90       	pop	r7
 4a6:	6f 90       	pop	r6
 4a8:	08 95       	ret

000004aa <__vector_8>:

ISR(TIMER2_COMPB_vect){
 4aa:	1f 92       	push	r1
 4ac:	0f 92       	push	r0
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	0f 92       	push	r0
 4b2:	11 24       	eor	r1, r1
 4b4:	cf 92       	push	r12
 4b6:	df 92       	push	r13
 4b8:	ef 92       	push	r14
 4ba:	ff 92       	push	r15
 4bc:	2f 93       	push	r18
 4be:	4f 93       	push	r20
 4c0:	5f 93       	push	r21
 4c2:	6f 93       	push	r22
 4c4:	7f 93       	push	r23
 4c6:	8f 93       	push	r24
 4c8:	9f 93       	push	r25
 4ca:	af 93       	push	r26
 4cc:	bf 93       	push	r27
 4ce:	ef 93       	push	r30
 4d0:	ff 93       	push	r31
	TCNT2 = 0;
 4d2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	IR_ticks ++;
 4d6:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <IR_ticks>
 4da:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <IR_ticks+0x1>
 4de:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <IR_ticks+0x2>
 4e2:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <IR_ticks+0x3>
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	a1 1d       	adc	r26, r1
 4ea:	b1 1d       	adc	r27, r1
 4ec:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <IR_ticks>
 4f0:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <IR_ticks+0x1>
 4f4:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <IR_ticks+0x2>
 4f8:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <IR_ticks+0x3>
	if (newFrame)
 4fc:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <newFrame>
 500:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <newFrame+0x1>
 504:	89 2b       	or	r24, r25
 506:	39 f1       	breq	.+78     	; 0x556 <__vector_8+0xac>
	{
		IR_ticks = 0;
 508:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <IR_ticks>
 50c:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <IR_ticks+0x1>
 510:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <IR_ticks+0x2>
 514:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <IR_ticks+0x3>
		newFrame = 0;
 518:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <newFrame+0x1>
 51c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <newFrame>
		sendingFrame = 1;
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <sendingFrame+0x1>
 528:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <sendingFrame>
		last_IR_ticks = IR_ticks;
 52c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <IR_ticks>
 530:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <IR_ticks+0x1>
 534:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <IR_ticks+0x2>
 538:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <IR_ticks+0x3>
 53c:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <last_IR_ticks>
 540:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <last_IR_ticks+0x1>
 544:	a0 93 78 01 	sts	0x0178, r26	; 0x800178 <last_IR_ticks+0x2>
 548:	b0 93 79 01 	sts	0x0179, r27	; 0x800179 <last_IR_ticks+0x3>
		TCCR2A |= (1 << COM2B0);
 54c:	e0 eb       	ldi	r30, 0xB0	; 176
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	80 61       	ori	r24, 0x10	; 16
 554:	80 83       	st	Z, r24
		
	}
	if (sendingFrame)
 556:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <sendingFrame>
 55a:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <sendingFrame+0x1>
 55e:	89 2b       	or	r24, r25
 560:	09 f4       	brne	.+2      	; 0x564 <__vector_8+0xba>
 562:	65 c0       	rjmp	.+202    	; 0x62e <__vector_8+0x184>
	{
		if (IR_ticks >= last_IR_ticks + sendTimes[sendFrame[sendIndex]])
 564:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <sendIndex>
 568:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <sendIndex+0x1>
 56c:	ec 5a       	subi	r30, 0xAC	; 172
 56e:	fe 4f       	sbci	r31, 0xFE	; 254
 570:	20 81       	ld	r18, Z
 572:	40 91 76 01 	lds	r20, 0x0176	; 0x800176 <last_IR_ticks>
 576:	50 91 77 01 	lds	r21, 0x0177	; 0x800177 <last_IR_ticks+0x1>
 57a:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <last_IR_ticks+0x2>
 57e:	70 91 79 01 	lds	r23, 0x0179	; 0x800179 <last_IR_ticks+0x3>
 582:	c0 90 50 01 	lds	r12, 0x0150	; 0x800150 <IR_ticks>
 586:	d0 90 51 01 	lds	r13, 0x0151	; 0x800151 <IR_ticks+0x1>
 58a:	e0 90 52 01 	lds	r14, 0x0152	; 0x800152 <IR_ticks+0x2>
 58e:	f0 90 53 01 	lds	r15, 0x0153	; 0x800153 <IR_ticks+0x3>
 592:	e2 2f       	mov	r30, r18
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	ee 0f       	add	r30, r30
 598:	ff 1f       	adc	r31, r31
 59a:	ea 5e       	subi	r30, 0xEA	; 234
 59c:	fe 4f       	sbci	r31, 0xFE	; 254
 59e:	80 81       	ld	r24, Z
 5a0:	91 81       	ldd	r25, Z+1	; 0x01
 5a2:	09 2e       	mov	r0, r25
 5a4:	00 0c       	add	r0, r0
 5a6:	aa 0b       	sbc	r26, r26
 5a8:	bb 0b       	sbc	r27, r27
 5aa:	84 0f       	add	r24, r20
 5ac:	95 1f       	adc	r25, r21
 5ae:	a6 1f       	adc	r26, r22
 5b0:	b7 1f       	adc	r27, r23
 5b2:	c8 16       	cp	r12, r24
 5b4:	d9 06       	cpc	r13, r25
 5b6:	ea 06       	cpc	r14, r26
 5b8:	fb 06       	cpc	r15, r27
 5ba:	30 f1       	brcs	.+76     	; 0x608 <__vector_8+0x15e>
		{
			if (sendFrame[sendIndex] == 4)//detect if it is a divider
 5bc:	24 30       	cpi	r18, 0x04	; 4
 5be:	31 f4       	brne	.+12     	; 0x5cc <__vector_8+0x122>
			{
				TCCR2A |= (1 << COM2B0);
 5c0:	e0 eb       	ldi	r30, 0xB0	; 176
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	80 81       	ld	r24, Z
 5c6:	80 61       	ori	r24, 0x10	; 16
 5c8:	80 83       	st	Z, r24
 5ca:	05 c0       	rjmp	.+10     	; 0x5d6 <__vector_8+0x12c>
			}
			else{
				TCCR2A &= ~(1 << COM2B0);
 5cc:	e0 eb       	ldi	r30, 0xB0	; 176
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	80 81       	ld	r24, Z
 5d2:	8f 7e       	andi	r24, 0xEF	; 239
 5d4:	80 83       	st	Z, r24
				
			}
			
			sendIndex++;
 5d6:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <sendIndex>
 5da:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <sendIndex+0x1>
 5de:	01 96       	adiw	r24, 0x01	; 1
 5e0:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <sendIndex+0x1>
 5e4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <sendIndex>
			last_IR_ticks = IR_ticks;
 5e8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <IR_ticks>
 5ec:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <IR_ticks+0x1>
 5f0:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <IR_ticks+0x2>
 5f4:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <IR_ticks+0x3>
 5f8:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <last_IR_ticks>
 5fc:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <last_IR_ticks+0x1>
 600:	a0 93 78 01 	sts	0x0178, r26	; 0x800178 <last_IR_ticks+0x2>
 604:	b0 93 79 01 	sts	0x0179, r27	; 0x800179 <last_IR_ticks+0x3>
		}
		if (sendIndex >= 23)
 608:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <sendIndex>
 60c:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <sendIndex+0x1>
 610:	47 97       	sbiw	r24, 0x17	; 23
 612:	6c f0       	brlt	.+26     	; 0x62e <__vector_8+0x184>
		{
			sendIndex = 0;
 614:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <sendIndex+0x1>
 618:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <sendIndex>
			sendingFrame = 0;
 61c:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <sendingFrame+0x1>
 620:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <sendingFrame>
			TCCR2A &= ~(1 << COM2B0);
 624:	e0 eb       	ldi	r30, 0xB0	; 176
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	8f 7e       	andi	r24, 0xEF	; 239
 62c:	80 83       	st	Z, r24
		}
	}
	
	
}
 62e:	ff 91       	pop	r31
 630:	ef 91       	pop	r30
 632:	bf 91       	pop	r27
 634:	af 91       	pop	r26
 636:	9f 91       	pop	r25
 638:	8f 91       	pop	r24
 63a:	7f 91       	pop	r23
 63c:	6f 91       	pop	r22
 63e:	5f 91       	pop	r21
 640:	4f 91       	pop	r20
 642:	2f 91       	pop	r18
 644:	ff 90       	pop	r15
 646:	ef 90       	pop	r14
 648:	df 90       	pop	r13
 64a:	cf 90       	pop	r12
 64c:	0f 90       	pop	r0
 64e:	0f be       	out	0x3f, r0	; 63
 650:	0f 90       	pop	r0
 652:	1f 90       	pop	r1
 654:	18 95       	reti

00000656 <__vector_1>:

ISR(INT0_vect){
 656:	1f 92       	push	r1
 658:	0f 92       	push	r0
 65a:	0f b6       	in	r0, 0x3f	; 63
 65c:	0f 92       	push	r0
 65e:	11 24       	eor	r1, r1
 660:	2f 93       	push	r18
 662:	3f 93       	push	r19
 664:	4f 93       	push	r20
 666:	5f 93       	push	r21
 668:	6f 93       	push	r22
 66a:	7f 93       	push	r23
 66c:	8f 93       	push	r24
 66e:	9f 93       	push	r25
 670:	af 93       	push	r26
 672:	bf 93       	push	r27
 674:	ef 93       	push	r30
 676:	ff 93       	push	r31
	pulseEnd = IR_ticks;
 678:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <IR_ticks>
 67c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <IR_ticks+0x1>
 680:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <IR_ticks+0x2>
 684:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <IR_ticks+0x3>
 688:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <pulseEnd>
 68c:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <pulseEnd+0x1>
 690:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <pulseEnd+0x2>
 694:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <pulseEnd+0x3>
	int pulsTime = pulseEnd-pulseBegin;
 698:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <pulseEnd>
 69c:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <pulseEnd+0x1>
 6a0:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <pulseEnd+0x2>
 6a4:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <pulseEnd+0x3>
 6a8:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <pulseBegin>
 6ac:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <pulseBegin+0x1>
 6b0:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <pulseBegin+0x2>
 6b4:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <pulseBegin+0x3>
 6b8:	84 1b       	sub	r24, r20
 6ba:	95 0b       	sbc	r25, r21
	pulseBegin = pulseEnd;
 6bc:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <pulseEnd>
 6c0:	50 91 2b 01 	lds	r21, 0x012B	; 0x80012b <pulseEnd+0x1>
 6c4:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <pulseEnd+0x2>
 6c8:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <pulseEnd+0x3>
 6cc:	40 93 2e 01 	sts	0x012E, r20	; 0x80012e <pulseBegin>
 6d0:	50 93 2f 01 	sts	0x012F, r21	; 0x80012f <pulseBegin+0x1>
 6d4:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <pulseBegin+0x2>
 6d8:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <pulseBegin+0x3>
	
	//raw code
	if (pulsTime < 95&&pulsTime > 0)
 6dc:	9c 01       	movw	r18, r24
 6de:	21 50       	subi	r18, 0x01	; 1
 6e0:	31 09       	sbc	r19, r1
 6e2:	2e 35       	cpi	r18, 0x5E	; 94
 6e4:	31 05       	cpc	r19, r1
 6e6:	a0 f4       	brcc	.+40     	; 0x710 <__vector_1+0xba>
	{
		rawFrame[rawindex] = pulsTime;
 6e8:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <rawindex>
 6ec:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <rawindex+0x1>
 6f0:	ee 0f       	add	r30, r30
 6f2:	ff 1f       	adc	r31, r31
 6f4:	e6 58       	subi	r30, 0x86	; 134
 6f6:	fe 4f       	sbci	r31, 0xFE	; 254
 6f8:	91 83       	std	Z+1, r25	; 0x01
 6fa:	80 83       	st	Z, r24
		rawindex++;
 6fc:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <rawindex>
 700:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <rawindex+0x1>
 704:	01 96       	adiw	r24, 0x01	; 1
 706:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <rawindex+0x1>
 70a:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <rawindex>
 70e:	2d c0       	rjmp	.+90     	; 0x76a <__vector_1+0x114>
		
		
		
	}
	else if (pulsTime < 200 && pulsTime > 95)
 710:	9c 01       	movw	r18, r24
 712:	20 56       	subi	r18, 0x60	; 96
 714:	31 09       	sbc	r19, r1
 716:	28 36       	cpi	r18, 0x68	; 104
 718:	31 05       	cpc	r19, r1
 71a:	38 f5       	brcc	.+78     	; 0x76a <__vector_1+0x114>
	{
		rawFrame[rawindex] = pulsTime;
 71c:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <rawindex>
 720:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <rawindex+0x1>
 724:	ee 0f       	add	r30, r30
 726:	ff 1f       	adc	r31, r31
 728:	e6 58       	subi	r30, 0x86	; 134
 72a:	fe 4f       	sbci	r31, 0xFE	; 254
 72c:	91 83       	std	Z+1, r25	; 0x01
 72e:	80 83       	st	Z, r24
		rawindex = 0;
 730:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rawindex+0x1>
 734:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <rawindex>
		rawNew = 1;
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <rawNew>
		for (int i = 0;i<11;i++)
 73e:	20 e0       	ldi	r18, 0x00	; 0
 740:	30 e0       	ldi	r19, 0x00	; 0
		{
			decodeFrame[i] = rawFrame[i];
 742:	c9 01       	movw	r24, r18
 744:	88 0f       	add	r24, r24
 746:	99 1f       	adc	r25, r25
 748:	fc 01       	movw	r30, r24
 74a:	e6 58       	subi	r30, 0x86	; 134
 74c:	fe 4f       	sbci	r31, 0xFE	; 254
 74e:	40 81       	ld	r20, Z
 750:	51 81       	ldd	r21, Z+1	; 0x01
 752:	fc 01       	movw	r30, r24
 754:	e6 5c       	subi	r30, 0xC6	; 198
 756:	fe 4f       	sbci	r31, 0xFE	; 254
 758:	51 83       	std	Z+1, r21	; 0x01
 75a:	40 83       	st	Z, r20
	else if (pulsTime < 200 && pulsTime > 95)
	{
		rawFrame[rawindex] = pulsTime;
		rawindex = 0;
		rawNew = 1;
		for (int i = 0;i<11;i++)
 75c:	2f 5f       	subi	r18, 0xFF	; 255
 75e:	3f 4f       	sbci	r19, 0xFF	; 255
 760:	2b 30       	cpi	r18, 0x0B	; 11
 762:	31 05       	cpc	r19, r1
 764:	71 f7       	brne	.-36     	; 0x742 <__vector_1+0xec>
		{
			decodeFrame[i] = rawFrame[i];
		}
		decode();
 766:	0e 94 bb 01 	call	0x376	; 0x376 <decode>
	}
	
	
	
	
 76a:	ff 91       	pop	r31
 76c:	ef 91       	pop	r30
 76e:	bf 91       	pop	r27
 770:	af 91       	pop	r26
 772:	9f 91       	pop	r25
 774:	8f 91       	pop	r24
 776:	7f 91       	pop	r23
 778:	6f 91       	pop	r22
 77a:	5f 91       	pop	r21
 77c:	4f 91       	pop	r20
 77e:	3f 91       	pop	r19
 780:	2f 91       	pop	r18
 782:	0f 90       	pop	r0
 784:	0f be       	out	0x3f, r0	; 63
 786:	0f 90       	pop	r0
 788:	1f 90       	pop	r1
 78a:	18 95       	reti

0000078c <USART_Init>:
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
	;
	/* Get and return received data from buffer */
	return UDR0;
}
 78c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 790:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 794:	88 e1       	ldi	r24, 0x18	; 24
 796:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 79a:	86 e0       	ldi	r24, 0x06	; 6
 79c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 7a0:	08 95       	ret

000007a2 <USART_Transmit>:
 7a2:	e0 ec       	ldi	r30, 0xC0	; 192
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	90 81       	ld	r25, Z
 7a8:	95 ff       	sbrs	r25, 5
 7aa:	fd cf       	rjmp	.-6      	; 0x7a6 <USART_Transmit+0x4>
 7ac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 7b0:	08 95       	ret

000007b2 <USART_PutString>:
void USART_PutString(char* string){
 7b2:	ef 92       	push	r14
 7b4:	ff 92       	push	r15
 7b6:	0f 93       	push	r16
 7b8:	1f 93       	push	r17
 7ba:	cf 93       	push	r28
 7bc:	df 93       	push	r29
 7be:	8c 01       	movw	r16, r24
 7c0:	7c 01       	movw	r14, r24
	for (int i = 0;i<strlen(string);i++)
 7c2:	c0 e0       	ldi	r28, 0x00	; 0
 7c4:	d0 e0       	ldi	r29, 0x00	; 0
 7c6:	06 c0       	rjmp	.+12     	; 0x7d4 <USART_PutString+0x22>
	{
		USART_Transmit(string[i]);
 7c8:	f7 01       	movw	r30, r14
 7ca:	81 91       	ld	r24, Z+
 7cc:	7f 01       	movw	r14, r30
 7ce:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <USART_Transmit>
	;
	/* Get and return received data from buffer */
	return UDR0;
}
void USART_PutString(char* string){
	for (int i = 0;i<strlen(string);i++)
 7d2:	21 96       	adiw	r28, 0x01	; 1
 7d4:	f8 01       	movw	r30, r16
 7d6:	01 90       	ld	r0, Z+
 7d8:	00 20       	and	r0, r0
 7da:	e9 f7       	brne	.-6      	; 0x7d6 <USART_PutString+0x24>
 7dc:	31 97       	sbiw	r30, 0x01	; 1
 7de:	e0 1b       	sub	r30, r16
 7e0:	f1 0b       	sbc	r31, r17
 7e2:	ce 17       	cp	r28, r30
 7e4:	df 07       	cpc	r29, r31
 7e6:	80 f3       	brcs	.-32     	; 0x7c8 <USART_PutString+0x16>
	{
		USART_Transmit(string[i]);
	}
}
 7e8:	df 91       	pop	r29
 7ea:	cf 91       	pop	r28
 7ec:	1f 91       	pop	r17
 7ee:	0f 91       	pop	r16
 7f0:	ff 90       	pop	r15
 7f2:	ef 90       	pop	r14
 7f4:	08 95       	ret

000007f6 <USART_PutInt>:
void USART_PutInt(int input){
 7f6:	0f 93       	push	r16
 7f8:	1f 93       	push	r17
 7fa:	cf 93       	push	r28
 7fc:	df 93       	push	r29
 7fe:	cd b7       	in	r28, 0x3d	; 61
 800:	de b7       	in	r29, 0x3e	; 62
 802:	64 97       	sbiw	r28, 0x14	; 20
 804:	0f b6       	in	r0, 0x3f	; 63
 806:	f8 94       	cli
 808:	de bf       	out	0x3e, r29	; 62
 80a:	0f be       	out	0x3f, r0	; 63
 80c:	cd bf       	out	0x3d, r28	; 61
	char str[20];
	sprintf(str, "%d", input);
 80e:	9f 93       	push	r25
 810:	8f 93       	push	r24
 812:	80 e2       	ldi	r24, 0x20	; 32
 814:	91 e0       	ldi	r25, 0x01	; 1
 816:	9f 93       	push	r25
 818:	8f 93       	push	r24
 81a:	8e 01       	movw	r16, r28
 81c:	0f 5f       	subi	r16, 0xFF	; 255
 81e:	1f 4f       	sbci	r17, 0xFF	; 255
 820:	1f 93       	push	r17
 822:	0f 93       	push	r16
 824:	0e 94 28 04 	call	0x850	; 0x850 <sprintf>
	USART_PutString(str);
 828:	c8 01       	movw	r24, r16
 82a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <USART_PutString>
}
 82e:	0f 90       	pop	r0
 830:	0f 90       	pop	r0
 832:	0f 90       	pop	r0
 834:	0f 90       	pop	r0
 836:	0f 90       	pop	r0
 838:	0f 90       	pop	r0
 83a:	64 96       	adiw	r28, 0x14	; 20
 83c:	0f b6       	in	r0, 0x3f	; 63
 83e:	f8 94       	cli
 840:	de bf       	out	0x3e, r29	; 62
 842:	0f be       	out	0x3f, r0	; 63
 844:	cd bf       	out	0x3d, r28	; 61
 846:	df 91       	pop	r29
 848:	cf 91       	pop	r28
 84a:	1f 91       	pop	r17
 84c:	0f 91       	pop	r16
 84e:	08 95       	ret

00000850 <sprintf>:
 850:	ae e0       	ldi	r26, 0x0E	; 14
 852:	b0 e0       	ldi	r27, 0x00	; 0
 854:	ee e2       	ldi	r30, 0x2E	; 46
 856:	f4 e0       	ldi	r31, 0x04	; 4
 858:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <__prologue_saves__+0x1c>
 85c:	0d 89       	ldd	r16, Y+21	; 0x15
 85e:	1e 89       	ldd	r17, Y+22	; 0x16
 860:	86 e0       	ldi	r24, 0x06	; 6
 862:	8c 83       	std	Y+4, r24	; 0x04
 864:	1a 83       	std	Y+2, r17	; 0x02
 866:	09 83       	std	Y+1, r16	; 0x01
 868:	8f ef       	ldi	r24, 0xFF	; 255
 86a:	9f e7       	ldi	r25, 0x7F	; 127
 86c:	9e 83       	std	Y+6, r25	; 0x06
 86e:	8d 83       	std	Y+5, r24	; 0x05
 870:	ae 01       	movw	r20, r28
 872:	47 5e       	subi	r20, 0xE7	; 231
 874:	5f 4f       	sbci	r21, 0xFF	; 255
 876:	6f 89       	ldd	r22, Y+23	; 0x17
 878:	78 8d       	ldd	r23, Y+24	; 0x18
 87a:	ce 01       	movw	r24, r28
 87c:	01 96       	adiw	r24, 0x01	; 1
 87e:	0e 94 4a 04 	call	0x894	; 0x894 <vfprintf>
 882:	ef 81       	ldd	r30, Y+7	; 0x07
 884:	f8 85       	ldd	r31, Y+8	; 0x08
 886:	e0 0f       	add	r30, r16
 888:	f1 1f       	adc	r31, r17
 88a:	10 82       	st	Z, r1
 88c:	2e 96       	adiw	r28, 0x0e	; 14
 88e:	e4 e0       	ldi	r30, 0x04	; 4
 890:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__epilogue_restores__+0x1c>

00000894 <vfprintf>:
 894:	ab e0       	ldi	r26, 0x0B	; 11
 896:	b0 e0       	ldi	r27, 0x00	; 0
 898:	e0 e5       	ldi	r30, 0x50	; 80
 89a:	f4 e0       	ldi	r31, 0x04	; 4
 89c:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__prologue_saves__>
 8a0:	6c 01       	movw	r12, r24
 8a2:	7b 01       	movw	r14, r22
 8a4:	8a 01       	movw	r16, r20
 8a6:	fc 01       	movw	r30, r24
 8a8:	17 82       	std	Z+7, r1	; 0x07
 8aa:	16 82       	std	Z+6, r1	; 0x06
 8ac:	83 81       	ldd	r24, Z+3	; 0x03
 8ae:	81 ff       	sbrs	r24, 1
 8b0:	cc c1       	rjmp	.+920    	; 0xc4a <__stack+0x34b>
 8b2:	ce 01       	movw	r24, r28
 8b4:	01 96       	adiw	r24, 0x01	; 1
 8b6:	3c 01       	movw	r6, r24
 8b8:	f6 01       	movw	r30, r12
 8ba:	93 81       	ldd	r25, Z+3	; 0x03
 8bc:	f7 01       	movw	r30, r14
 8be:	93 fd       	sbrc	r25, 3
 8c0:	85 91       	lpm	r24, Z+
 8c2:	93 ff       	sbrs	r25, 3
 8c4:	81 91       	ld	r24, Z+
 8c6:	7f 01       	movw	r14, r30
 8c8:	88 23       	and	r24, r24
 8ca:	09 f4       	brne	.+2      	; 0x8ce <vfprintf+0x3a>
 8cc:	ba c1       	rjmp	.+884    	; 0xc42 <__stack+0x343>
 8ce:	85 32       	cpi	r24, 0x25	; 37
 8d0:	39 f4       	brne	.+14     	; 0x8e0 <vfprintf+0x4c>
 8d2:	93 fd       	sbrc	r25, 3
 8d4:	85 91       	lpm	r24, Z+
 8d6:	93 ff       	sbrs	r25, 3
 8d8:	81 91       	ld	r24, Z+
 8da:	7f 01       	movw	r14, r30
 8dc:	85 32       	cpi	r24, 0x25	; 37
 8de:	29 f4       	brne	.+10     	; 0x8ea <vfprintf+0x56>
 8e0:	b6 01       	movw	r22, r12
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	0e 94 41 06 	call	0xc82	; 0xc82 <fputc>
 8e8:	e7 cf       	rjmp	.-50     	; 0x8b8 <vfprintf+0x24>
 8ea:	91 2c       	mov	r9, r1
 8ec:	21 2c       	mov	r2, r1
 8ee:	31 2c       	mov	r3, r1
 8f0:	ff e1       	ldi	r31, 0x1F	; 31
 8f2:	f3 15       	cp	r31, r3
 8f4:	d8 f0       	brcs	.+54     	; 0x92c <__stack+0x2d>
 8f6:	8b 32       	cpi	r24, 0x2B	; 43
 8f8:	79 f0       	breq	.+30     	; 0x918 <__stack+0x19>
 8fa:	38 f4       	brcc	.+14     	; 0x90a <__stack+0xb>
 8fc:	80 32       	cpi	r24, 0x20	; 32
 8fe:	79 f0       	breq	.+30     	; 0x91e <__stack+0x1f>
 900:	83 32       	cpi	r24, 0x23	; 35
 902:	a1 f4       	brne	.+40     	; 0x92c <__stack+0x2d>
 904:	23 2d       	mov	r18, r3
 906:	20 61       	ori	r18, 0x10	; 16
 908:	1d c0       	rjmp	.+58     	; 0x944 <__stack+0x45>
 90a:	8d 32       	cpi	r24, 0x2D	; 45
 90c:	61 f0       	breq	.+24     	; 0x926 <__stack+0x27>
 90e:	80 33       	cpi	r24, 0x30	; 48
 910:	69 f4       	brne	.+26     	; 0x92c <__stack+0x2d>
 912:	23 2d       	mov	r18, r3
 914:	21 60       	ori	r18, 0x01	; 1
 916:	16 c0       	rjmp	.+44     	; 0x944 <__stack+0x45>
 918:	83 2d       	mov	r24, r3
 91a:	82 60       	ori	r24, 0x02	; 2
 91c:	38 2e       	mov	r3, r24
 91e:	e3 2d       	mov	r30, r3
 920:	e4 60       	ori	r30, 0x04	; 4
 922:	3e 2e       	mov	r3, r30
 924:	2a c0       	rjmp	.+84     	; 0x97a <__stack+0x7b>
 926:	f3 2d       	mov	r31, r3
 928:	f8 60       	ori	r31, 0x08	; 8
 92a:	1d c0       	rjmp	.+58     	; 0x966 <__stack+0x67>
 92c:	37 fc       	sbrc	r3, 7
 92e:	2d c0       	rjmp	.+90     	; 0x98a <__stack+0x8b>
 930:	20 ed       	ldi	r18, 0xD0	; 208
 932:	28 0f       	add	r18, r24
 934:	2a 30       	cpi	r18, 0x0A	; 10
 936:	40 f0       	brcs	.+16     	; 0x948 <__stack+0x49>
 938:	8e 32       	cpi	r24, 0x2E	; 46
 93a:	b9 f4       	brne	.+46     	; 0x96a <__stack+0x6b>
 93c:	36 fc       	sbrc	r3, 6
 93e:	81 c1       	rjmp	.+770    	; 0xc42 <__stack+0x343>
 940:	23 2d       	mov	r18, r3
 942:	20 64       	ori	r18, 0x40	; 64
 944:	32 2e       	mov	r3, r18
 946:	19 c0       	rjmp	.+50     	; 0x97a <__stack+0x7b>
 948:	36 fe       	sbrs	r3, 6
 94a:	06 c0       	rjmp	.+12     	; 0x958 <__stack+0x59>
 94c:	8a e0       	ldi	r24, 0x0A	; 10
 94e:	98 9e       	mul	r9, r24
 950:	20 0d       	add	r18, r0
 952:	11 24       	eor	r1, r1
 954:	92 2e       	mov	r9, r18
 956:	11 c0       	rjmp	.+34     	; 0x97a <__stack+0x7b>
 958:	ea e0       	ldi	r30, 0x0A	; 10
 95a:	2e 9e       	mul	r2, r30
 95c:	20 0d       	add	r18, r0
 95e:	11 24       	eor	r1, r1
 960:	22 2e       	mov	r2, r18
 962:	f3 2d       	mov	r31, r3
 964:	f0 62       	ori	r31, 0x20	; 32
 966:	3f 2e       	mov	r3, r31
 968:	08 c0       	rjmp	.+16     	; 0x97a <__stack+0x7b>
 96a:	8c 36       	cpi	r24, 0x6C	; 108
 96c:	21 f4       	brne	.+8      	; 0x976 <__stack+0x77>
 96e:	83 2d       	mov	r24, r3
 970:	80 68       	ori	r24, 0x80	; 128
 972:	38 2e       	mov	r3, r24
 974:	02 c0       	rjmp	.+4      	; 0x97a <__stack+0x7b>
 976:	88 36       	cpi	r24, 0x68	; 104
 978:	41 f4       	brne	.+16     	; 0x98a <__stack+0x8b>
 97a:	f7 01       	movw	r30, r14
 97c:	93 fd       	sbrc	r25, 3
 97e:	85 91       	lpm	r24, Z+
 980:	93 ff       	sbrs	r25, 3
 982:	81 91       	ld	r24, Z+
 984:	7f 01       	movw	r14, r30
 986:	81 11       	cpse	r24, r1
 988:	b3 cf       	rjmp	.-154    	; 0x8f0 <vfprintf+0x5c>
 98a:	98 2f       	mov	r25, r24
 98c:	9f 7d       	andi	r25, 0xDF	; 223
 98e:	95 54       	subi	r25, 0x45	; 69
 990:	93 30       	cpi	r25, 0x03	; 3
 992:	28 f4       	brcc	.+10     	; 0x99e <__stack+0x9f>
 994:	0c 5f       	subi	r16, 0xFC	; 252
 996:	1f 4f       	sbci	r17, 0xFF	; 255
 998:	9f e3       	ldi	r25, 0x3F	; 63
 99a:	99 83       	std	Y+1, r25	; 0x01
 99c:	0d c0       	rjmp	.+26     	; 0x9b8 <__stack+0xb9>
 99e:	83 36       	cpi	r24, 0x63	; 99
 9a0:	31 f0       	breq	.+12     	; 0x9ae <__stack+0xaf>
 9a2:	83 37       	cpi	r24, 0x73	; 115
 9a4:	71 f0       	breq	.+28     	; 0x9c2 <__stack+0xc3>
 9a6:	83 35       	cpi	r24, 0x53	; 83
 9a8:	09 f0       	breq	.+2      	; 0x9ac <__stack+0xad>
 9aa:	59 c0       	rjmp	.+178    	; 0xa5e <__stack+0x15f>
 9ac:	21 c0       	rjmp	.+66     	; 0x9f0 <__stack+0xf1>
 9ae:	f8 01       	movw	r30, r16
 9b0:	80 81       	ld	r24, Z
 9b2:	89 83       	std	Y+1, r24	; 0x01
 9b4:	0e 5f       	subi	r16, 0xFE	; 254
 9b6:	1f 4f       	sbci	r17, 0xFF	; 255
 9b8:	88 24       	eor	r8, r8
 9ba:	83 94       	inc	r8
 9bc:	91 2c       	mov	r9, r1
 9be:	53 01       	movw	r10, r6
 9c0:	13 c0       	rjmp	.+38     	; 0x9e8 <__stack+0xe9>
 9c2:	28 01       	movw	r4, r16
 9c4:	f2 e0       	ldi	r31, 0x02	; 2
 9c6:	4f 0e       	add	r4, r31
 9c8:	51 1c       	adc	r5, r1
 9ca:	f8 01       	movw	r30, r16
 9cc:	a0 80       	ld	r10, Z
 9ce:	b1 80       	ldd	r11, Z+1	; 0x01
 9d0:	36 fe       	sbrs	r3, 6
 9d2:	03 c0       	rjmp	.+6      	; 0x9da <__stack+0xdb>
 9d4:	69 2d       	mov	r22, r9
 9d6:	70 e0       	ldi	r23, 0x00	; 0
 9d8:	02 c0       	rjmp	.+4      	; 0x9de <__stack+0xdf>
 9da:	6f ef       	ldi	r22, 0xFF	; 255
 9dc:	7f ef       	ldi	r23, 0xFF	; 255
 9de:	c5 01       	movw	r24, r10
 9e0:	0e 94 36 06 	call	0xc6c	; 0xc6c <strnlen>
 9e4:	4c 01       	movw	r8, r24
 9e6:	82 01       	movw	r16, r4
 9e8:	f3 2d       	mov	r31, r3
 9ea:	ff 77       	andi	r31, 0x7F	; 127
 9ec:	3f 2e       	mov	r3, r31
 9ee:	16 c0       	rjmp	.+44     	; 0xa1c <__stack+0x11d>
 9f0:	28 01       	movw	r4, r16
 9f2:	22 e0       	ldi	r18, 0x02	; 2
 9f4:	42 0e       	add	r4, r18
 9f6:	51 1c       	adc	r5, r1
 9f8:	f8 01       	movw	r30, r16
 9fa:	a0 80       	ld	r10, Z
 9fc:	b1 80       	ldd	r11, Z+1	; 0x01
 9fe:	36 fe       	sbrs	r3, 6
 a00:	03 c0       	rjmp	.+6      	; 0xa08 <__stack+0x109>
 a02:	69 2d       	mov	r22, r9
 a04:	70 e0       	ldi	r23, 0x00	; 0
 a06:	02 c0       	rjmp	.+4      	; 0xa0c <__stack+0x10d>
 a08:	6f ef       	ldi	r22, 0xFF	; 255
 a0a:	7f ef       	ldi	r23, 0xFF	; 255
 a0c:	c5 01       	movw	r24, r10
 a0e:	0e 94 2b 06 	call	0xc56	; 0xc56 <strnlen_P>
 a12:	4c 01       	movw	r8, r24
 a14:	f3 2d       	mov	r31, r3
 a16:	f0 68       	ori	r31, 0x80	; 128
 a18:	3f 2e       	mov	r3, r31
 a1a:	82 01       	movw	r16, r4
 a1c:	33 fc       	sbrc	r3, 3
 a1e:	1b c0       	rjmp	.+54     	; 0xa56 <__stack+0x157>
 a20:	82 2d       	mov	r24, r2
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	88 16       	cp	r8, r24
 a26:	99 06       	cpc	r9, r25
 a28:	b0 f4       	brcc	.+44     	; 0xa56 <__stack+0x157>
 a2a:	b6 01       	movw	r22, r12
 a2c:	80 e2       	ldi	r24, 0x20	; 32
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	0e 94 41 06 	call	0xc82	; 0xc82 <fputc>
 a34:	2a 94       	dec	r2
 a36:	f4 cf       	rjmp	.-24     	; 0xa20 <__stack+0x121>
 a38:	f5 01       	movw	r30, r10
 a3a:	37 fc       	sbrc	r3, 7
 a3c:	85 91       	lpm	r24, Z+
 a3e:	37 fe       	sbrs	r3, 7
 a40:	81 91       	ld	r24, Z+
 a42:	5f 01       	movw	r10, r30
 a44:	b6 01       	movw	r22, r12
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	0e 94 41 06 	call	0xc82	; 0xc82 <fputc>
 a4c:	21 10       	cpse	r2, r1
 a4e:	2a 94       	dec	r2
 a50:	21 e0       	ldi	r18, 0x01	; 1
 a52:	82 1a       	sub	r8, r18
 a54:	91 08       	sbc	r9, r1
 a56:	81 14       	cp	r8, r1
 a58:	91 04       	cpc	r9, r1
 a5a:	71 f7       	brne	.-36     	; 0xa38 <__stack+0x139>
 a5c:	e8 c0       	rjmp	.+464    	; 0xc2e <__stack+0x32f>
 a5e:	84 36       	cpi	r24, 0x64	; 100
 a60:	11 f0       	breq	.+4      	; 0xa66 <__stack+0x167>
 a62:	89 36       	cpi	r24, 0x69	; 105
 a64:	41 f5       	brne	.+80     	; 0xab6 <__stack+0x1b7>
 a66:	f8 01       	movw	r30, r16
 a68:	37 fe       	sbrs	r3, 7
 a6a:	07 c0       	rjmp	.+14     	; 0xa7a <__stack+0x17b>
 a6c:	60 81       	ld	r22, Z
 a6e:	71 81       	ldd	r23, Z+1	; 0x01
 a70:	82 81       	ldd	r24, Z+2	; 0x02
 a72:	93 81       	ldd	r25, Z+3	; 0x03
 a74:	0c 5f       	subi	r16, 0xFC	; 252
 a76:	1f 4f       	sbci	r17, 0xFF	; 255
 a78:	08 c0       	rjmp	.+16     	; 0xa8a <__stack+0x18b>
 a7a:	60 81       	ld	r22, Z
 a7c:	71 81       	ldd	r23, Z+1	; 0x01
 a7e:	07 2e       	mov	r0, r23
 a80:	00 0c       	add	r0, r0
 a82:	88 0b       	sbc	r24, r24
 a84:	99 0b       	sbc	r25, r25
 a86:	0e 5f       	subi	r16, 0xFE	; 254
 a88:	1f 4f       	sbci	r17, 0xFF	; 255
 a8a:	f3 2d       	mov	r31, r3
 a8c:	ff 76       	andi	r31, 0x6F	; 111
 a8e:	3f 2e       	mov	r3, r31
 a90:	97 ff       	sbrs	r25, 7
 a92:	09 c0       	rjmp	.+18     	; 0xaa6 <__stack+0x1a7>
 a94:	90 95       	com	r25
 a96:	80 95       	com	r24
 a98:	70 95       	com	r23
 a9a:	61 95       	neg	r22
 a9c:	7f 4f       	sbci	r23, 0xFF	; 255
 a9e:	8f 4f       	sbci	r24, 0xFF	; 255
 aa0:	9f 4f       	sbci	r25, 0xFF	; 255
 aa2:	f0 68       	ori	r31, 0x80	; 128
 aa4:	3f 2e       	mov	r3, r31
 aa6:	2a e0       	ldi	r18, 0x0A	; 10
 aa8:	30 e0       	ldi	r19, 0x00	; 0
 aaa:	a3 01       	movw	r20, r6
 aac:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__ultoa_invert>
 ab0:	88 2e       	mov	r8, r24
 ab2:	86 18       	sub	r8, r6
 ab4:	45 c0       	rjmp	.+138    	; 0xb40 <__stack+0x241>
 ab6:	85 37       	cpi	r24, 0x75	; 117
 ab8:	31 f4       	brne	.+12     	; 0xac6 <__stack+0x1c7>
 aba:	23 2d       	mov	r18, r3
 abc:	2f 7e       	andi	r18, 0xEF	; 239
 abe:	b2 2e       	mov	r11, r18
 ac0:	2a e0       	ldi	r18, 0x0A	; 10
 ac2:	30 e0       	ldi	r19, 0x00	; 0
 ac4:	25 c0       	rjmp	.+74     	; 0xb10 <__stack+0x211>
 ac6:	93 2d       	mov	r25, r3
 ac8:	99 7f       	andi	r25, 0xF9	; 249
 aca:	b9 2e       	mov	r11, r25
 acc:	8f 36       	cpi	r24, 0x6F	; 111
 ace:	c1 f0       	breq	.+48     	; 0xb00 <__stack+0x201>
 ad0:	18 f4       	brcc	.+6      	; 0xad8 <__stack+0x1d9>
 ad2:	88 35       	cpi	r24, 0x58	; 88
 ad4:	79 f0       	breq	.+30     	; 0xaf4 <__stack+0x1f5>
 ad6:	b5 c0       	rjmp	.+362    	; 0xc42 <__stack+0x343>
 ad8:	80 37       	cpi	r24, 0x70	; 112
 ada:	19 f0       	breq	.+6      	; 0xae2 <__stack+0x1e3>
 adc:	88 37       	cpi	r24, 0x78	; 120
 ade:	21 f0       	breq	.+8      	; 0xae8 <__stack+0x1e9>
 ae0:	b0 c0       	rjmp	.+352    	; 0xc42 <__stack+0x343>
 ae2:	e9 2f       	mov	r30, r25
 ae4:	e0 61       	ori	r30, 0x10	; 16
 ae6:	be 2e       	mov	r11, r30
 ae8:	b4 fe       	sbrs	r11, 4
 aea:	0d c0       	rjmp	.+26     	; 0xb06 <__stack+0x207>
 aec:	fb 2d       	mov	r31, r11
 aee:	f4 60       	ori	r31, 0x04	; 4
 af0:	bf 2e       	mov	r11, r31
 af2:	09 c0       	rjmp	.+18     	; 0xb06 <__stack+0x207>
 af4:	34 fe       	sbrs	r3, 4
 af6:	0a c0       	rjmp	.+20     	; 0xb0c <__stack+0x20d>
 af8:	29 2f       	mov	r18, r25
 afa:	26 60       	ori	r18, 0x06	; 6
 afc:	b2 2e       	mov	r11, r18
 afe:	06 c0       	rjmp	.+12     	; 0xb0c <__stack+0x20d>
 b00:	28 e0       	ldi	r18, 0x08	; 8
 b02:	30 e0       	ldi	r19, 0x00	; 0
 b04:	05 c0       	rjmp	.+10     	; 0xb10 <__stack+0x211>
 b06:	20 e1       	ldi	r18, 0x10	; 16
 b08:	30 e0       	ldi	r19, 0x00	; 0
 b0a:	02 c0       	rjmp	.+4      	; 0xb10 <__stack+0x211>
 b0c:	20 e1       	ldi	r18, 0x10	; 16
 b0e:	32 e0       	ldi	r19, 0x02	; 2
 b10:	f8 01       	movw	r30, r16
 b12:	b7 fe       	sbrs	r11, 7
 b14:	07 c0       	rjmp	.+14     	; 0xb24 <__stack+0x225>
 b16:	60 81       	ld	r22, Z
 b18:	71 81       	ldd	r23, Z+1	; 0x01
 b1a:	82 81       	ldd	r24, Z+2	; 0x02
 b1c:	93 81       	ldd	r25, Z+3	; 0x03
 b1e:	0c 5f       	subi	r16, 0xFC	; 252
 b20:	1f 4f       	sbci	r17, 0xFF	; 255
 b22:	06 c0       	rjmp	.+12     	; 0xb30 <__stack+0x231>
 b24:	60 81       	ld	r22, Z
 b26:	71 81       	ldd	r23, Z+1	; 0x01
 b28:	80 e0       	ldi	r24, 0x00	; 0
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	0e 5f       	subi	r16, 0xFE	; 254
 b2e:	1f 4f       	sbci	r17, 0xFF	; 255
 b30:	a3 01       	movw	r20, r6
 b32:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__ultoa_invert>
 b36:	88 2e       	mov	r8, r24
 b38:	86 18       	sub	r8, r6
 b3a:	fb 2d       	mov	r31, r11
 b3c:	ff 77       	andi	r31, 0x7F	; 127
 b3e:	3f 2e       	mov	r3, r31
 b40:	36 fe       	sbrs	r3, 6
 b42:	0d c0       	rjmp	.+26     	; 0xb5e <__stack+0x25f>
 b44:	23 2d       	mov	r18, r3
 b46:	2e 7f       	andi	r18, 0xFE	; 254
 b48:	a2 2e       	mov	r10, r18
 b4a:	89 14       	cp	r8, r9
 b4c:	58 f4       	brcc	.+22     	; 0xb64 <__stack+0x265>
 b4e:	34 fe       	sbrs	r3, 4
 b50:	0b c0       	rjmp	.+22     	; 0xb68 <__stack+0x269>
 b52:	32 fc       	sbrc	r3, 2
 b54:	09 c0       	rjmp	.+18     	; 0xb68 <__stack+0x269>
 b56:	83 2d       	mov	r24, r3
 b58:	8e 7e       	andi	r24, 0xEE	; 238
 b5a:	a8 2e       	mov	r10, r24
 b5c:	05 c0       	rjmp	.+10     	; 0xb68 <__stack+0x269>
 b5e:	b8 2c       	mov	r11, r8
 b60:	a3 2c       	mov	r10, r3
 b62:	03 c0       	rjmp	.+6      	; 0xb6a <__stack+0x26b>
 b64:	b8 2c       	mov	r11, r8
 b66:	01 c0       	rjmp	.+2      	; 0xb6a <__stack+0x26b>
 b68:	b9 2c       	mov	r11, r9
 b6a:	a4 fe       	sbrs	r10, 4
 b6c:	0f c0       	rjmp	.+30     	; 0xb8c <__stack+0x28d>
 b6e:	fe 01       	movw	r30, r28
 b70:	e8 0d       	add	r30, r8
 b72:	f1 1d       	adc	r31, r1
 b74:	80 81       	ld	r24, Z
 b76:	80 33       	cpi	r24, 0x30	; 48
 b78:	21 f4       	brne	.+8      	; 0xb82 <__stack+0x283>
 b7a:	9a 2d       	mov	r25, r10
 b7c:	99 7e       	andi	r25, 0xE9	; 233
 b7e:	a9 2e       	mov	r10, r25
 b80:	09 c0       	rjmp	.+18     	; 0xb94 <__stack+0x295>
 b82:	a2 fe       	sbrs	r10, 2
 b84:	06 c0       	rjmp	.+12     	; 0xb92 <__stack+0x293>
 b86:	b3 94       	inc	r11
 b88:	b3 94       	inc	r11
 b8a:	04 c0       	rjmp	.+8      	; 0xb94 <__stack+0x295>
 b8c:	8a 2d       	mov	r24, r10
 b8e:	86 78       	andi	r24, 0x86	; 134
 b90:	09 f0       	breq	.+2      	; 0xb94 <__stack+0x295>
 b92:	b3 94       	inc	r11
 b94:	a3 fc       	sbrc	r10, 3
 b96:	11 c0       	rjmp	.+34     	; 0xbba <__stack+0x2bb>
 b98:	a0 fe       	sbrs	r10, 0
 b9a:	06 c0       	rjmp	.+12     	; 0xba8 <__stack+0x2a9>
 b9c:	b2 14       	cp	r11, r2
 b9e:	88 f4       	brcc	.+34     	; 0xbc2 <__stack+0x2c3>
 ba0:	28 0c       	add	r2, r8
 ba2:	92 2c       	mov	r9, r2
 ba4:	9b 18       	sub	r9, r11
 ba6:	0e c0       	rjmp	.+28     	; 0xbc4 <__stack+0x2c5>
 ba8:	b2 14       	cp	r11, r2
 baa:	60 f4       	brcc	.+24     	; 0xbc4 <__stack+0x2c5>
 bac:	b6 01       	movw	r22, r12
 bae:	80 e2       	ldi	r24, 0x20	; 32
 bb0:	90 e0       	ldi	r25, 0x00	; 0
 bb2:	0e 94 41 06 	call	0xc82	; 0xc82 <fputc>
 bb6:	b3 94       	inc	r11
 bb8:	f7 cf       	rjmp	.-18     	; 0xba8 <__stack+0x2a9>
 bba:	b2 14       	cp	r11, r2
 bbc:	18 f4       	brcc	.+6      	; 0xbc4 <__stack+0x2c5>
 bbe:	2b 18       	sub	r2, r11
 bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <__stack+0x2c7>
 bc2:	98 2c       	mov	r9, r8
 bc4:	21 2c       	mov	r2, r1
 bc6:	a4 fe       	sbrs	r10, 4
 bc8:	10 c0       	rjmp	.+32     	; 0xbea <__stack+0x2eb>
 bca:	b6 01       	movw	r22, r12
 bcc:	80 e3       	ldi	r24, 0x30	; 48
 bce:	90 e0       	ldi	r25, 0x00	; 0
 bd0:	0e 94 41 06 	call	0xc82	; 0xc82 <fputc>
 bd4:	a2 fe       	sbrs	r10, 2
 bd6:	17 c0       	rjmp	.+46     	; 0xc06 <__stack+0x307>
 bd8:	a1 fc       	sbrc	r10, 1
 bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__stack+0x2e3>
 bdc:	88 e7       	ldi	r24, 0x78	; 120
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	02 c0       	rjmp	.+4      	; 0xbe6 <__stack+0x2e7>
 be2:	88 e5       	ldi	r24, 0x58	; 88
 be4:	90 e0       	ldi	r25, 0x00	; 0
 be6:	b6 01       	movw	r22, r12
 be8:	0c c0       	rjmp	.+24     	; 0xc02 <__stack+0x303>
 bea:	8a 2d       	mov	r24, r10
 bec:	86 78       	andi	r24, 0x86	; 134
 bee:	59 f0       	breq	.+22     	; 0xc06 <__stack+0x307>
 bf0:	a1 fe       	sbrs	r10, 1
 bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <__stack+0x2f9>
 bf4:	8b e2       	ldi	r24, 0x2B	; 43
 bf6:	01 c0       	rjmp	.+2      	; 0xbfa <__stack+0x2fb>
 bf8:	80 e2       	ldi	r24, 0x20	; 32
 bfa:	a7 fc       	sbrc	r10, 7
 bfc:	8d e2       	ldi	r24, 0x2D	; 45
 bfe:	b6 01       	movw	r22, r12
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	0e 94 41 06 	call	0xc82	; 0xc82 <fputc>
 c06:	89 14       	cp	r8, r9
 c08:	38 f4       	brcc	.+14     	; 0xc18 <__stack+0x319>
 c0a:	b6 01       	movw	r22, r12
 c0c:	80 e3       	ldi	r24, 0x30	; 48
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	0e 94 41 06 	call	0xc82	; 0xc82 <fputc>
 c14:	9a 94       	dec	r9
 c16:	f7 cf       	rjmp	.-18     	; 0xc06 <__stack+0x307>
 c18:	8a 94       	dec	r8
 c1a:	f3 01       	movw	r30, r6
 c1c:	e8 0d       	add	r30, r8
 c1e:	f1 1d       	adc	r31, r1
 c20:	80 81       	ld	r24, Z
 c22:	b6 01       	movw	r22, r12
 c24:	90 e0       	ldi	r25, 0x00	; 0
 c26:	0e 94 41 06 	call	0xc82	; 0xc82 <fputc>
 c2a:	81 10       	cpse	r8, r1
 c2c:	f5 cf       	rjmp	.-22     	; 0xc18 <__stack+0x319>
 c2e:	22 20       	and	r2, r2
 c30:	09 f4       	brne	.+2      	; 0xc34 <__stack+0x335>
 c32:	42 ce       	rjmp	.-892    	; 0x8b8 <vfprintf+0x24>
 c34:	b6 01       	movw	r22, r12
 c36:	80 e2       	ldi	r24, 0x20	; 32
 c38:	90 e0       	ldi	r25, 0x00	; 0
 c3a:	0e 94 41 06 	call	0xc82	; 0xc82 <fputc>
 c3e:	2a 94       	dec	r2
 c40:	f6 cf       	rjmp	.-20     	; 0xc2e <__stack+0x32f>
 c42:	f6 01       	movw	r30, r12
 c44:	86 81       	ldd	r24, Z+6	; 0x06
 c46:	97 81       	ldd	r25, Z+7	; 0x07
 c48:	02 c0       	rjmp	.+4      	; 0xc4e <__stack+0x34f>
 c4a:	8f ef       	ldi	r24, 0xFF	; 255
 c4c:	9f ef       	ldi	r25, 0xFF	; 255
 c4e:	2b 96       	adiw	r28, 0x0b	; 11
 c50:	e2 e1       	ldi	r30, 0x12	; 18
 c52:	0c 94 f7 06 	jmp	0xdee	; 0xdee <__epilogue_restores__>

00000c56 <strnlen_P>:
 c56:	fc 01       	movw	r30, r24
 c58:	05 90       	lpm	r0, Z+
 c5a:	61 50       	subi	r22, 0x01	; 1
 c5c:	70 40       	sbci	r23, 0x00	; 0
 c5e:	01 10       	cpse	r0, r1
 c60:	d8 f7       	brcc	.-10     	; 0xc58 <strnlen_P+0x2>
 c62:	80 95       	com	r24
 c64:	90 95       	com	r25
 c66:	8e 0f       	add	r24, r30
 c68:	9f 1f       	adc	r25, r31
 c6a:	08 95       	ret

00000c6c <strnlen>:
 c6c:	fc 01       	movw	r30, r24
 c6e:	61 50       	subi	r22, 0x01	; 1
 c70:	70 40       	sbci	r23, 0x00	; 0
 c72:	01 90       	ld	r0, Z+
 c74:	01 10       	cpse	r0, r1
 c76:	d8 f7       	brcc	.-10     	; 0xc6e <strnlen+0x2>
 c78:	80 95       	com	r24
 c7a:	90 95       	com	r25
 c7c:	8e 0f       	add	r24, r30
 c7e:	9f 1f       	adc	r25, r31
 c80:	08 95       	ret

00000c82 <fputc>:
 c82:	0f 93       	push	r16
 c84:	1f 93       	push	r17
 c86:	cf 93       	push	r28
 c88:	df 93       	push	r29
 c8a:	fb 01       	movw	r30, r22
 c8c:	23 81       	ldd	r18, Z+3	; 0x03
 c8e:	21 fd       	sbrc	r18, 1
 c90:	03 c0       	rjmp	.+6      	; 0xc98 <fputc+0x16>
 c92:	8f ef       	ldi	r24, 0xFF	; 255
 c94:	9f ef       	ldi	r25, 0xFF	; 255
 c96:	2c c0       	rjmp	.+88     	; 0xcf0 <fputc+0x6e>
 c98:	22 ff       	sbrs	r18, 2
 c9a:	16 c0       	rjmp	.+44     	; 0xcc8 <fputc+0x46>
 c9c:	46 81       	ldd	r20, Z+6	; 0x06
 c9e:	57 81       	ldd	r21, Z+7	; 0x07
 ca0:	24 81       	ldd	r18, Z+4	; 0x04
 ca2:	35 81       	ldd	r19, Z+5	; 0x05
 ca4:	42 17       	cp	r20, r18
 ca6:	53 07       	cpc	r21, r19
 ca8:	44 f4       	brge	.+16     	; 0xcba <fputc+0x38>
 caa:	a0 81       	ld	r26, Z
 cac:	b1 81       	ldd	r27, Z+1	; 0x01
 cae:	9d 01       	movw	r18, r26
 cb0:	2f 5f       	subi	r18, 0xFF	; 255
 cb2:	3f 4f       	sbci	r19, 0xFF	; 255
 cb4:	31 83       	std	Z+1, r19	; 0x01
 cb6:	20 83       	st	Z, r18
 cb8:	8c 93       	st	X, r24
 cba:	26 81       	ldd	r18, Z+6	; 0x06
 cbc:	37 81       	ldd	r19, Z+7	; 0x07
 cbe:	2f 5f       	subi	r18, 0xFF	; 255
 cc0:	3f 4f       	sbci	r19, 0xFF	; 255
 cc2:	37 83       	std	Z+7, r19	; 0x07
 cc4:	26 83       	std	Z+6, r18	; 0x06
 cc6:	14 c0       	rjmp	.+40     	; 0xcf0 <fputc+0x6e>
 cc8:	8b 01       	movw	r16, r22
 cca:	ec 01       	movw	r28, r24
 ccc:	fb 01       	movw	r30, r22
 cce:	00 84       	ldd	r0, Z+8	; 0x08
 cd0:	f1 85       	ldd	r31, Z+9	; 0x09
 cd2:	e0 2d       	mov	r30, r0
 cd4:	09 95       	icall
 cd6:	89 2b       	or	r24, r25
 cd8:	e1 f6       	brne	.-72     	; 0xc92 <fputc+0x10>
 cda:	d8 01       	movw	r26, r16
 cdc:	16 96       	adiw	r26, 0x06	; 6
 cde:	8d 91       	ld	r24, X+
 ce0:	9c 91       	ld	r25, X
 ce2:	17 97       	sbiw	r26, 0x07	; 7
 ce4:	01 96       	adiw	r24, 0x01	; 1
 ce6:	17 96       	adiw	r26, 0x07	; 7
 ce8:	9c 93       	st	X, r25
 cea:	8e 93       	st	-X, r24
 cec:	16 97       	sbiw	r26, 0x06	; 6
 cee:	ce 01       	movw	r24, r28
 cf0:	df 91       	pop	r29
 cf2:	cf 91       	pop	r28
 cf4:	1f 91       	pop	r17
 cf6:	0f 91       	pop	r16
 cf8:	08 95       	ret

00000cfa <__ultoa_invert>:
 cfa:	fa 01       	movw	r30, r20
 cfc:	aa 27       	eor	r26, r26
 cfe:	28 30       	cpi	r18, 0x08	; 8
 d00:	51 f1       	breq	.+84     	; 0xd56 <__ultoa_invert+0x5c>
 d02:	20 31       	cpi	r18, 0x10	; 16
 d04:	81 f1       	breq	.+96     	; 0xd66 <__ultoa_invert+0x6c>
 d06:	e8 94       	clt
 d08:	6f 93       	push	r22
 d0a:	6e 7f       	andi	r22, 0xFE	; 254
 d0c:	6e 5f       	subi	r22, 0xFE	; 254
 d0e:	7f 4f       	sbci	r23, 0xFF	; 255
 d10:	8f 4f       	sbci	r24, 0xFF	; 255
 d12:	9f 4f       	sbci	r25, 0xFF	; 255
 d14:	af 4f       	sbci	r26, 0xFF	; 255
 d16:	b1 e0       	ldi	r27, 0x01	; 1
 d18:	3e d0       	rcall	.+124    	; 0xd96 <__ultoa_invert+0x9c>
 d1a:	b4 e0       	ldi	r27, 0x04	; 4
 d1c:	3c d0       	rcall	.+120    	; 0xd96 <__ultoa_invert+0x9c>
 d1e:	67 0f       	add	r22, r23
 d20:	78 1f       	adc	r23, r24
 d22:	89 1f       	adc	r24, r25
 d24:	9a 1f       	adc	r25, r26
 d26:	a1 1d       	adc	r26, r1
 d28:	68 0f       	add	r22, r24
 d2a:	79 1f       	adc	r23, r25
 d2c:	8a 1f       	adc	r24, r26
 d2e:	91 1d       	adc	r25, r1
 d30:	a1 1d       	adc	r26, r1
 d32:	6a 0f       	add	r22, r26
 d34:	71 1d       	adc	r23, r1
 d36:	81 1d       	adc	r24, r1
 d38:	91 1d       	adc	r25, r1
 d3a:	a1 1d       	adc	r26, r1
 d3c:	20 d0       	rcall	.+64     	; 0xd7e <__ultoa_invert+0x84>
 d3e:	09 f4       	brne	.+2      	; 0xd42 <__ultoa_invert+0x48>
 d40:	68 94       	set
 d42:	3f 91       	pop	r19
 d44:	2a e0       	ldi	r18, 0x0A	; 10
 d46:	26 9f       	mul	r18, r22
 d48:	11 24       	eor	r1, r1
 d4a:	30 19       	sub	r19, r0
 d4c:	30 5d       	subi	r19, 0xD0	; 208
 d4e:	31 93       	st	Z+, r19
 d50:	de f6       	brtc	.-74     	; 0xd08 <__ultoa_invert+0xe>
 d52:	cf 01       	movw	r24, r30
 d54:	08 95       	ret
 d56:	46 2f       	mov	r20, r22
 d58:	47 70       	andi	r20, 0x07	; 7
 d5a:	40 5d       	subi	r20, 0xD0	; 208
 d5c:	41 93       	st	Z+, r20
 d5e:	b3 e0       	ldi	r27, 0x03	; 3
 d60:	0f d0       	rcall	.+30     	; 0xd80 <__ultoa_invert+0x86>
 d62:	c9 f7       	brne	.-14     	; 0xd56 <__ultoa_invert+0x5c>
 d64:	f6 cf       	rjmp	.-20     	; 0xd52 <__ultoa_invert+0x58>
 d66:	46 2f       	mov	r20, r22
 d68:	4f 70       	andi	r20, 0x0F	; 15
 d6a:	40 5d       	subi	r20, 0xD0	; 208
 d6c:	4a 33       	cpi	r20, 0x3A	; 58
 d6e:	18 f0       	brcs	.+6      	; 0xd76 <__ultoa_invert+0x7c>
 d70:	49 5d       	subi	r20, 0xD9	; 217
 d72:	31 fd       	sbrc	r19, 1
 d74:	40 52       	subi	r20, 0x20	; 32
 d76:	41 93       	st	Z+, r20
 d78:	02 d0       	rcall	.+4      	; 0xd7e <__ultoa_invert+0x84>
 d7a:	a9 f7       	brne	.-22     	; 0xd66 <__ultoa_invert+0x6c>
 d7c:	ea cf       	rjmp	.-44     	; 0xd52 <__ultoa_invert+0x58>
 d7e:	b4 e0       	ldi	r27, 0x04	; 4
 d80:	a6 95       	lsr	r26
 d82:	97 95       	ror	r25
 d84:	87 95       	ror	r24
 d86:	77 95       	ror	r23
 d88:	67 95       	ror	r22
 d8a:	ba 95       	dec	r27
 d8c:	c9 f7       	brne	.-14     	; 0xd80 <__ultoa_invert+0x86>
 d8e:	00 97       	sbiw	r24, 0x00	; 0
 d90:	61 05       	cpc	r22, r1
 d92:	71 05       	cpc	r23, r1
 d94:	08 95       	ret
 d96:	9b 01       	movw	r18, r22
 d98:	ac 01       	movw	r20, r24
 d9a:	0a 2e       	mov	r0, r26
 d9c:	06 94       	lsr	r0
 d9e:	57 95       	ror	r21
 da0:	47 95       	ror	r20
 da2:	37 95       	ror	r19
 da4:	27 95       	ror	r18
 da6:	ba 95       	dec	r27
 da8:	c9 f7       	brne	.-14     	; 0xd9c <__ultoa_invert+0xa2>
 daa:	62 0f       	add	r22, r18
 dac:	73 1f       	adc	r23, r19
 dae:	84 1f       	adc	r24, r20
 db0:	95 1f       	adc	r25, r21
 db2:	a0 1d       	adc	r26, r0
 db4:	08 95       	ret

00000db6 <__prologue_saves__>:
 db6:	2f 92       	push	r2
 db8:	3f 92       	push	r3
 dba:	4f 92       	push	r4
 dbc:	5f 92       	push	r5
 dbe:	6f 92       	push	r6
 dc0:	7f 92       	push	r7
 dc2:	8f 92       	push	r8
 dc4:	9f 92       	push	r9
 dc6:	af 92       	push	r10
 dc8:	bf 92       	push	r11
 dca:	cf 92       	push	r12
 dcc:	df 92       	push	r13
 dce:	ef 92       	push	r14
 dd0:	ff 92       	push	r15
 dd2:	0f 93       	push	r16
 dd4:	1f 93       	push	r17
 dd6:	cf 93       	push	r28
 dd8:	df 93       	push	r29
 dda:	cd b7       	in	r28, 0x3d	; 61
 ddc:	de b7       	in	r29, 0x3e	; 62
 dde:	ca 1b       	sub	r28, r26
 de0:	db 0b       	sbc	r29, r27
 de2:	0f b6       	in	r0, 0x3f	; 63
 de4:	f8 94       	cli
 de6:	de bf       	out	0x3e, r29	; 62
 de8:	0f be       	out	0x3f, r0	; 63
 dea:	cd bf       	out	0x3d, r28	; 61
 dec:	09 94       	ijmp

00000dee <__epilogue_restores__>:
 dee:	2a 88       	ldd	r2, Y+18	; 0x12
 df0:	39 88       	ldd	r3, Y+17	; 0x11
 df2:	48 88       	ldd	r4, Y+16	; 0x10
 df4:	5f 84       	ldd	r5, Y+15	; 0x0f
 df6:	6e 84       	ldd	r6, Y+14	; 0x0e
 df8:	7d 84       	ldd	r7, Y+13	; 0x0d
 dfa:	8c 84       	ldd	r8, Y+12	; 0x0c
 dfc:	9b 84       	ldd	r9, Y+11	; 0x0b
 dfe:	aa 84       	ldd	r10, Y+10	; 0x0a
 e00:	b9 84       	ldd	r11, Y+9	; 0x09
 e02:	c8 84       	ldd	r12, Y+8	; 0x08
 e04:	df 80       	ldd	r13, Y+7	; 0x07
 e06:	ee 80       	ldd	r14, Y+6	; 0x06
 e08:	fd 80       	ldd	r15, Y+5	; 0x05
 e0a:	0c 81       	ldd	r16, Y+4	; 0x04
 e0c:	1b 81       	ldd	r17, Y+3	; 0x03
 e0e:	aa 81       	ldd	r26, Y+2	; 0x02
 e10:	b9 81       	ldd	r27, Y+1	; 0x01
 e12:	ce 0f       	add	r28, r30
 e14:	d1 1d       	adc	r29, r1
 e16:	0f b6       	in	r0, 0x3f	; 63
 e18:	f8 94       	cli
 e1a:	de bf       	out	0x3e, r29	; 62
 e1c:	0f be       	out	0x3f, r0	; 63
 e1e:	cd bf       	out	0x3d, r28	; 61
 e20:	ed 01       	movw	r28, r26
 e22:	08 95       	ret

00000e24 <_exit>:
 e24:	f8 94       	cli

00000e26 <__stop_program>:
 e26:	ff cf       	rjmp	.-2      	; 0xe26 <__stop_program>
